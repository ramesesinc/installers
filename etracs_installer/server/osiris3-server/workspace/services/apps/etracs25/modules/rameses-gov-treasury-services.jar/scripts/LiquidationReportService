import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import java.text.DecimalFormat;

class LiquidationReportService  {

	@PersistenceContext("main")
	def em; 

	@Service("NumberService")
	def numSvc;

	@Service("LiquidationService")
	def liqSvc

	def decformat = new DecimalFormat("#,##0.00");

	@ProxyMethod 
	def getRCDReportData( params ) {
		def liquidation = em.sqlContext.createNamedQuery('liquidationreport:getLiquidationInfo').setParameters(params ).singleResult
		if(! liquidation ) throw new Exception("Could not open liquidation with objid " + params.liquidationid )

		liquidation.remittances = em.sqlContext.createNamedQuery('liquidationreport:getRCDRemittances').setParameters(params ).resultList
		liquidation.collectionsummaries = em.sqlContext.createNamedQuery('liquidationreport:getRCDCollectionSummary').setParameters(params ).resultList
		liquidation.remittedforms = getRemittedSerials(params).each{
			it.qtybegin=it.qtybegin?(Integer)it.qtybegin:0
			it.qtyreceived=it.qtyreceived?(Integer)it.qtyreceived:0
			it.qtyending=(Integer)it.qtyending
			it.qtyissued=(Integer)it.qtyissued
		} 
		liquidation.otherpayments = em.sqlContext.createNamedQuery('liquidationreport:getRCDOtherPayments').setParameters(params ).resultList
		liquidation.nonserialremittances = em.sqlContext.createNamedQuery('liquidationreport:getRCDNonSerialRemittedForms').setParameters(params ).resultList
		liquidation.nonserialsummary = em.sqlContext.createNamedQuery('liquidationreport:getRCDNonSerialRemittedForms').setParameters(params ).resultList
		liquidation.amountinwords = numSvc.doubleToWords( liquidation.amount )
		return liquidation;
	}

	@ProxyMethod 
	def getRCDSummaryData( params ) {
		def liquidation = liqSvc.open([objid:params.liquidationid])
		if(! liquidation ) throw new Exception("Could not open liquidation with objid " + params.liquidationid )

		params.fundname = '%'
		liquidation.remittances = em.sqlContext.createNamedQuery('liquidationreport:getRCDRemittancesSummary').setParameters(params ).resultList
		liquidation.collectionsummaries = em.sqlContext.createNamedQuery('liquidationreport:getRCDCollectionSummary').setParameters(params ).resultList
		liquidation.remittedforms = getRemittedSerials(params).each{
			it.qtybegin=it.qtybegin?(Integer)it.qtybegin:0
			it.qtyreceived=it.qtyreceived?(Integer)it.qtyreceived:0
			it.qtyending=(Integer)it.qtyending
			it.qtyissued=(Integer)it.qtyissued
		} 
		liquidation.otherpayments = liquidation.checks
		liquidation.nonserialremittances = em.sqlContext.createNamedQuery('liquidationreport:getRCDNonSerialRemittedForms').setParameters(params ).resultList
		liquidation.nonserialsummary = em.sqlContext.createNamedQuery('liquidationreport:getRCDNonSerialRemittedForms').setParameters(params ).resultList
		liquidation.amountinwords = numSvc.doubleToWords( liquidation.amount )
		liquidation.cashbreakdown.each { it.qty = it.qty.toString() }
		def cashiers = em.sqlContext.createNamedQuery('liquidationreport:getLiquidationCashierList').setParameters( params).resultList;
		liquidation.cashier = [
			name: cashiers.name.join("/"),
			title: cashiers.jobtitle.join("/")
		]

		return liquidation;
	}


	

	@ProxyMethod 
	def getFundlist( liquidationid ) {
		def list = em.sqlContext.createNamedQuery('liquidationreport:getLiquidationFundlist')
				.setParameter('liquidationid', liquidationid)
				.resultList 
		return list

	}

	@ProxyMethod 
	def getReportByFund( params ) {
		def data  = em.sqlContext.createNamedQuery('liquidationreport:getLiquidationInfo').setParameters(params ).singleResult
		data.list = em.sqlContext.createNamedQuery("liquidationreport:getRCDRemittances").setParameters(params).resultList;	
		
		def fundTotal = data.list.amount.sum()
		if( ! fundTotal ) fundTotal = 0.0 
		
		data.amountinwords 	= numSvc.doubleToWords( fundTotal  ).toUpperCase() + ' PESOS' 
		data.amountformatted	= decformat.format( fundTotal )
							
		return data;

	}


	private def getRemittedSerials(params) {
		def list = em.sqlContext.createNamedQuery('liquidationreport:getRCDSerialRemittedForms').setParameters(params ).resultList
		def items = []
		def groups = list.groupBy{it.formno}
		groups.each{k, v ->
		    buildRange(items, v)
		}

		items.sort{ a,b -> 
		    def sa = a.formno + a.endingstartseries
		    def sb = b.formno + b.endingstartseries    
		    return sa <=> sb
		}
		return items;
	}	

	void buildRange(items, list) {
		if (!list) 
	        return
	    
	    if (list.size() == 1){
	        items << list[0] 
	        return
	    }
	    
	    def useditems = list.findAll{
	        ! (it.endingstartseries.toString().endsWith('01') || it.endingstartseries.toString().endsWith('51')) 
	    }
	    
	    useditems.each{  
	    	it.beginstartseries = (it.beginstartseries && it.receivedstartseries == null) ? it.beginstartseries : null 
	    	it.beginendseries = (it.beginstartseries && it.receivedstartseries == null) ? it.beginendseries : null 
	    	it.qtybegin = (it.beginstartseries && it.receivedstartseries == null) ? it.qtybegin : null 
	    	items << it
	    } 

	    list.removeAll(useditems)    
	    
	    def prevseries = 0
	    def qty = 0
	    def start = null
	    def end = null
	    
	    list.each{
	    	    if ( prevseries + 1 == it.endingstartseries || prevseries == 0){
	            if ( !start ) start = it;
	            end = it;
	            qty += 50
	        }
	        else {
	            items << createItem(start, end, qty)
	            start = it;
	            end = it;
	            qty = 50
	        }
	        prevseries = it.endingendseries
	    }
	    
	    if (start && end && qty > 0) {
	    	items << createItem(start, end, qty)
	    }
	}

	def createItem(start, end, qty) {
		return  [
        	formno: start.formno,
        	receivedstartseries: start.receivedstartseries  ? start.receivedstartseries: null ,
        	receivedendseries : start.receivedstartseries ? end.endingendseries: null ,
        	qtyreceived : start.receivedendseries ? qty : null,
        	beginstartseries: (start.beginstartseries && !start.receivedstartseries == null) ? start.beginstartseries: null ,
        	beginendseries : (start.beginstartseries && !start.receivedstartseries == null) ? end.endingendseries: null ,
        	qtybegin : (start.beginstartseries && start.receivedstartseries == null) ? qty : null,
        	endingstartseries:  start.receivedstartseries ? start.receivedstartseries: start.beginstartseries ,
        	endingendseries: end.endingendseries ,
            qtyending  : qty,
        ]

	}

	

}

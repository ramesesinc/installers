import com.rameses.annotations.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;


public class RPTBillingService
{
	@ActiveDB('rptbill')
	def em 

	@ActiveDB("rule")
	def ruleDB;

	@Env
	def env

	@Service('RPTUtil')
	def util

	@Service('Var')
	def var 

	@Service('DateService')
	def dtSvc 

	@Service('NumberService')
	def numSvc

	@Service('SequenceService')
	def seqSvc

	@Service('RPTLedgerService')
	def ledgerSvc 

	@Resource("RuleService")
	def ruleSvc;

	def RULESET 			= 'rptbilling'
	def FACT_PACKAGE 		= 'rptbilling.'
	def MAX_ADVANCE_YEARS 	= 3 
	
	def SCHEMA_BILL_LEDGER 	= 'rptbill_ledger'
	def SCHEMA_BILL_ITEM 	= 'rptbill_item'
	def SCHEMA_BILL_ACCT 	= 'rptbill_account'

	def BARCODE_PREFIX 		= '56001:'



	@ProxyMethod
	public def initBill(ledgerid){
		def pdate = dtSvc.parseCurrentDate()
		return [
			objid 				: 'RB' + new java.rmi.server.UID(),
			billdate 			: pdate.date,
			billtoyear 			: pdate.year,
			billtoqtr			: 4,
			advancebill			: false,
			fullpayment    		: true,
            qtrlypaymentavailed : false, 
            advancepayment      : false,
            currentdate 		: pdate.date,
            cy 					: pdate.year,
            rptledgerid 		: ledgerid,
		]
	}


	@ProxyMethod
	public def saveBill(bill){
		def pdate = dtSvc.parseCurrentDate()
		def cy = pdate.year 
		def lguid = var.lgu_objid
		if (!lguid) throw new Exception('The lgu_objid info in sys_var must be set.')
		lguid = lguid.replaceAll('-', '')
		def b = [
			objid 			: 'B' + new java.rmi.server.UID(),
			barcode 		: generateBarcode(),
			expirydate  	: bill.expirydate,
			taxpayer 		: bill.taxpayer,
			dtposted 		: pdate.date,
			postedby		: env.NAME,
			postedbytitle	: env.JOBTITLE,
			billtoyear		: bill.billtoyear,
			billtoqtr 		: bill.billtoqtr,
		]
		em.create(b)
		bill.ledgers.each{
			def ledger = [
				rptbillid		: b.objid, 
				rptledgerid 	: it.objid,
				partialbasic 	: 0.0,
				partialbasicint : 0.0,
				partialbasicdisc : 0.0,
				partialsef 		: 0.0,
				partialsefint 	: 0.0,
				partialsefdisc 	: 0.0,
				partialledyear 	: 0.0,
				partialledqtr 	: 0.0,
			]
			em.create(ledger, SCHEMA_BILL_LEDGER)
		}
		return b 
	}


	@ProxyMethod
	public def generateBill( bill ) {
		if (! bill.rptledgerid)
			throw new Exception('Ledger to bill is required.')

		bill.rptledger = em.findOpenLedgerById(bill)
        if (!bill.rptledger) throw new Exception('Ledger is fully paid or is exempted.')

		bill.taxpayer = bill.rptledger.taxpayer 

		validateBillParam(bill)

        if (bill.rptledger.recalcbill == 1 || bill.forceRecalcBill == true){
        	println 'Recalculating ledger -> ' + bill.rptledger.tdno 
        	bill.rptledger.faases = em.getLedgerFaases(bill)
        	bill.incentives = em.getIncentivesByLedgerId(bill)
        	buildLedgerItems(bill)
        	calculateBill(bill)
        	saveRptBill(bill)
        }
		return bill
	}


	@ProxyMethod
	public def generateNoLedger( bill ) {
		validateBillParam(bill)
		buildLedgerItems(bill)
		return calculateBill(bill)
	}


	@ProxyMethod
	public def generateBillByLedgerId(ledgerid){
		def bill = initBill(ledgerid)
		bill.billdate = dtSvc.serverDate
		return generateBill(bill)
	}

	@ProxyMethod
	public def generateBillByLedgerId2(ledgerid, billtoyear, billtoqtr ){
		def bill = initBill(ledgerid)
		bill.billdate = dtSvc.serverDate
		bill.billtoyear = billtoyear
		bill.billtoqtr = billtoqtr
		return generateBill(bill)
	}


	@ProxyMethod
	public def generateBillItemsByLedger(ledgerid){
		def bill = initBill(ledgerid)
		bill.billdate = dtSvc.serverDate
		bill.rptledger = em.findOpenLedgerById(bill)
        if (!bill.rptledger) throw new Exception('Ledger is fully paid or is exempted.')
        bill.rptledger.faases = em.getLedgerFaases(bill)
        bill.incentives = em.getIncentivesByLedgerId(bill)
        buildLedgerItems(bill)
		calculateBill(bill)
		return bill.items
	}

	@ProxyMethod
	public def generateNoLedgerBill(bill){
		buildLedgerItems(bill)
		calculateBill(bill)
		return bill
	}

	@ProxyMethod
	public def getBillByBarcode(param){
		def bill= em.findBillByBarcode(param)
		if (!bill) 
			throw new Exception('Invalid barcode or associated bill has already expired.')
		if (bill.expirydate <= dtSvc.serverDate) 
			throw new Exception('Bill has already expired.')
		bill.collectiontype = em.findCollectionTypeByBarcodeKey(param)
		if (!bill.collectiontype) 
			throw new Exception('Collection Type is not defined for barcode key ' + param.barcodekey + '.')
		bill.ledgers = em.getBillLedgers(bill)
		return bill 
	}


	@ProxyMethod
	public def loadProperties(bill){
		bill.billdate = dtSvc.serverDate
		if (!bill.taxpayer) throw new Exception('Taxpayer is required.')
		bill.taxpayerid = bill.taxpayer.objid
		return  em.getBilledLedgers(buildParams(bill))
	}


	/*========================================================
	*
	* NOTE: billing is now by ledger
	*
	========================================================*/
	@ProxyMethod
	public def buildParams(bill){
		def cdate = dtSvc.parseCurrentDate()
		def pdate = dtSvc.parseDate(bill.billdate, null)
		def params = [
			rptledgerid : bill.rptledgerid,
			taxpayerid : bill.taxpayerid,
			billtoyear  : bill.billtoyear, 
			billtoqtr   : bill.billtoqtr,
			toyear  	: bill.billtoyear, 
			toqtr   	: bill.billtoqtr, 
			currdate    : cdate.date,
			currentyr   : cdate.year,
			currentqtr  : cdate.qtr,
			nextbilldate : bill.expirydate,
			billdate   : pdate.date,
			billyear   : pdate.year,
			billqtr    : pdate.qtr,
			rputype    : bill.rputype, 
			forpayment : 0,
		]
		if (bill.rptledgerid) {
			params.filters = ' rl.objid = $P{rptledgerid}'
		}
		else {
			params.filters = ' f.taxpayer_objid = $P{taxpayerid} '
		}
		if (bill.rputype ){
			params.filters += ' AND r.rputype = $P{rputype} '
		}

		if (bill.barangay){
			params.barangayid = bill.barangay.objid 
			params.filters += ' AND rp.barangayid = $P{barangayid}'
		}
		return params
	}


	void saveRptBill(bill){
		bill.barcode = generateBarcode()
		bill.postedby = env.FULLNAME
		bill.postedbytitle = env.JOBTITLE 
		bill.dtposted = dtSvc.serverDate
		bill.taxpayer = bill.rptledger.taxpayer 

		bill.expirydate = getExpiryDate(bill)
	    bill.validuntil = dtSvc.add(bill.expirydate, '-1d')

		em.save(bill)
		saveBillLedger(bill)
		insertBillLedgerItems(bill)
		insertBillLedgerAccounts(bill)
		em.updateLedgerNextBillDate(buildParams(bill))
	}

	void saveBillLedger(bill){
		bill.rptledger.rptbillid = bill.objid 
		bill.rptledger.rptledgerid = bill.rptledger.objid 
		def lastitem = bill.items.last() 
		bill.rptledger.partialledyear = lastitem.year 
		bill.rptledger.partialledqtr = lastitem.qtr
		em.save(bill.rptledger, SCHEMA_BILL_LEDGER)
	}

	void insertBillLedgerItems(bill){
		em.deleteRptBillLedgerItem(bill)
		bill.items.each{
			it.rptbillid = bill.objid 
			it.year = (int) it.year 
			it.fromqtr = (int) it.fromqtr 
			em.create(it, SCHEMA_BILL_ITEM)
		}
	}

	void insertBillLedgerAccounts(bill){
		em.deleteRptBillLedgerAccount(bill)
		bill.taxes.each{
			it.rptledgerid = bill.rptledger.objid
			it.rptbillid = bill.objid 
			em.create(it, SCHEMA_BILL_ACCT)
		}
	}

	def generateBarcode(){
		def cy = dtSvc.serverYear
		def lguid = var.lgu_objid
		if (!lguid) throw new Exception('The lgu_objid info in sys_var must be set.')
		lguid = lguid.replaceAll('-', '')
		return BARCODE_PREFIX + lguid + cy + seqSvc.getNextFormattedSeriesA('RPTBILL-' + cy,7)
	}


	void buildLedgerItems(bill){
		if (!bill.rptledger.faases)
			throw new Exception('Ledger Items are required.')

		bill._firstitem = null 
		bill._pdate 	= dtSvc.parseDate(bill.billdate, null)
		def cy 			= bill._pdate.year 
		bill.items 		= []

		if (!bill.taxpayer){
			bill.taxpayer = bill.rptledger.taxpayer 
		}

		bill.rptledger.fromyear.upto(bill.billtoyear){ yr ->
			if (yr >= cy){
				createQtrlyItemFacts(bill, yr)
			}
			else{
				createYearlyItemFact(bill, yr)
			}
		}
	}


	void createYearlyItemFact(bill, yr){
		def ledgerfaas = bill.rptledger.faases.find{ yr >= it.fromyear && ( yr <= it.toyear || it.toyear == 0) }
		if (!ledgerfaas){
			def xyr = yr + 1
			ledgerfaas = bill.rptledger.faases.find{ xyr >= it.fromyear && ( xyr <= it.toyear || it.toyear == 0) }
		}
		if (!ledgerfaas) 
			throw new Exception('Ledger FAAS for year ' + yr + ' is not defined.\nVerify RPT Ledger faas history record.')

		def qtrlyav = numSvc.round( ledgerfaas.assessedvalue / 4)
		def av      = ledgerfaas.assessedvalue

		def fromqtr = (yr == bill.rptledger.fromyear ? bill.rptledger.fromqtr : 1 )
		def toqtr = (yr == bill.billtoyear ? bill.billtoqtr : 4)

		if (fromqtr != 1 || toqtr != 4)
			av = qtrlyav * (toqtr - fromqtr + 1)

		bill.items << createLedgerItem(bill, ledgerfaas, yr, 0, fromqtr, toqtr, av)
	}


	void createQtrlyItemFacts(bill, yr){
		def ledgerfaas = bill.rptledger.faases.find{ yr >= it.fromyear && ( yr <= it.toyear || it.toyear == 0) }
		if (!ledgerfaas){
			def xyr = yr + 1
			ledgerfaas = bill.rptledger.faases.find{ xyr >= it.fromyear && ( xyr <= it.toyear || it.toyear == 0) }
		}
		if (!ledgerfaas) 
			throw new Exception('Ledger FAAS for year ' + yr + ' is not defined.\nVerify RPT Ledger faas history record.')

		def qtrlyav  = numSvc.round( ledgerfaas.assessedvalue / 4)
		def fourthqtrav = ledgerfaas.assessedvalue - numSvc.round((qtrlyav * 3))

		def fromqtr = (yr == bill.rptledger.fromyear ? bill.rptledger.fromqtr : 1 )
		def toqtr = (yr == bill.billtoyear ? bill.billtoqtr : 4)

		fromqtr.upto(toqtr){qtr ->
			def av = qtrlyav
			if (qtr == 4) av = fourthqtrav
			bill.items << createLedgerItem(bill, ledgerfaas, yr, qtr, fromqtr, toqtr, av)
		}
	}

	def createLedgerItem(bill, ledgerfaas, yr, qtr, fromqtr, toqtr, av){
		def firstitem = false
		if (bill._firstitem == null){
			firstitem = true
			bill._firstitem = false
		}

		return [
	        objid              : 'BI' + new java.rmi.server.UID(),
	        rptledgerid        : bill.rptledger.objid,
	        rptledgerfaasid    : ledgerfaas.objid,
	        year               : yr,
	        qtr                : qtr,
	        originalav         : ledgerfaas.assessedvalue,
	        av                 : av,
	        txntype            : ledgerfaas.txntype.objid,
	        classification     : ledgerfaas.classification.objid,
	        actualuse          : ledgerfaas.classification.objid,
	        numberofmonthsfromqtr   : calculateNoOfMonthsFromQtr(bill._pdate, yr, qtr),
	        numberofmonthsfromjan   : calculateNoOfMonthsFromJan(bill._pdate, yr, qtr), 
	        backtax                 : util.toBoolean(ledgerfaas.backtax, false),
	        reclassed               : util.toBoolean(ledgerfaas.reclassed, false),
	        firstitem             	: firstitem,
	        assessedvalue			: 0.0,
	        qtrlyav 				: 0.0,
	        fromqtr 				: fromqtr,
	        toqtr 					: toqtr,
	        basic					: 0.0,
			basicint				: 0.0,
			basicdisc				: 0.0,
			sef						: 0.0,
			sefint					: 0.0,
			sefdisc					: 0.0,
			firecode				: 0.0,
			basicnet				: 0.0,
			sefnet					: 0.0,
			total					: 0.0,
			partialled 				: 0,
	    ]
	}

	int calculateNoOfMonthsFromQtr(pdate, year, qtr) {
		if (qtr == null || qtr == 0) qtr = 1 
		int currYear = pdate.year
		int currMonth = pdate.month
		qtr = ( qtr == 0 ? 1 : qtr )
		if(year < currYear) {
			return ((currYear - year) * 12 - (3 * (qtr-1))) + currMonth 
		}
		else {
			int nm = currMonth - (3 * (qtr-1))
			return nm < 0 ? 0 : nm
		}
	}
	
	int calculateNoOfMonthsFromJan(pdate, year, qtr) {
		int currYear = pdate.year
		int currMonth = pdate.month
		int nmon = 0;
		if(year < currYear) {
			nmon = ( currYear - year ) * 12 + currMonth
		}
		else {
			nmon = currMonth
		}
		return nmon 
	}

	/*============================================================
	** bill: [billdate, paymentoption, rptledger, items]
	============================================================*/
	@ProxyMethod
	public def calculateBill( bill ) {
		def facts = createFacts(bill)
		def actions = buildActions(bill, facts)

		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		grps.each{g ->
			ruleSvc.execute( RULESET, facts, actions, g.name);
		}
		return bill 
	}


	/*====================================================================
	* BUILD ACTIONS
	====================================================================*/

	def createVariableFact = { facts, rptledger, amount ->
		def var = ruleSvc.createFact(RULESET, FACT_PACKAGE+'VariableInfoFact')
		var.rptledger = rptledger
		var.amount = amount 
		facts << var
		return var
	}

	def createTaxSummaryFact = {params ->
		
		def ts = ruleSvc.createFact(RULESET, FACT_PACKAGE+'RPTLedgerTaxSummaryFact')
		ts.objid = params.var.key 
		ts.rptledger = params.rptledgeritem.rptledger 
		ts.revperiod = params.rptledgeritem.revperiod 
		ts.basic  = 0.0
		ts.basicint = 0.0
		ts.basicdisc = 0.0
		ts.sef = 0.0
		ts.sefint = 0.0
		ts.sefdisc = 0.0
		ts.firecode = 0.0
		return ts
	}


	def createShareFact = { params ->
		def share = ruleSvc.createFact(RULESET, FACT_PACKAGE+'ShareInfoFact')
		share.rptledger = params.taxsummary.rptledger 
		share.lgutype = params.lgutype 
		share.sharetype = params.sharetype 
		share.revperiod = params.taxsummary.revperiod
		share.basic = 0.0
		share.basicint = 0.0
		share.basicdisc = 0.0
		share.sef = 0.0
		share.sefint = 0.0
		share.sefdisc = 0.0
		return share 
	}

	//TODO:
	def getBarangayRevenueItem(params){
		def barangayid = params.taxsummary.rptledger.barangayid
		def barangay = params.taxsummary.rptledger.barangay
		def brgyacct = em.findBrgyTaxAccountMapping([barangayid:barangayid])

		if (! brgyacct) 
			throw new Exception('Barangay Share Account Mapping is not defined for Barangay ' + barangay + '.')

		def acct = null 

		if (params.sharetype.equalsIgnoreCase('basic')){
			if (params.revperiod.equalsIgnoreCase('prior'))
				acct = brgyacct.prioracct
			else if (params.revperiod.equalsIgnoreCase('previous'))
				acct = brgyacct.prevacct
			else if (params.revperiod.equalsIgnoreCase('current'))
				acct = brgyacct.curracct
			else if (params.revperiod.equalsIgnoreCase('advance'))
				acct = brgyacct.advacct
		}
		else if (params.sharetype.equalsIgnoreCase('basicint')){
			if (params.revperiod.equalsIgnoreCase('prior'))
				acct = brgyacct.priorintacct
			else if (params.revperiod.equalsIgnoreCase('previous'))
				acct = brgyacct.previntacct
			else if (params.revperiod.equalsIgnoreCase('current'))
				acct = brgyacct.currintacct
			else if (params.revperiod.equalsIgnoreCase('advance'))
				acct = brgyacct.advintacct
		}
			

		if (acct)
			return [key:acct.objid, value:acct.title]
		
		throw new Exception('Invalid Share Type for Barangay Share Action.')
	}

	def createTaxItem = {params ->
		def acct = params.acct 
		if (!acct){
			acct = getBarangayRevenueItem(params)
		}

		return [
			objid 		: 'BI' + new java.rmi.server.UID(),
			revperiod	: params.taxsummary.revperiod,
			revtype 	: params.sharetype,
			item 		: [objid:acct.key, title:acct.value],
			amount 		: 0.0,
			sharetype 	: params.lgutype,
		]
	}

	def buildActions(bill, facts){
		def actions = new RuleAction();
		actions.addCommand('calc-basic', new CalcBasic(numSvc:numSvc, items:bill.items))
		actions.addCommand('calc-sef', new CalcSEF(numSvc:numSvc, items:bill.items))
		actions.addCommand('calc-firecode', new CalcFireCode(numSvc:numSvc, items:bill.items))
		actions.addCommand('apply-partial-payment-made', new ApplyPartialPaymentMade(numSvc:numSvc, items:bill.items))
		actions.addCommand('apply-incentive', new ApplyIncentive(numSvc:numSvc, items:bill.items))
		actions.addCommand('assign-rev-period', new AssignRevenuePeriod(items:bill.items))
		actions.addCommand('apply-partialpayment', new ApplyPartialPayment(numSvc:numSvc, items:bill.items))
		actions.addCommand('remove-unpartialled-item', new RemoveUnpartialledItem(numSvc:numSvc, facts:facts, items:bill.items))
		actions.addCommand('create-tax-summary', new CreateTaxSummary(numSvc:numSvc, facts:facts, createTaxSummaryFact:createTaxSummaryFact))
		
		actions.addCommand('add-cityshare-acct', new AddShareInfo(numSvc:numSvc, facts:facts, taxes:bill.taxes, lgutype:'city', createShareFact:createShareFact, createTaxItem:createTaxItem))
		actions.addCommand('add-provshare-acct', new AddShareInfo(numSvc:numSvc, facts:facts, taxes:bill.taxes, lgutype:'province', createShareFact:createShareFact, createTaxItem:createTaxItem))
		actions.addCommand('add-munishare-acct', new AddShareInfo(numSvc:numSvc, facts:facts, taxes:bill.taxes, lgutype:'municipality', createShareFact:createShareFact, createTaxItem:createTaxItem))
		actions.addCommand('add-brgyshare-acct', new AddShareInfo(numSvc:numSvc, facts:facts, taxes:bill.taxes, lgutype:'barangay', createShareFact:createShareFact, createTaxItem:createTaxItem))
		
		actions.addCommand('add-firecode-acct', new AddFireCodeAccount(numSvc:numSvc, items:bill.items, taxes:bill.taxes, createTaxItem:createTaxItem))
		actions.addCommand('add-misc-account', new AddMiscAccount(numSvc:numSvc, taxes:bill.taxes))
		return actions 
	}


	/*====================================================================
	* CREATE FACTS
	====================================================================*/
	def createFacts(bill){
		bill.taxes = []
		def facts = []
		def billdate = dtSvc.parse('yyyy-MM-dd',bill.billdate) 
		facts << new CurrentDate(billdate)
		facts << new EffectiveDate(billdate)
		facts << createPaymentOptionFact(bill)
		createRPTLedgerFact(bill, facts)
		return facts
	}

	def createPaymentOptionFact(bill){
		def payoption = ruleSvc.createFact(RULESET, FACT_PACKAGE+'PaymentOptionFact')
		payoption.type = bill.paymentoption
		return payoption 
	}

	void createRPTLedgerFact(bill, facts){
		def rptledger = bill.rptledger

		def ledger = ruleSvc.createFact(RULESET, FACT_PACKAGE+'RPTLedgerFact')
		ledger.objid = rptledger.objid
		ledger.lastyearpaid = rptledger.lastyearpaid
		ledger.lastqtrpaid = rptledger.lastqtrpaid
		ledger.firstqtrpaidontime = rptledger.firstqtrpaidontime
		ledger.qtrlypaymentpaidontime = rptledger.qtrlypaymentpaidontime
		ledger.barangayid = rptledger.barangayid
		ledger.barangay = rptledger.barangay
		ledger.rputype = rptledger.rputype
		facts << ledger

		bill.items.eachWithIndex{ it, idx ->
			facts << createRPTLedgerItemFact(ledger, it, idx)
		}
		bill.incentives.each{
			facts << createIncentiveFact(ledger, it)
		}

		createPartialPaymentMadeFact(rptledger, facts)

		if (bill.partial && bill.partial.amount > 0.0){
			def partial = ruleSvc.createFact(RULESET, FACT_PACKAGE+'PartialPayment')
			partial.rptledger = ledger 
			partial.amount = bill.partial.amount 
			partial.idx = 0
			facts << partial 
		}
	}

	void createPartialPaymentMadeFact(rptledger, facts){
		def total = 0.0
		rptledger.partialbasic = ( rptledger.partialbasic == null ? 0.0 : rptledger.partialbasic)
		rptledger.partialbasicint = ( rptledger.partialbasicint == null ? 0.0 : rptledger.partialbasicint)
		rptledger.partialbasicdisc = ( rptledger.partialbasicdisc == null ? 0.0 : rptledger.partialbasicdisc)
		rptledger.partialsef = ( rptledger.partialsef == null ? 0.0 : rptledger.partialsef)
		rptledger.partialsefint = ( rptledger.partialsefint == null ? 0.0 : rptledger.partialsefint)
		rptledger.partialsefdisc = ( rptledger.partialsefdisc == null ? 0.0 : rptledger.partialsefdisc)

		total += rptledger.partialbasic
		total += rptledger.partialbasicint
		total += rptledger.partialbasicdisc
		total += rptledger.partialsef
		total += rptledger.partialsefint
		total += rptledger.partialsefdisc

		if (total > 0.0){
			def pmt = ruleSvc.createFact(RULESET, FACT_PACKAGE+'PartialPaymentMade')
			pmt.partialbasic = rptledger.partialbasic
			pmt.partialbasicint = rptledger.partialbasicint
			pmt.partialbasicdisc = rptledger.partialbasicdisc
			pmt.partialsef = rptledger.partialsef
			pmt.partialsefint = rptledger.partialsefint
			pmt.partialsefdisc = rptledger.partialsefdisc
			facts << pmt 
		}
	}

	def createIncentiveFact(ledger, incentive){
		def ifact = ruleSvc.createFact(RULESET, FACT_PACKAGE+'RPTIncentive')
		ifact.rptledger = ledger
		ifact.basicrate = incentive.basicrate
		ifact.sefrate =  incentive.sefrate
		ifact.fromyear = incentive.fromyear
		ifact.toyear = incentive.toyear
		return ifact 
	}


	def createRPTLedgerItemFact(ledger, item, idx){
		def fact = ruleSvc.createFact(RULESET, FACT_PACKAGE+'RPTLedgerItemFact')
		fact.objid = item.objid
		fact.rptledger = ledger
		fact.firstitem = item.firstitem
		fact.year = item.year
		fact.qtr = item.qtr
		fact.originalav = item.originalav
		fact.av = item.av
		fact.txntype = item.txntype
		fact.classification = item.classification
		fact.actualuse = item.actualuse
		fact.numberofmonthsfromqtr = item.numberofmonthsfromqtr
		fact.numberofmonthsfromjan = item.numberofmonthsfromjan
		fact.backtax = item.backtax
		fact.reclassed = item.reclassed
		fact.paidyear = item.paidyear
		fact.basic = 0.0
		fact.basicint = 0.0
		fact.basicdisc = 0.0
		fact.basicnet = 0.0
		fact.sef = 0.0
		fact.sefint = 0.0
		fact.sefdisc = 0.0
		fact.sefnet = 0.0
		fact.totalbasicsef = 0.0
		fact.firecode = 0.0
		fact.total = 0.0
		fact.idx = idx 
		return fact
	}


	void validateBillParam(bill){
		
		def pdate = dtSvc.parseCurrentDate()

		if (bill.billdate == null) {
			bill.billdate = pdate.date 
		}
		else{
			bill.billdate = dtSvc.parse('yyyy-MM-dd', bill.billdate)
			bill.forceRecalcBill = true
		}

		util.required('Bill To Year', bill.billtoyear)
		util.required('Bill To Qtr', bill.billtoqtr)

		if (bill.billtoyear < bill.rptledger.lastyearpaid)
			throw new Exception('Bill To Year must be greater than or equal to Last Year Paid.')

		if (bill.billtoyear == bill.rptledger.lastyearpaid && bill.billtoqtr <= bill.rptledger.lastqtrpaid)
			throw new Exception('Bill To Qtr must be greater than Last Qtr Paid.')
		

		def maxbilltoyear = pdate.year + MAX_ADVANCE_YEARS
		if (bill.billtoyear > maxbilltoyear){
			throw new Exception('Bill To Year must not exceed year ' +  maxbilltoyear + '.')
		}

		if (bill.advancepayment){
			if (bill.billtoyear < pdate.year )
				throw new Exception('Advance Year must be greater than current year.')
		}
		else if (bill.advancebill){
			if ( bill.billdate < bill.currentdate )
				throw new Exception('Advance Billing Date must be greater than current date.')
		}
		
		if (bill.advancebill && bill.billdate <= (pdate.date - 1 ))
            throw new Exception('Advance Billing Date must be greater than current date.')
	}


	def getExpiryDate(bill) { 
		def dt = dtSvc.parseDate(bill.billdate,null);

		//check in database if there is qtr deadline overrides
		def qtr_deadline = em.findExpiry([qtr:dt.qtr, year:dt.year, date:dt.date])
		
		//check discount, interest overrides
		def expirydate = null;
		def expirytype = null;

		if( ! qtr_deadline ) {
			qtr_deadline = [
				expirydate : dtSvc.getQtrEndDate(dt.qtr, dt.year),
				expirytype : 'QTRDUEDATE',
			]
		}

		expirydate = dtSvc.add(qtr_deadline.expirydate, '1d');
		expirytype = qtr_deadline.expirytype;

		//check discount first
		if(expirytype?.equalsIgnoreCase("DISCOUNT")) {
			return qtr_deadline.expirydate;
		}
		
		//if there are arrears, expiry is first day of next month
		if (bill.rptledger.lastyearpaid < dt.year){
			return dtSvc.add(dtSvc.getMonthEndDate(dt.date), '1d')
		}

		//check for interest overrides
		if( expirytype?.equalsIgnoreCase("INTEREST")) {
			return qtr_deadline.expirydate;
		}
		
		if( qtr_deadline ) {
			return qtr_deadline.expirydate;
		}	
		else {
			return dtSvc.add(dtSvc.getMonthEndDate(dt.date), '1d')
		} 
	}


}





/*============================================================================
**
** ACTION HANDLERS
**
============================================================================**/	

public class CalcBasic implements RuleActionHandler {
	def numSvc
	def items 

	public void execute(def params, def drools) {
		def item = items.find{ it.objid == params.rptledgeritem.objid }

		if (params.computationtype.equalsIgnoreCase('tax'))
			item.basic = numSvc.round(params.expr.getDecimalValue())
		else if (params.computationtype.equalsIgnoreCase('discount'))
			item.basicdisc = numSvc.round(params.expr.getDecimalValue())
		else if (params.computationtype.equalsIgnoreCase('penalty'))
			item.basicint = numSvc.round(params.expr.getDecimalValue())

		item.basicnet = item.basic - item.basicdisc + item.basicint
		item.sefnet = item.sef - item.sefdisc + item.sefint
		item.totalbasicsef = item.basicnet + item.sefnet
		item.total = item.totalbasicsef + item.firecode

		def rli = params.rptledgeritem
		rli.basic = item.basic
		rli.basicdisc = item.basicdisc
		rli.basicint = item.basicint
		rli.basicnet = item.basicnet
		rli.totalbasicsef = item.totalbasicsef
		rli.total = item.total 
	}
}	

public class CalcSEF implements RuleActionHandler {
	def numSvc
	def items 

	public void execute(def params, def drools) {
		def item = items.find{ it.objid == params.rptledgeritem.objid }

		if (params.computationtype.equalsIgnoreCase('tax') )
			item.sef = numSvc.round(params.expr.getDecimalValue())
		else if (params.computationtype.equalsIgnoreCase('discount'))
			item.sefdisc = numSvc.round(params.expr.getDecimalValue())
		else if (params.computationtype.equalsIgnoreCase('penalty'))
			item.sefint = numSvc.round(params.expr.getDecimalValue())

		item.basicnet = item.basic - item.basicdisc + item.basicint
		item.sefnet = item.sef - item.sefdisc + item.sefint
		item.totalbasicsef = item.basicnet + item.sefnet
		item.total = item.totalbasicsef + item.firecode

		def rli = params.rptledgeritem
		rli.sef = item.sef
		rli.sefdisc = item.sefdisc
		rli.sefint = item.sefint
		rli.sefnet = item.sefnet 
		rli.totalbasicsef = item.totalbasicsef
		rli.total = item.total 
	}
}	


public class CalcFireCode implements RuleActionHandler {
	def numSvc
	def items 

	public void execute(def params, def drools) {
		def item = items.find{ it.objid == params.rptledgeritem.objid }

		item.firecode = numSvc.round(params.expr.getDecimalValue())
		item.total = item.totalbasicsef + item.firecode 

		def rli = params.rptledgeritem
		rli.firecode = item.firecode
		rli.total = item.total 
	}
}	


public class ApplyPartialPaymentMade implements RuleActionHandler {
	def numSvc
	def items 

	public void execute(def params, def drools) {
		def item = items.find{ it.objid == params.rptledgeritem.objid }
		def pmt = params.partialpayment

		item.basic =  numSvc.round( item.basic - pmt.partialbasic )
		item.basicdisc =  numSvc.round( item.basicdisc - pmt.partialbasicdisc )
		item.basicint =  numSvc.round( item.basicint - pmt.partialbasicint )
		item.sef =  numSvc.round( item.sef - pmt.partialsef )
		item.sefdisc =  numSvc.round( item.sefdisc - pmt.partialsefdisc )
		item.sefint =  numSvc.round( item.sefint - pmt.partialsefint )

		item.basicnet = numSvc.round( item.basic - item.basicdisc + item.basicint )
		item.sefnet = numSvc.round( item.sef - item.sefdisc + item.sefint )
		item.totalbasicsef = numSvc.round( item.basicnet + item.sefnet )

		item.total = numSvc.round( item.totalbasicsef + item.firecode )

		def rli = params.rptledgeritem
		rli.basic = item.basic
		rli.basicdisc = item.basicdisc
		rli.basicint = item.basicint
		rli.basicnet = item.basicnet
		rli.sef = item.sef
		rli.sefdisc = item.sefdisc
		rli.sefint = item.sefint
		rli.sefnet = item.sefnet 
		rli.totalbasicsef = item.totalbasicsef
		rli.total = item.total 
	}
}	



public class ApplyIncentive implements RuleActionHandler {
	def numSvc
	def items 

	public void execute(def params, def drools) {
		def item = items.find{ it.objid == params.rptledgeritem.objid }
		def incentive = params.incentive

		if (incentive.basicrate > 0.0){
			item.basic = numSvc.round( item.basic * (100 - incentive.basicrate) / 100.0 )
			item.basicdisc = numSvc.round( item.basicdisc * (100 - incentive.basicrate) / 100.0 )
			item.basicint = numSvc.round( item.basicint * (100 - incentive.basicrate) / 100.0 )
		}
		
		if (incentive.sefrate > 0.0){
			item.sef = numSvc.round( item.sef * (100 - incentive.sefrate) / 100.0 )
			item.sefdisc = numSvc.round( item.sefdisc * (100 - incentive.sefrate) / 100.0 )
			item.sefint = numSvc.round( item.sefint * (100 - incentive.sefrate) / 100.0 )
		}

		item.basicnet = item.basic - item.basicdisc + item.basicint
		item.sefnet = item.sef - item.sefdisc + item.sefint
		item.totalbasicsef = item.basicnet + item.sefnet
		item.total = item.totalbasicsef + item.firecode 

		def rli = params.rptledgeritem
		rli.basic = item.basic
		rli.basicdisc = item.basicdisc
		rli.basicint = item.basicint
		rli.basicnet = item.basicnet
		rli.sef = item.sef
		rli.sefdisc = item.sefdisc
		rli.sefint = item.sefint
		rli.sefnet = item.sefnet 
		rli.totalbasicsef = item.totalbasicsef
		rli.total = item.total 
	}
}	



public class ApplyPartialPayment implements RuleActionHandler {
	def numSvc
	def items 

	public void execute(def params, def drools) {
		def item = items.find{ it.objid == params.rptledgeritem.objid }
		def partial = params.partialpayment
		def payment = partial.amount 

		// MUST BE SET
		// This flag is verified upon posting of receipt 
		// and update the RPTLedger status accordingly
		item.partialled = 1;

		if (payment > item.firecode){
			payment -= item.firecode 
		}
		else{
			item.firecode = payment 
			payment = 0.0 
			item.basic 		= 0.0
			item.basicdisc 	= 0.0
			item.basicint 	= 0.0
			item.sef 		= 0.0
			item.sefdisc 	= 0.0
			item.sefint 	= 0.0
		}

		if (payment > 0.0){
			def linetotal 			= item.total - item.firecode 
			def partialbasic     	= numSvc.round(  payment * (item.basic - item.basicdisc) / linetotal )
			def partialbasicint  	= numSvc.round(  payment * item.basicint / linetotal )
			def partialbasicdisc 	= numSvc.round(  payment * item.basicdisc / linetotal )

			def partialsefint  		= numSvc.round(  payment * item.sefint / linetotal )
			def partialsefdisc 		= numSvc.round(  payment * item.sefdisc / linetotal )
			def partialsef 			= numSvc.round( payment - partialsefint - partialbasic - partialbasicint  )

			item.basic 		= partialbasic + partialbasicdisc
			item.basicdisc 	= partialbasicdisc
			item.basicint 	= partialbasicint
			item.sef 		= partialsef + partialsefdisc
			item.sefdisc 	= partialsefdisc
			item.sefint 	= partialsefint
		}

		item.basicnet 		= item.basic - item.basicdisc + item.basicint
		item.sefnet 		= item.sef - item.sefdisc + item.sefint
		item.totalbasicsef 	= item.basicnet + item.sefnet

		item.total = item.totalbasicsef + item.firecode 

		def rli = params.rptledgeritem
		rli.basic = item.basic
		rli.basicdisc = item.basicdisc
		rli.basicint = item.basicint
		rli.basicnet = item.basicnet
		rli.sef = item.sef
		rli.sefdisc = item.sefdisc
		rli.sefint = item.sefint
		rli.sefnet = item.sefnet 
		rli.totalbasicsef = item.totalbasicsef
		rli.total = item.total 
	}
}	


public class RemoveUnpartialledItem implements RuleActionHandler {
	def numSvc
	def facts 
	def items 

	public void execute(def params, def drools) {
		def item = items.find{ it.objid == params.rptledgeritem.objid }
		items.remove(item)
		facts.remove(params.rptledgeritem)
	}
}	


public class AssignRevenuePeriod implements RuleActionHandler {
	def items 

	public void execute(def params, def drools) {
		params.rptledgeritem.revperiod = params.revperiod
		def item = items.find{ it.objid == params.rptledgeritem.objid }
		item.revperiod = params.revperiod
	}
}	

public class CreateTaxSummary implements RuleActionHandler {
	def numSvc
	def facts
	def createTaxSummaryFact

	public void execute(def params, def drools) {
		def var = facts.find{
			try {
				return it.objid == params.var.key
			}
			catch(e){
				// ignore mismatch fact
			}
		}	

		if (! var){
			var = createTaxSummaryFact(params)
			facts << var 
		}

		var.basic  += params.rptledgeritem.basic
		var.basicint += params.rptledgeritem.basicint
		var.basicdisc += params.rptledgeritem.basicdisc
		var.sef += params.rptledgeritem.sef
		var.sefint += params.rptledgeritem.sefint
		var.sefdisc += params.rptledgeritem.sefdisc
		var.firecode += params.rptledgeritem.firecode
	}
}	



public class AddShareInfo implements RuleActionHandler {
	def numSvc
	def facts
	def taxes 
	def createShareFact
	def createTaxItem
	def lgutype

	public void execute(def params, def drools) {
		params.lgutype = lgutype 
		def amount = numSvc.round(params.expr.getDecimalValue())

		def share = facts.find{
			try {
				return it.lgutype == params.lgutype && 
				       it.revperiod == params.taxsummary.revperiod 
			}
			catch(e){
				// ignore mismatch fact
			}
		}	

		if (! share && amount > 0.0){
			share = createShareFact(params)
			facts << share 
		}

		if (amount > 0.0){
			share[params.sharetype] = amount 
			def tax = taxes.find{it.item.objid 	== params.acct?.key}
			if (!tax){
				tax = createTaxItem(params)
				taxes << tax
			}
			tax.amount = amount 
		}
	}
}	


public class AddFireCodeAccount implements RuleActionHandler {
	def numSvc
	def items 
	def taxes 
	def createTaxItem

	public void execute(def params, def drools) {
		params.sharetype = 'firecode'
		def amount = numSvc.round(params.expr.getDecimalValue())

		if (amount > 0.0){
			def tax = taxes.find{it.item.objid 	== params.acct?.key}
			if (!tax){
				tax = createTaxItem(params)
				taxes << tax
			}
			tax.amount += amount 
		}
	}
}	



public class AddMiscAccount implements RuleActionHandler {
	def numSvc
	def taxes 

	public void execute(def params, def drools) {
		def amount = numSvc.round(params.expr.getDecimalValue())
		if (amount > 0.0){
			def tax = taxes.find{it.item.objid 	== params.acct.key}
			if (!tax){
				tax = [
					objid 		: 'BI' + new java.rmi.server.UID(),
					revperiod	: 'current',
					revtype 	: 'misc',
					item 		: [objid:params.acct.key, title:params.acct.value],
					amount 		: amount,
				]
				taxes << tax
			}
			tax.amount = amount 
		}
	}
}	

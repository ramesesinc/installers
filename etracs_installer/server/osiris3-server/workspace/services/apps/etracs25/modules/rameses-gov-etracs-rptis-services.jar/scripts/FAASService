import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*


class FAASService
{
	@PersistenceContext('main')
	def pem

	@ActiveDB('faas')	
	def em 

	@Service('Var')
	def var 

	@Service('DateService')
	def dtSvc 

	@Service('RPUService')
	def rpuSvc

	@Service('RealPropertyService')
	def rpSvc 

	@Service('SequenceService')
	def seqSvc

	@Service('RPTUtil')
	def utilSvc

	@Service('TxnRefService')
	def txnRef

	@Service('WorkflowStateService')
    def wsSvc 

    @Service('FAASAnnotationService')
    def annotationSvc 

    @Service('TxnSignatoryService')
    def signatorySvc 

    @Service('RPTTrackingService')
    def trackingSvc

    @Service('FAASService')
    def faasSvc

    def signatories = ['receiver','taxmapper', 'taxmapping_chief', 'examiner', 'appraiser', 'appraisal_chief', 'recommender', 'assistant_assessor', 'approver']

	

	def SCHEMA_PREVIOUSFAAS		= 'previousfaas'
	def SCHEMA_BACKTAX			= 'backtax'
	
	def STATE_INTERIM 				= 'INTERIM'
	def STATE_FORAPPROVAL 				= 'FORAPPROVAL'
	def STATE_CURRENT 				= 'CURRENT'
	def STATE_CANCELLED  			= 'CANCELLED'

	def UTDNO_KEY 				= 'UNIQUE_TDNO'

	@ProxyMethod
	public def initNewDiscovery( info ) {
		if (info.rputype != 'land'){
			info.suffix = rpuSvc.getNextSuffix([rputype:info.rputype, realpropertyid:info.rp.objid])
			info.fullpin = info.rp.pin + '-' + info.suffix 
		}
		def faas = initCapture(info)
		faas.datacapture = false
		faas.autonumber  = utilSvc.toBoolean(var.td_autonumber, false)
        faas.rp.barangayid = info.barangay.objid
        if (info.rputype == 'land'){
        	rpSvc.create(faas.rp)
        }
        rpuSvc.createRpu(faas.rpu)
        createFaas(faas)
        return faas
	}

	@ProxyMethod
	public def initCapture( info ) {
		def faas 			= initFaas(info)
		faas.datacapture 	= true
		faas.autonumber     = ( info.autonumber != null ? info.autonumber : false)
		faas.previousfaases = []
		faas.backtaxes 		= []

		if (info.rputype == 'land'){
			def rp = em.findRealProperty([ry:info.ry, pin:info.pin])
			if (rp && rp.faasid) 
				throw new Exception('PIN is already referenced by TD No. ' + rp.tdno + '.')

			if (rp){
				faas.rp = rp;
			}
			else {
				faas.rp = rpSvc.init()
				faas.rp.putAll(info)
			}
		}
		else{
			faas.rp = info.rp 
			info.realpropertyid = info.rp.objid
		}

		def rpu = em.findRpu([ry:info.ry, fullpin:info.fullpin, rputype:info.rputype])
		if (rpu && rpu.faasid)
			throw new Exception('RPU is already referenced by TD No. ' + rpu.tdno + '.')

		if(rpu){
			faas.rpu = rpu
		}
		else {
			faas.rpu = rpuSvc.initRpu(info);
		}
		
		faas.realpropertyid = faas.rp.objid 
		faas.lguid = faas.rp.lguid 
		faas.lgutype = faas.rp.lgutype 
		faas.rpuid = faas.rpu.objid
		return faas
	}


	@ProxyMethod
	public def initOnlineTransaction( info ) {
		info.txntype = getTxnType(info.txntype.objid)
		def faas = faasSvc.initTransaction(info)
		signatorySvc.init(faas, signatories)
		faas.memoranda = ' '

		if (faas.rpu.rputype == 'land' && faas.txntype.newrealproperty){
			rpSvc.create(faas.rp)
		}
		if (faas.txntype.newrpu){
			rpuSvc.createRpu(faas.rpu)
		}

		createFaas(faas)
		return faas;
	}

	@ProxyMethod
	public def initTransaction( info ) {
		def faas = faasSvc.loadFaas( info.faas )
		validateFaasForTransaction(faas)
		initNewFaasInfo(info, faas)
		signatorySvc.init(faas, signatories)

		if (faas.rpu.rputype == 'land' && faas.txntype.newrealproperty){
			def rp = em.findOpenRealProperty([pin:faas.rp.pin, claimno:info.claimno])
			if (rp){
				faas.rp = rpSvc.open(rp)
			}
			else {
				def oldrpid 	= faas.rp.objid 
				def newrpid 	= utilSvc.generateId('RP')
				faas.rp.previd 	= oldrpid
				faas.rp.objid 	= newrpid 
				faas.rp.state 	= STATE_INTERIM
				faas.rp.isnew   = true
			}
		}

		if (faas.txntype.newrpu ){
			def rpu = em.findOpenRpu([realproperytid:faas.rp.objid, rputype:faas.rpu.rputype])
			if (rpu){
				faas.rpu = rpuSvc.openRpu(rpu)
			}
			else{
				faas.rpu.previd = faas.rpu.objid 
				rpuSvc.generateNewIds(faas.rpu)
				faas.rpu.state 	= STATE_INTERIM
				faas.rpu.isnew  = true;
			}
		}

		
		faas.realpropertyid 	= faas.rp.objid
		faas.rpu.realpropertyid = faas.rp.objid
		faas.rpuid  			= faas.rpu.objid 
		return faas
	}


	@ProxyMethod
	public def createFaas( faas ) {
		checkTxnReference(faas)
		faas.utdno = generateUniqueTdNo(faas)
		updateTxnTimeStamp(faas)
		updateNameInfo(faas)
		signatorySvc.buildSignatories(faas, signatories)
		em.create(faas)
		faas.previousfaases.each{
			em.create(it, SCHEMA_PREVIOUSFAAS)
		}
		saveBackTaxes(faas)
		insertTxnReference(faas)
		updateRpuMasterInfo(faas)
		trackingSvc.assignTrackingNo(faas, 'faasonline', 'Document is currently reviewed.')
		return faas
	}


	@ProxyMethod
	public def openFaas(faas){
		faas = em.findById(faas)
		if (!faas) throw new Exception('FAAS does not exist or has already been deleted.')
		faas.txntype = getTxnType( faas.txntype.objid )
		faas.previousfaases = em.getPreviousFaases([faasid:faas.objid])
		faas.backtaxes      = em.getBackTaxes([faasid: faas.objid]).each{ it.taxable = utilSvc.toBoolean(it.taxable, true) }
		faas.annotated      = getAnnotatedStatus(faas.objid)
		signatorySvc.loadSignatories('faas', faas)
		return faas 
	}


	@ProxyMethod
	public def loadFaas(faas){
		faas = em.findById(faas)
		if (!faas) throw new Exception('FAAS does not exist or has already been deleted.')
		faas.txntype = getTxnType( faas.txntype.objid )
		faas.previousfaases = em.getPreviousFaases([faasid:faas.objid])
		faas.backtaxes      = em.getBackTaxes([faasid: faas.objid]).each{ it.taxable = utilSvc.toBoolean(it.taxable, true) }
		faas.annotated      = getAnnotatedStatus(faas.objid)
		signatorySvc.loadSignatories('faas', faas)
		faas.rp = rpSvc.open(faas.rp)
		faas.rpu = rpuSvc.openRpu(faas.rpu)
		return faas 
	}

	@ProxyMethod
	public def updateFaas( faas ) {
		updateTxnTimeStamp(faas)
		signatorySvc.buildSignatories(faas, signatories)
		em.update(faas)
		saveBackTaxes(faas)
		updateRpuMasterInfo(faas)
		return faas;	
	}


	@ProxyMethod
	public def deleteFaas( faas ) {
		def currentstate = getState(faas.objid)
		if (currentstate == STATE_CURRENT)  throw new Exception('FAAS is already current.')
		if (currentstate == STATE_CANCELLED)  throw new Exception('FAAS has already been cancelled.')

		trackingSvc.delete([objid:faas.objid])
		txnRef.delete(faas.objid)
		em.getPreviousFaases([faasid:faas.objid]).each{
			em.delete(it, SCHEMA_PREVIOUSFAAS)
		}

		faas.backtaxes.each{
			em.delete(it, SCHEMA_BACKTAX)
		}

		em.delete(faas)
		signatorySvc.deleteSignatories(faas)
		wsSvc.deleteAll(faas.objid)

		if (faas.txntype.newrpu){
			rpuSvc.deleteRpu(rpuSvc.openRpu(faas.rpu))
		}
		if (faas.rpu.rputype == 'land' && faas.txntype.newrealproperty){
			rpSvc.removeEntity(rpSvc.open(faas.rp) )
		}
		return faas 
	}


	@ProxyMethod
	public void deleteFaasById( faasid ) {
		if (faasid) {
			deleteFaas(faasSvc.openFaas([objid:faasid]))
		}
	}



	@ProxyMethod
	public def getHistory( faasid ) {
		return em.getHistory([faasid:faasid])
	}


	@ProxyMethod
	public def validateSubmit( faas ) {
		return faas
	}

	@ProxyMethod
	public def submitForApproval( faas ) {
		faas.state = STATE_FORAPPROVAL
		def retval = em.submitForApproval(faas)
		if (retval == 0) 
			throw new Exception('Unable to submit. FAAS does not exist or has already been deleted.')

		wsSvc.insert(faas)
		trackingSvc.updateMessage([objid:faas.objid, msg:'FAAS is now for approval.'])
		return faas
	}


	@ProxyMethod
	public def approveFaas( faas ) {
		validateSignatories(faas)
		faas.dtapproved = faas.approver.dtsigned
		faas.state = STATE_CURRENT
		faas.prevstate = STATE_INTERIM
		updateTDNo(faas)
		def retval = em.approveFaas(faas)
		if (retval == 0) 
			throw new Exception('Unable to approve FAAS. Only FOR APPROVAL or INTERIM record can be approved.')

		if (faas.txntype.newrealproperty){
			rpSvc.approve(faas.rp)
		}
		rpuSvc.approveRpu(faas.rpu)
		wsSvc.insert(faas)
		cancelPreviousFaases(faas)
		txnRef.delete(faas.objid)
		trackingSvc.updateMessage([objid:faas.objid, msg:'FAAS has already been approved.'])
		return faas 
	}


	@ProxyMethod
	public def disapproveFaas( faas ) {
		wsSvc.delete(faas)

		def retval = updateFaasState(faas,STATE_INTERIM)
		if (retval == 0) 
			throw new Exception('Unable to disapprove FAAS. Only FOR APPROVAL record is allowed.')
		trackingSvc.updateMessage([objid:faas.objid, msg:'Document is currently reviewed.'])
		return faas 
	}


	@ProxyMethod
	public def getTxnType( objid ){
		def txntype = getTxnTypes().find{it.objid == objid}
		if (!txntype)
			throw new Exception('Invalid Txn Type ' + objid + '.')
		return txntype
	}
	

	@ProxyMethod
    public List getTxnTypes() {
		return em.getTxnTypes([:]) 
    }


    @ProxyMethod
    public def getRpuTypes(  ) {
    	return rpuSvc.getRpuTypes();	
    }


	@ProxyMethod
	public def getCurrentRy(  ) {
		return var.current_ry 	
	}


	@ProxyMethod
	public def generateUniqueTdNo(faas){
		if (faas.tdno && faas.tdno != '-') {
			return faas.tdno
		}
		else {
			return seqSvc.getNextFormattedSeries(UTDNO_KEY)
		}
	}


	@ProxyMethod
    public def generateNextTdNo( faas ) {
        //TD Formatting Options:
        // Y - revision year
        // P - province index 
        // C - city index 
        // M - municipality index 
        // D - district index 
        // B - barangay index 
        def lguindex = em.findLguIndexInfo([barangayid:faas.rp.barangay.objid])
		def seqcount = utilSvc.toInteger2( var.td_autonumber_sequence_count, 5 )
        def ry       = (faas.rpu.ry +'')[-2..-1]
        
        def values = [Y:ry, P:lguindex.provcityindex, C:lguindex.provcityindex, M:lguindex.munidistrictindex, D:lguindex.munidistrictindex, B:lguindex.barangayindex]
        def tdno   = var.td_format 
        if (!tdno) tdno = 'Y-M-B'
        values.keySet().each {
            tdno = tdno.replace( it, values[it] )
        }
        def ntdno = tdno + '-' + seqSvc.getNextFormattedSeriesA( tdno, seqcount )
        return ntdno 
    }


	@ProxyMethod
	public def getAnnotatedStatus(faasid){
		def annotations = annotationSvc.getAnnotationsByFaasId(faasid)
		return annotations.size() > 0
	}


	@ProxyMethod
	public def getState(faasid){
		def faas = em.findState([objid:faasid])
		if (!faas) throw new Exception('FAAS does not exist or has already been deleted.')
		return faas.state 
	}
    
	/*------------------------------------------------------------------------
	**
	** HELPER METHODS
	**
	------------------------------------------------------------------------*/
	def initFaas(info){
		def faas = [
			objid 		  	: utilSvc.generateId('F'),
			state 		  	: STATE_INTERIM,
			autonumber   	: utilSvc.toBoolean(var.td_autonumber, false),
			prevav		  	: 0.0,
			prevmv		  	: 0.0,
			effectivityyear : dtSvc.serverYear + 1,
			effectivityqtr  : 1,
			backtaxyrs		: 0,
			iscondo 		: info.iscondo,
			barangay		: info.barangay,
			datacapture     : false,
			txntype 		: info.txntype,
			lguid			: var.lgu_objid,
			taxpayer		: [:],
			owner 			: [:],
			administrator   : [:],
		]
		signatorySvc.init(faas, signatories)
		return faas 
	}


    void checkTxnReference(faas){
		if (faas.previousfaases && ! faas.txntype.objid.matches('SD|CS')){
			def prevfaasid = faas.previousfaases[0].prevfaasid
			txnRef.checkReference(prevfaasid)
		}
	}


	void updateNameInfo(faas){
		def len = faas.owner?.name?.length()
		if (len > 100) len = 100
		faas.name = faas.owner?.name?.substring(0,len)
	}


	void insertTxnReference(faas){
		if (faas.previousfaases &&  ! faas.txntype.objid.matches('SD|CS')){
			def prevfaasid = faas.previousfaases[0].prevfaasid
			txnRef.insert([objid:prevfaasid, refid:faas.objid, msg:'FAAS is currently referenced by TD No. ' + faas.tdno])
		}
	}


	void saveBackTaxes(faas){
		faas._backtaxes?.each{
			em.delete(it, SCHEMA_BACKTAX)
		}
		faas.backtaxes?.each{
			it.faasid = faas.objid 
			em.save(it, SCHEMA_BACKTAX)
		}
	}


	void updateRpuMasterInfo(faas){
		em.updateRpuMasterInfo(faas)
	}


	void validateSignatories(faas){
		utilSvc.required('Appraiser', faas.appraiser)
		utilSvc.required('Appraiser', faas.appraiser.name)
		utilSvc.required('Appraiser Date Signed', faas.appraiser.dtsigned)

		utilSvc.required('Approver', faas.approver)
		utilSvc.required('Approver', faas.approver.name)
		utilSvc.required('Approver Date Signed', faas.approver.dtsigned)
	}

	void cancelPreviousFaases(faas){
		em.getPreviousFaases([faasid:faas.objid]).each{
			def params = [
				objid  			: it.prevfaasid,
				cancelreason	: faas.txntype.objid,
				canceldate		: faas.approver.dtsigned,
				cancelledbytdnos: faas.tdno,
				cancelledtimestamp : dtSvc.buildCustomTimeStamp(faas.approver.dtsigned),
			]
			em.cancelFaas(params)
			if (faas.txntype.newrpu){
				em.cancelRpu([objid:it.prevrpuid])
			}
		}
	}
	

    def updateFaasState( faas, tostate){
		faas.state = tostate
		return em.updateFaasState([objid:faas.objid, state:tostate])
	}


	void updateTDNo(faas){
    	if ( (faas.tdno == null || faas.tdno == '-') && utilSvc.isTrue(faas.autonumber) ){
			faas.tdno = generateNextTdNo(faas)
		}
		faas.utdno = faas.tdno 
    }


	void validateFaasForTransaction(faas){
		if (faas.state != STATE_CURRENT)
			throw new Exception('FAAS ' + faas.tdno + ' is not current.')

		txnRef.checkReference(faas.objid)
	}


	void initNewFaasInfo(info, newfaas){
		def pdate 	= dtSvc.parseCurrentDate()

		def oldid  			 	= newfaas.objid 
		def newid 			 	= utilSvc.generateId('F')
		newfaas.objid 			= newid 
		newfaas.previousfaases  = [[faasid:newid, prevfaasid:oldid]]
		newfaas.state 			= STATE_INTERIM
		newfaas.txntype 		= getTxnType( info.txntype.objid )
		newfaas.datacapture 	= false
		newfaas.autonumber 	    = utilSvc.toBoolean(var.td_autonumber, false)
		newfaas.backtaxyrs   	= 0
		newfaas.backtaxes 		= []
		newfaas.effectivityyear = pdate.year + 1
		newfaas.effectivityqtr  = 1
		
		newfaas.prevtdno		= newfaas.tdno
		newfaas.prevpin		 	= newfaas.rpu.fullpin
		newfaas.prevowner		= newfaas.owner.name
		newfaas.prevav			= newfaas.rpu.totalav
		newfaas.prevmv			= newfaas.rpu.totalmv
		
		//clear not applicable info 
		newfaas.tdno 			= null
		newfaas.utdno 			= null
		newfaas.titletype		= null
		newfaas.titleno			= null
		newfaas.titledate		= null
		newfaas.memoranda		= null
		newfaas.lgutype 		= (newfaas.lgutype ? newfaas.lgutype : var.lgu_type)
		signatorySvc.init(newfaas, signatories)
	}

	@ProxyMethod
	public void checkDuplicateTdNo( faasid, tdno ) {
		if (tdno == null || tdno == '-') return 
		def faas = getFaasByTdNo(tdno)	
		if (faas && faas.objid != faasid)
			throw new Exception('TD No. ' + tdno + ' already exist.')
	}	


	@ProxyMethod
	public def getFaasByTdNo(tdno){
		return em.findByTdNo([tdno:tdno])
	}


	@ProxyMethod
	public def getMaximumBackTaxYearsPolicy(  ) {
		return 10;
	}


	@ProxyMethod
	public def getHistoryColumns(  ) {
        return [
            [name:"ry", caption:"RY", width:50, type:'integer', format:'0000'],
            [name:"tdno", caption:"TD No.", width:140],
            [name:"prevtdno", caption:"Previous TD No.", width:140],
            [name:"txntype.objid", caption:"Txn", width:50],
            [name:"classification.code", caption:"Class", width:50], 
            [name:"fullpin", caption:"PIN", width:200],
            [name:"owner.name", caption:"Owner Name", width:250],
            [name:"cadastrallotno", caption:"Lot No.", width:100],
            [name:"totalareasqm", caption:"Area (sqm)", width:120, type:'decimal', format:'#,##0.00'],
            [name:"totalmv", caption:"Market Value", width:100, type:'decimal', format:'#,##0.00'],
            [name:"totalav", caption:"Assessed Value", width:100, type:'decimal', format:'#,##0.00'],
            [name:"cancelreason", caption:"Cancel Reason", width:100],
            [name:"canceldate", caption:"Cancel Date", width:100],
            
        ]
	}


	void updateTxnTimeStamp(faas){
		def dt =  dtSvc.serverDate
		if (faas.approver.dtsigned) 
			dt = faas.approver.dtsigned
		faas.txntimestamp = dtSvc.buildCustomTimeStamp(dt)
	}

}


import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*

class RPTTaskService 
{
	@ActiveDB('rpttask')
	def em 

    @Service('DateService')
    def dtSvc

    @Service('RPTTrackingService')
    def trackingSvc

    @Service('RPTWorkflowService')
    def workflowSvc

    @Service(value="GroupNotificationService", connection="notification_proxy")
    def notificationSvc

    @Service(value="UserNotificationService", connection="notification_proxy")
    def userNotificationSvc

    @Service('RPTTaskService')
    def taskSvc

    @Service('RPTUtil')
    def util

    @Env
    def env 

    @ProxyMethod
    public def getSenders(objid) {
        def currtask = findCurrentTask(objid)
        return em.getSenders([objid:objid, currentaction:currtask.action]).unique()
    }


    @ProxyMethod
    public def createTask( task ) {
        //close previous task first
        closeTask([objid:task.objid])

        task.taskid = 'T' + new java.rmi.server.UID()
        task.startdate = dtSvc.serverDate 
        task.createdby = getUserInfo()
        em.create(task)
        return task 
    }

    @ProxyMethod
    public def createTaskAndNotifyGroup( task ) {
        createTask(task)
        notifyGroup(task)
    }

    @ProxyMethod
    public def createTaskAndNotifyAssignee( task ) {
        createTask(task)
        notifySender(task)
    }

    @ProxyMethod
    public def assignTask( task ) {
        task.assignedto = getUserInfo();
        em.update(task)
        return task
    }

    @ProxyMethod
    public def assignTaskToMe( params ) {
        util.required('objid', params.objid)
        util.required('action', params.action)

        def task = em.findCurrentTaskByAction(params);
        if (!task) 
            throw new Exception('Current Task does not exist or it has already been assigned to other user.')

        taskSvc.createNextUserTask(task);
    }

    @ProxyMethod
    public void closeTask( task ) {
        task.enddate = dtSvc.serverDate 
        em.closeTask(task)
    }


    @ProxyMethod
    public void disapproveTaskByObjid( objid, disapproveinfo) {
        def currtask = findCurrentTask(objid)
        def sendertask = em.findSenderTask([objid:objid])
        closeTask(currtask)

        //recreate task for creator 
        def task = [
            taskid      : 'T' + new java.rmi.server.UID(),
            objid       : currtask.objid,
            docname     : currtask.docname,
            refno       : currtask.refno,
            filetype    : currtask.filetype,
            startdate   : dtSvc.serverDate ,
            createdby   : getUserInfo(),
            assignedto  : disapproveinfo.sender,
            enddate     : null,
            workflowid  : currtask.workflowid,
            msg         : disapproveinfo.msg,
            status      : 'Document has been returned to ' + currtask.signatory + '.',
            action      : disapproveinfo.sender.action,
            signatory   : sendertask.signatory,
        ]
        em.create(task)

        notifySender(task);
    }

    void notifyGroup(task){
        try{
            //notify group
            def msg = [
                objid     : task.objid,
                senderid  : task.createdby.objid,
                sender    : task.createdby.name,
                groupid   : task.action,
                message   : task.docname + ' No. ' + task.refno + '    (' + task.action + ')',
                filetype  : task.filetype,
            ]
            notificationSvc?.addMessage(msg)
        }
        catch(e){
            println 'notifyGroup Error ===================================================='
            e.printStackTrace()
        }
    }


    void notifySender(task){
        def msg = [
            objid     : task.objid,
            senderid  : task.assignedto.objid,
            sender    : task.assignedto.name,
            recipientid : task.assignedto.objid,
            message   : task.docname + ' No. ' + task.refno + ' was sent back to you by ' + task.createdby.name + '.',
            filetype  : task.filetype+'resent',
        ]
        try{
            userNotificationSvc?.addMessage(msg)
        }
        catch(e){
            println 'notifySender Error ===================================================='
            println e.printStackTrace()
        }
    }


    @ProxyMethod
    public void closeUserNotification( objid ) {
        try{
            userNotificationSvc?.removeMessage([objid:objid])
        }
        catch(e){
            println 'closeUserNotification Error ==============================================='
            println e.printStackTrace
        }
    }

    @ProxyMethod
    public def createNextUserTask( task ) {
        closeTask(task)

        def nextwf = workflowSvc.findNextByWorkflowId([docname:task.docname, workflowid:task.workflowid, fromstate:task.action])

        task.taskid = 'T' + new java.rmi.server.UID()
        task.startdate = dtSvc.serverDate 
        task.createdby = getUserInfo()
        task.assignedto = getUserInfo()
        task.enddate = null
        task.workflowid = nextwf.workflowid
        task.status = nextwf.message 
        task.msg = (task.action?.startsWith('assign') ? task.msg : '')
        task.action = nextwf.tostate 
        task.signatory = nextwf.signatory
        em.create(task)
        trackingSvc.updateMessage(task)
        return task
    }

    
    @ProxyMethod
    public def delete( task ) {
        em.deleteTask(task)    
    }

    def getUserInfo(){
        return [
            objid : env.USERID,
            name : env.FULLNAME,
            title : env.JOBTITLE,
        ]
    }


    @ProxyMethod
    public def findCurrentTask( objid ) {
        def task = em.findCurrentTask([objid:objid])
        if (!task) throw new Exception('Current Task does not exist or it has already been assigned to other user.')
        return task
    }
}

import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceCaptureService  {

	@ActiveDB("remittance_capture")	
	def em

	@ActiveDB("remittance")
	def remittanceEm; 

	@Service("CashBookPostService")
	def cashBook;

	@ActiveDB("collector")
	def collector; 


	@Service("SequenceService")
	def seqSvc;

	String schemaName = "remittance";
	String pagingKeys = "r.objid"

	@ProxyMethod
	public def getColumns( def p ) {
		return [
			[name:"txnno", caption:"Remittance No", width:120, resizable:false],
			[name:"dtposted", caption:"Remittance Date", width:120, resizable:false],
			[name:"collector.name", caption:"Collector"],
			[name:"totalcash", caption:"Total Cash", type:"decimal"],
			[name:"totalnoncash", caption:"Total Noncash", type:"decimal"],
			[name:"amount", caption:"Amount", type:"decimal"],
			[name:"liquidated", caption:"Liquidated", type:"checkbox", checkedValue:1, uncheckedValue:0],
		];	
	}

	def getList( o ) {
		o.txnno = (o.searchtext ? o.searchtext : '') +'%'
		o._pagingKeys = "r.objid"
		return em.getList( o) 
	}



	@ProxyMethod 
	public def getCapturedCollections( def params ) {
		return em.getCapturedCollections( params).each{
			it.selected = true;
		};
	}

	@ProxyMethod 
	public def getUnremittedReceipts( def params ) { 
		return em.getUnremittedReceipts(params)
	}

	@ProxyMethod 
	public def getUnremittedChecks( def params ) {
		return em.getUnremittedChecks(params)
	}

	@ProxyMethod 
	public def post(def o ) {
		if( o.amount == 0 ) 
			throw new Exception("There is no amount to remit");

		def txncode = "REM";	
		if(env.TXNCODE) txncode = env.TXNCODE; 	
		o.txnno = txncode + seqSvc.getNextFormattedSeries(txncode);	
		remittanceEm.create( o );

		//insert the cash receipts
		for( item in o.items ) { 	
			item.remittanceid = o.objid 
			if( item.startseries ) {
				em.collectReceipts( item );
				em.collectChecks( item );
			} else 
				em.collectCashticket(item);
		} 
		
		//update cashbook to add new entry
		def m = [remittanceid: o.objid, collectorid: o.collector.objid ];
		def flist = remittanceEm.getRemittedFundTotals(m);
		flist.each {
				def detail = [:];
				detail.fundid = it.fund.objid;
				detail.subacctid = o.collector.objid; 
				detail.type = 'COLLECTOR'
				detail.refid = o.objid;
				detail.refno = o.txnno;
				detail.refdate = o.dtposted;
				detail.reftype = "remittance";
				detail.amount = it.amount;
				detail.particulars = "REMITTANCE";
				cashBook.postCR( detail );

				def n = [:]
				n.objid = "REMFUND"+new UID();
				n.remittanceid = o.objid;
				n.fund = it.fund;
				n.amount = it.amount;
				remittanceEm.create( n, "remittance_fund" );
		}
		return o;

	}

	@ProxyMethod 
	public def getCollectors( ){
		return em.getCollectors();
	}
	
}




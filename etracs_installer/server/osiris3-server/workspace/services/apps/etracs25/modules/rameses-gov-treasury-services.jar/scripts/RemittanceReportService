import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceReportService  {

	@PersistenceContext("main")
	def em; 

	@ActiveDB('remittancereport')
	def db;

	@Service("NumberService")
	def numSvc;

	@Service("DateService")
	def dtsvc;

	@Service("AFRemittanceService")
	def afremSvc

	@ProxyMethod 
	def getRCDReportData( rem  ) {
		def remittance = rem.clone()
		remittance.collectiontype = em.sqlContext.createNamedQuery('remittancereport:getRCDCollectionType').setParameter('remittanceid', remittance.objid ).resultList
		remittance.collectionsummaries = em.sqlContext.createNamedQuery('remittancereport:getRCDCollectionSummaries').setParameter('remittanceid', remittance.objid ).resultList
		remittance.remittedforms = getRemittedSerials(rem).each{
			it.qtybegin=it.qtybegin?(Integer)it.qtybegin:0
			it.qtyreceived=it.qtyreceived?(Integer)it.qtyreceived:0
			it.qtyending=(Integer)it.qtyending
			it.qtyissued=(Integer)it.qtyissued
		} 
		remittance.cancelseries = []
		remittance.hascancelseries = false 
		remittance.remittedforms.each{
			if( it.cancelled ) {
				remittance.cancelseries	<< [
					formno: it.formno, qty: it.qtycancelled, 
					series: it.cancelled 
				]
				remittance.hascancelseries = true 
			}
		}

		remittance.otherpayments = em.sqlContext.createNamedQuery('remittancereport:getRCDOtherPayment').setParameter('remittanceid', remittance.objid ).resultList
		remittance.nonserialremittances = afremSvc.getRemittedCashTickets( remittance)
		remittance.nonserialsummary = afremSvc.getRemittedCashTickets( remittance)
		remittance.amountinwords = numSvc.doubleToWords( remittance.amount).toUpperCase()
		remittance.cashbreakdown.each {
			it.qty = it.qty.toString()

		}
		return remittance 	

	}

	@ProxyMethod
	def generateReportByCollectionType( rem, collectiontype  ) {
		def data = rem.clone();
		def params = [
			remittanceid: data.objid, 
			collectiontypeid : collectiontype ? collectiontype.objid : '%'
		]

		data.receipts = em.sqlContext.createNamedQuery('remittancereport:getReceiptsByRemittanceCollectionType').setParameters(params ).resultList
		if( ! data.receipts ) throw new Exception("No record(s) found ");
		return data;
	}

	@ProxyMethod 
	def generateReportByFund( rem, fund ) {
		def data = rem.clone();
		def params = [ remittanceid: data.objid,  fundid : fund ? fund.objid : '%']
		data.receipts = em.sqlContext.createNamedQuery('remittancereport:getReceiptsByRemittanceFund').setParameters(params ).resultList
		if( ! data.receipts ) throw new Exception("No record(s) found ");
		data.acctsummaries = em.sqlContext.createNamedQuery('remittancereport:getRevenueItemSummaryByFund').setParameters(params ).resultList
		return data;
	}


	@ProxyMethod 
	def generateDetailedReportByFund(rem, fund) {
		def data = rem.clone() 
		def params = [ remittanceid: data.objid,  fundid : fund ? fund.objid : '%']
		data.serials = em.sqlContext.createNamedQuery('remittancereport:getSerialReceiptsByRemittanceFund').setParameters(params ).resultList
		data.nonserials = em.sqlContext.createNamedQuery('remittancereport:getNonSerialReceiptDetailsByFund').setParameters(params ).resultList
		return data;
	}

	@ProxyMethod 
	def generateReportByRevenueItem( rem, fund ) {
		def data = rem.clone();
		def params = [ remittanceid: data.objid,  fundid : fund ? fund.objid : '%']
		data.acctsummaries = em.sqlContext.createNamedQuery('remittancereport:getRevenueItemSummaryByFund').setParameters(params ).resultList

		data.brgyshares = []

		if( params.fundid == 'GENERAL' || params.fundid == '%')
			data.brgyshares  = em.sqlContext.createNamedQuery('remittancereport:getBrgyShares').setParameters(params ).resultList


		data.hasbrgyshares = data.brgyshares.size() > 0
		if( ! data.acctsummaries ) throw new Exception("No record(s) found ");

		data.amount = data.acctsummaries.amount.sum(); 
		return data;
	}

	@ProxyMethod 
	def generateSummaryOfCollection(rem, chart) {
		def acctlist = em.sqlContext.createNamedQuery('remittancereport:getDistinctAccount' + chart)
							.setParameter('remittanceid', rem.objid )
							.resultList 
		
		def colindex = 0
		def columnsql = ''
		def hasUnmapped = acctlist.find{ it.objid == null }
		if(  hasUnmapped ) {
			columnsql = " SUM( CASE WHEN a.objid IS NULL AND crv.objid is NULL THEN cri.amount ELSE NULL END ) AS col${colindex}, \n"
			colindex++
		}
		acctlist.each { acct ->
			if( acct.objid ) {
				columnsql += " SUM( CASE WHEN a.objid = '$acct.objid' AND crv.objid is NULL THEN cri.amount ELSE NULL END ) AS col${colindex}, \n"
				colindex++
			}
		}
		columnsql += " SUM( CASE WHEN crv.objid is NULL THEN cri.amount ELSE NULL END ) AS col${colindex}, \n"
			
		def qry = em.sqlContext.createNamedQuery('remittancereport:getSummaryOfCollection' + chart )
		
		def items = qry.setVars([columnsql:columnsql])
						.setParameter( 'remittanceid', rem.objid )
						.resultList
		
		def header = [:]
		colindex = 0
		if( hasUnmapped ) {
			header[ 'COL' + colindex ] = 'UNMAPPED'
			colindex++
		}
		acctlist.collect{ acct ->
			if( acct.objid ) {
				header[ 'COL' + colindex ] = '(' + acct.acctcode + ')\n' + acct.accttitle 
				colindex++
			}
		}
		
		header[ 'COL' + colindex ] = 'TOTAL'
		//
		//additional params
		header.REPORTTITLE = 'SUMMARY OF CASH COLLECTIONS AND DEPOSITS BY ' + chart 
		header.REMITTANCENO = rem.txnno
		header.REMITTANCEDATE = dtsvc.format('MMMMM dd, yyyy', rem.dtposted)
		header.REMITTANCEAMOUNT = rem.amount
		header.COLLECTORNAME = rem.collector.name
		header.COLLECTORTITLE = rem.collector.title
		header.LIQUIDATINGOFFICER = rem.liquidatingofficer.name
		header.LIQUIDATINGOFFICERTITLE = rem.liquidatingofficer.title
		header.DATEPOSTED =  rem.dtposted 
		header.AMTINWORDS = numSvc.doubleToWords( rem.amount )
		
		return [ header:header, items:items]
	}

	// edit after the cash ticket will be done
	@ProxyMethod
	def generateReportByCashTicket( entity ) {
		entity.cashticketsummaries = db.getCashTicketCollectionSummaries(entity)
		println entity.cashticketsummaries
		entity.amount = 0.0 
		if (entity.cashticketsummaries) {
			entity.amount = entity.cashticketsummaries.amount.sum();
		}
		if( entity.amount <= 0.0 ) throw new Exception('There are no cash ticket collections.')

		entity.amountInWords = numSvc.doubleToWords( entity.amount )
		return entity;
	}

	@ProxyMethod 
	def generateAbstractOfRPTCollection(entity) {
		def remyr = dtsvc.getYear(entity.dtposted)
		def params = [objid:entity.objid, remyear : remyr]
		def items = db.getAbstractOfRPTCollection(params)
		def advitems = db.getAbstractOfRPTCollectionAdvance(params)
		if( !items &&  !advitems) throw new Exception('No records found.')

		def header = [:]
		header.TITLE = 'ABSTRACT OF REAL PROPERTY TAX COLLECTION'
		header.PERIOD = ''
		header.REMITTANCENO = entity.txnno
		header.REMITTANCEDATE = dtsvc.format('MMMMM dd, yyyy', entity.dtposted )
		header.REMITTANCEAMOUNT = entity.amount
		header.COLLECTORNAME = entity.collector.name
		header.COLLECTORTITLE = entity.collector.title
		header.LIQUIDATINGOFFICER = entity.liquidatingofficer.name
		header.LIQUIDATINGOFFICERTITLE = entity.liquidatingofficer.title
		header.DATEPOSTED =  entity.dtposted 
		header.AMTINWORDS = numSvc.convertDouble( entity.amount )

		return  [ header:header, items:items, advitems:advitems]
	}

	
	@ProxyMethod 
	def getFundlist( remittanceid ) {
		return em.sqlContext.createNamedQuery('remittancereport:getFundlist').setParameter('remittanceid', remittanceid ).resultList
	}

	@ProxyMethod 
	def getCollectiontypelist( remittanceid ) {
		return em.sqlContext.createNamedQuery('remittancereport:getCollectionType').setParameter('remittanceid', remittanceid ).resultList
	}

	private def getRemittedSerials(remittance) {
		def list = afremSvc.getRemittedAFSerial( remittance)
		def items = []
		def groups = list.groupBy{it.formno}
		groups.each{k, v ->
		    buildRange(items, v)
		}

		items.sort{ a,b -> 
		    def sa = a.formno + a.endingstartseries
		    def sb = b.formno + b.endingstartseries    
		    return sa <=> sb
		}
		return items;
	}	

	void buildRange(items, list) {
		if (!list) 
	        return
	    
	    if (list.size() == 1){
	        items << list[0] 
	        return
	    }
	    
	    def useditems = list.findAll{
	        ! (it.endingstartseries.toString().endsWith('01') || it.endingstartseries.toString().endsWith('51'))
	    }
	    
	    useditems.each{ items << it }

	    list.removeAll(useditems)    
	    
	    def prevseries = 0
	    def qty = 0
	    def start = null
	    def end = null
	    
	    list.each{
	        if ( prevseries + 1 == it.endingstartseries || prevseries == 0){
	            if ( !start ) start = it;
	            end = it;
	            qty += 50
	        }
	        else {
	            items << createItem(start, end, qty)
	            start = it;
	            end = it;
	            qty = 50
	        }
	        prevseries = it.endingendseries
	    }
	    if (start && end && qty > 0){
	    	items << createItem(start, end, qty)
	    }
	}

	def createItem(start, end, qty) {
		return  [
        	formno: start.formno,
        	receivedstartseries: start.receivedstartseries  ? start.receivedstartseries: null ,
        	receivedendseries : start.receivedstartseries ? end.endingendseries: null ,
        	qtyreceived : start.receivedendseries ? qty : null,
        	beginstartseries: start.beginstartseries ? start.beginstartseries: null ,
        	beginendseries : start.beginstartseries ? end.endingendseries: null ,
        	qtybegin : start.beginendseries ? qty : null,
        	endingstartseries:  start.receivedstartseries ? start.receivedstartseries: start.beginstartseries ,
        	endingendseries: end.endingendseries ,
            qtyending  : qty,
        ]

	}


}
import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTCertificationLandService 
{
    @PersistenceContext('main')
    def em;

    @ActiveDB('rptcertification')
    def db 


    @Service('RPTCertificationService')
    def certSvc 


	
    @ProxyMethod
    public void validateLandWithImprovement(faasid){
    	def result = em.sqlContext.createNamedQuery('rptcertification:findImprovementCount')
    				.setParameter('faasid', faasid)
    				.singleResult

    	if (result.improvcount == 0)
    		throw new Exception("Selected Land has no existing improvements.")
    }

    @ProxyMethod
    public def validateLandWithNoImprovement( faasid ) {
    	def result = em.sqlContext.createNamedQuery('rptcertification:findImprovementCount')
    				.setParameter('faasid', faasid)
    				.singleResult

    	if (result.improvcount > 0)
    		throw new Exception("Selected Land has existing improvements.")
    }


    @ProxyMethod
	public def createLandWithNoImprovement( cert ) {
		certSvc.createCertification(cert)

		//insert faas with no improvement
		em.sqlContext.createNamedExecutor('rptcertification:insertLandWithNoImprovement')
			.setParameter('rptcertificationid', cert.objid)
			.setParameter('faasid', cert.faasid)
			.execute()

		cert.items = getLandItems(cert)
		loadFaasInfo(cert)
		return cert 
	}

    @ProxyMethod
	public def createLandWithImprovement( cert ) {
		certSvc.createCertification(cert)

		//insert improvements
		em.sqlContext.createNamedExecutor('rptcertification:insertLandImprovement')
			.setParameter('rptcertificationid', cert.objid)
			.setParameter('faasid', cert.faasid)
			.execute()
		
		cert.items = getLandItems(cert)
		loadFaasInfo(cert)
		return cert 
	}





	@ProxyMethod
	public def openCertification(objid) {
		def cert = certSvc.openCertification(objid)
		if (! cert ) 
			throw new Exception('Certification does not exist or has already been deleted.')
		cert.items = getLandItems(cert)
		loadFaasInfo(cert)
		return cert 
	}

	void loadFaasInfo(cert){
		def faas = db.findFaasById(cert) 
		if (faas) cert.putAll( faas )
	}

	def getLandItems(cert){
		return em.sqlContext.createNamedQuery('rptcertification:getLandItems')
							.setParameter('rptcertificationid', cert.objid)
							.resultList
	}
}

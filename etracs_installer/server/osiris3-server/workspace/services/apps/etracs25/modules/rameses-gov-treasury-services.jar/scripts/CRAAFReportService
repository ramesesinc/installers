import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import com.rameses.util.*


class CRAAFReportService  
{ 
	@ActiveDB('craaf_report')
	def adb 

	@Env
	def env 
 
	@Service('DateService')
	def dtSvc

	@Service('ReportParameterService')
	def reportSvc

	@ProxyMethod
	public def generateCraafData( params ) {
		/* params -> [year, month] */ 
		def data = [:]
		// data.items = adb.getCraafData([year:params.year, month:params.month.index])
		data.items = getSerialCraafData(params)
		data.items += adb.getCashTicketCraafData([year:params.year, month:params.month.index])

		if(! data.items) throw new Exception("No record(s) found.        ");

		data.items.each {
			it.qtybegin = (Integer) it.qtybegin
			it.beginstartseries = (Integer) it.beginstartseries
			it.beginendseries = (Integer) it.beginendseries
			it.qtyreceived = (Integer) it.qtyreceived
			it.receivedstartseries = (Integer) it.receivedstartseries
			it.receivedendseries = (Integer) it.receivedendseries
			it.qtyissued = (Integer) it.qtyissued
			it.issuedstartseries = (Integer) it.issuedstartseries
			it.issuedendseries = (Integer) it.issuedendseries
			it.qtyending = (Integer) it.qtyending
			it.endingstartseries = (Integer) it.endingstartseries
			it.endingendseries = (Integer) it.endingendseries
		}

		data.info = [
			PREPAREDBY 		: env.FULLNAME,
			PREPAREDBYTITLE : env.JOBTITLE,
			TREASURERNAME	: reportSvc.standardParameter.TREASURERNAME, 
			TREASURERTITLE	: reportSvc.standardParameter.TREASURERTITLE,
			PERIOD			: 'FOR THE MONTH OF ' + params.month.caption + ', ' + params.year,
		]
		return data
	}

	@ProxyMethod
	public def getFormControlList(  ) {
		return [
			[type:"integer", caption:'Year', name:'entity.year', required:true, preferredSize:'80,19', captionWidth:120],
            [type:"combo", caption:'Month', name:'entity.month', items:'months', expression:'#{item.name}', preferredSize:'80,19', captionWidth:120],
		]
	}


	def getSerialCraafData(params) {
		def list = adb.getCraafData([year:params.year, month:params.month.index])
		def data = []
		
		def afidgroups = list.findAll{it.type == 'COLLECTOR'}.groupBy{it.afid}

		afidgroups.each{k, afids ->
			afids.groupBy{it.name}.each{key, items->
				buildRange(data, items.findAll{it.beginstartseries != null})
				buildRange(data, items.findAll{it.receivedstartseries != null})
			}
		}


		data += list.findAll{it.type == 'AFO'}.each{ 
			if (it.qtyreceived == 0){
				it.qtyreceived = null
			}
		}

		data.sort{ a,b -> 
		    def sa =  a.idx + a.afid + a.beginstartseries
		    def sb =  b.idx + b.afid + b.beginstartseries    
		    return sa <=> sb
		}

		return data;
	}	

	void buildRange(data, list) {
		if (!list) 
	        return
	    
	    if (list.size() == 1){
	        data << list[0] 
	        return
	    }
	    
	    def useditems = list.findAll{
	        ! (it.endingstartseries.toString().endsWith('01') || it.endingstartseries.toString().endsWith('51'))
	    }
	    
	    useditems.each{ 
	    	if (it.receivedstartseries == null){
	    		it.qtyreceived = null
	    	}
	    	data << it 
	    }

	    list.removeAll(useditems)    
	    
	    def prevseries = 0
	    def qty = 0
	    def start = null
	    def end = null
	    
	    list.each{
	        if ( prevseries + 1 == it.endingstartseries || prevseries == 0){
	            if ( !start ) start = it;
	            end = it;
	            qty += 50
	        }
	        else {
	            data << createItem(start, end, qty)
	            start = it;
	            end = it;
	            qty = 50
	        }
	        prevseries = it.endingendseries
	    }
	    if (start && end && qty > 0){
	    	data << createItem(start, end, qty)
	    }
	}

	def createItem(start, end, qty) {
		return  [
			name 				: start.name,
			remarks 			: start.remarks,
        	afid 				: start.afid,
        	receivedstartseries	: start.receivedstartseries  ? start.receivedstartseries: null ,
        	receivedendseries 	: start.receivedstartseries ? end.endingendseries: null ,
        	qtyreceived 		: start.receivedendseries ? qty : null,
        	beginstartseries	: start.beginstartseries ? start.beginstartseries: null ,
        	beginendseries 		: start.beginstartseries ? end.endingendseries: null ,
        	qtybegin 			: start.beginendseries ? qty : null,
        	endingstartseries	: start.receivedstartseries ? start.receivedstartseries: start.beginstartseries ,
        	endingendseries		: end.endingendseries ,
            qtyending  			: qty,
        ]

	}
}

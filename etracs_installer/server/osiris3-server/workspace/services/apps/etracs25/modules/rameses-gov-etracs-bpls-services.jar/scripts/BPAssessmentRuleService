import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;

import bpls.facts.*;
import bpls.actions.*;

public class BPAssessmentRuleService  {

	@Resource("RuleService")	
	def ruleSvc;

	@ActiveDB("rule")
	def ruleDB;

	@ActiveDB("lob")
	def lob;

	@ActiveDB("revenueitem")
	def ba;

	@ActiveDB("businessvariable")
	def bv;

	@ActiveDB("businessrequirement")
	def br;

	@Service("DateService")
	def dateSvc;

	@Service("NumberService")
	def numberSvc;

	@Service("BPFactBuilder")
	def bpFacts;

	String RULESET = "bpassessment";


	def comparator = { agg, oldvalue, newvalue ->
		switch(agg) {
			case "COUNT":
				return (oldvalue + 1);

			case "SUM":
				return oldvalue + newvalue;

			case "MIN":
				if( oldvalue <= newvalue  )		
					return oldvalue;
				else
					return newvalue;
			case "MAX":
				if( oldvalue >= newvalue  )		
					return oldvalue;
				else
					return newvalue;
		}
		return 0;
	}

	def buildFacts( request ) {
		def o = request.entity;
		
		def facts = [];
		def currDate = dateSvc.serverDate;
		def dt = currDate;
		if(o.dtfiled && !(o.dtfiled instanceof java.util.Date)) {
			dt = java.sql.Date.valueOf( o.dtfiled );
		}
		facts << new EffectiveDate( dt );
		facts << new CurrentDate(currDate);

		bpFacts.buildApplication( o, facts );
		return facts;
	}

	def buildActions(def request) {
		def actions = new RuleAction();
		actions.addCommand( "ask_business_info", new AskBusinessInfo( infotype:'assessment', BV:bv, request:request ));
		actions.addCommand( "assert_business_info", new AssertBusinessInfo(request:request, BV:bv,  comparator: comparator));
		actions.addCommand( "compute_businesstax", new ComputeTaxFee( request:request, BA:ba, NA: numberSvc, type:'TAX') );
		actions.addCommand( "compute_regfee", new ComputeTaxFee( request:request, BA:ba, NA: numberSvc, type:'REGFEE') );	
		actions.addCommand( "compute_othercharge", new ComputeTaxFee( request:request, BA:ba, NA: numberSvc, type:'OTHERCHARGE') );

		actions.addCommand( "assert_taxfee", new AssertTaxFee( request:request, ruleSvc: ruleSvc));
		actions.addCommand( "update_taxfee", new UpdateTaxFee(request:request));
		actions.addCommand( "remove_taxfee", new RemoveTaxFee(request:request));
		actions.addCommand( "select_taxfee", new SelectTaxFee(request:request));
		actions.addCommand( "add_sysvar", new AddSysVar(request:request, comparator: comparator));
		actions.addCommand( "assert_sysvars", new AssertSysVars(request:request));
		actions.addCommand( "add_requirement", new AddRequirement(request:request, BR: br));
		actions.addCommand( "change_business_account", new ChangeAccount(request:request, BA:ba));
		actions.addCommand( "print_test", new PrintTest());
		return actions;
	}


	@ProxyMethod
	public def execute(def o) throws Exception {
		if(!o.lobs)
			throw new Exception("Please provide at least one line of business");

		//this is so we will not process derived infos.	
		o.infos.removeAll( o.infos.findAll{it.phase==null || it.phase > 1} );

		def request = [newinfos:[], taxfees:[], lobMap:[:], vars:[:], taxfeefacts:[], entity: o, requirements:[] ]; 
		request.facts = buildFacts(request);
		request.actions = buildActions( request );
		
		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		int phase = 0;
		for( g in grps ) { 
			request.phase = phase;
			request.vars.clear();
			request.taxfeefacts.clear();

			ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
			//if first phase and there is entry in newinfos break it.
			if(phase <= 1 && request.newinfos) break;
			phase++;
		}
		
		//sort taxfees before returning to the client. check also if there are extended taxfees
		//calculate also the totals
		def totals = [:]	
		if(request.taxfees) {
			if(o.taxfees) {
				request.taxfees.addAll(o.taxfees);
			}
			request.taxfees = request.taxfees.findAll{ it.lob?.objid!=null }.sort{ it.lob } + request.taxfees.findAll{it.lob?.objid==null};
			totals.total_tax = request.taxfees.findAll{ it.taxfeetype == 'TAX'}.sum{it.amount};
			if(!totals.total_tax) totals.total_tax = 0;
			totals.total_regfee = request.taxfees.findAll{ it.taxfeetype == 'REGFEE'}.sum{it.amount};
			if(!totals.total_regfee) totals.total_regfee = 0;
			totals.total_othercharge = request.taxfees.findAll{ it.taxfeetype == 'OTHERCHARGE'}.sum{it.amount};

			if(!totals.total_othercharge) totals.total_othercharge = 0;
			totals.total = totals.total_tax + totals.total_regfee + totals.total_othercharge;
		}		
		return [infos:request.newinfos, taxfees: request.taxfees, phase: phase, requirements:request.requirements, totals:totals];
	}
}


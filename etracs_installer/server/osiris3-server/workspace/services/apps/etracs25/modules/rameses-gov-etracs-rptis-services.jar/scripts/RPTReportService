import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportService
{
    @ActiveDB('rptreport')
    def em

    @Service('Var')
    def var 

    @Service('LGUService')
    def lguSvc 

    @Service('PropertyClassificationService')
    def pcSvc 

    @Service('ExemptionTypeService')
    def etSvc

    @Service('DateService')
    def dtSvc 

    @Service('RPTUtil')
    def util



    @ProxyMethod
    public def getApproveFaasListing(params){
    	params.lguid = (params.lguid ? params.lguid : '%')
    	params.barangayid = (params.barangayid ? params.barangayid : '%')
    	params.currenttimestamp	= util.calculateCurrentTimeStamp( params.year, params.quarter, params.month?.index )
    	println 'params -> ' + params 
		def list = em.getApproveFaasListing(params)
		if ( !list ) throw new Exception('There are no records found.')
		return list 
    }


    @ProxyMethod
    public def getMasterListing( params ) {
		params.classidfilter = ''
		if( params.classification ) {
			params.classidfilter = ' AND r.classification_objid LIKE $P{classid} '
		}
		
		params.orderbyclause = ''
		if( params.orderby ) { 
			params.orderbyclause = 'ORDER BY ' + params.orderby.fieldname
		}

		params.currentyear = dtSvc.serverYear
		params.classid = params.classification.objid 
		def list = em.getMasterListing(params)

		if( ! list ) throw new Exception('Record not found.')
		return list 
    }



    @ProxyMethod
    public def generateAssessmentRollTaxable( params ){
    	params.barangayid = params.barangay?.objid
		def list = em.getAssessmentRollTaxable(params)
		if( ! list ) throw new Exception('Records not found.')
		return list 
    }


    @ProxyMethod
    public def generateAssessmentRollExempt( params ){
    	params.barangayid = params.barangay?.objid
		def list = em.getAssessmentRollExempt(params)
		if( ! list ) throw new Exception('Records not found.')
		return list 
    }


    @ProxyMethod
	public def generateTMCR( params )  {
		params.barangayid = params.barangay?.objid
		def list = em.getTmcrList(params)
		if( ! list ) throw new Exception('Records not found.')
		return list 
	}


	@ProxyMethod
	public def generateFieldInspectionDataBuilding( params )  {
		params.barangayid = params.barangay?.objid
		def list = em.getFieldInspectionDataBuilding(params)
		if( ! list ) throw new Exception('Records not found.')
		list.each{ rpu ->
			if (rpu.rputype == 'land'){
				def classes = em.getLandSpecificClasses(rpu)
				if (classes){
					rpu.kind = classes.unique().name.join('/');
				}
			}
			else if (rpu.rputype == 'bldg'){
				def cols = em.getBldgStrucutureInspectionInfo(rpu)
				rpu.columns = cols.find{it.columns != null}?.columns
				rpu.extwalls = cols.find{it.extwalls != null}?.extwalls
				rpu.roofing = cols.find{it.roofing != null}?.roofing
			}
		}
		return list 
	}


	@ProxyMethod
	public def generateJAT( params )  {
		def list = em.getJAT([barangayid:params.barangay.objid])
		if( ! list ) throw new Exception('Records not found.')
		return list 
	}



	@ProxyMethod 
	public def generateAnnotationListing(params) {
		params.orderbyclause = ''
		if( params.orderby ) {
			params.orderbyclause = ' ORDER BY ' + params.orderby.fieldname 
		}
		
		def list = em.getAnnotationListing(params)
		if( ! list ) throw new Exception('Records not found.')
		return list 
	}


	@ProxyMethod
	public def generatePdapRpta100(params){
		def year = dtSvc.serverYear

		if (!params.month || params.month.index <= 0 ) 
			throw new Exception('Month is required.')

		def title = 'ASSESSMENT AND COLLECTION MONTHLY STATISTICAL SUMMARY'
		def period = 'FOR THE MONTH OF ' + util.getMonthName( params.month.index ) + ', ' + year 
		def periodtype = 'MONTH'  
		
		def txntimestamp = util.calculateEndingTimeStamp( year, params.month.qtr, params.month.index )
		def reportdata   = em.getRDAPRPTA100([txntimestamp:txntimestamp])
								.each{
									it.tdcount = util.toInteger(it.tdcount)
								} 
		return [
			period 		: period,
			periodtype 	: periodtype,
			title 		: title,
			reportdata  : reportdata,
		]
	}



	@ProxyMethod
	public def generateORF( params )  {
		def list = em.getORF([taxpayerid:params.taxpayer.objid])
		if( ! list ) throw new Exception('Records not found.')
		def total = 0
		list.each {
			total += it.totalav 
			it.runningtotal = total 
		}
		return list 
	}


	@ProxyMethod
	public Map generateAccomplishmentRPA(params) {
		def title 		= 'QUARTERLY ACCOMPLISHMENT REPORT ON REAL PROPERTY ASSESSMENTS'
		def period 		= 'FOR THE ' + util.getQuarterName( params.qtr ) + ' OF ' + params.year 
		def periodtype 	= 'QUARTER'

		if( params.month && params.month.index > 0 ) {
			title = 'MONTHLY ACCOMPLISHMENT REPORT ON REAL PROPERTY ASSESSMENTS'
			period = 'FOR THE MONTH OF ' + util.getMonthName( params.month.index ) + ', ' + params.year 
			periodtype = 'MONTH' 
		}
		
		params.lguid = var.lgu_objid
		params.currenttimestamp		= util.calculateCurrentTimeStamp( params.year, params.qtr, params.month?.month )
		params.endingtimestamp 		= util.calculateEndingTimeStamp( params.year, params.qtr, params.month?.month )
		
		def preceedingassessments = em.getPreceedingRPAAccomplishment(params)
		def currentassessments = em.getCurrentRPAAccomplishment(params)
		def cancelledassessments = em.getCancelledRPAAccomplishment(params)
		def endingassessments = em.getEndingRPAAccomplishment(params)
		
		def updateBrgyAccomplishment = { lgu, list ->
			def info = list.find{ it.barangayid == lgu.objid }
			if( info ) lgu.putAll( info )
		}
	
		def lguinfos = getBarangays([:]).collect { 
			[ 	objid 		: it.objid, 
				barangay	: it.name, 
				preceedingtaxablecount 	: 0.0,
				preceedingtaxableav 	: 0.0,
				preceedingexemptcount 	: 0.0,
				preceedingexemptav 		: 0.0,
				
				currenttaxablecount 	: 0.0,
				currenttaxableav 		: 0.0,
				currentexemptcount 		: 0.0,
				currentexemptav 		: 0.0,
				
				cancelledtaxablecount 	: 0.0,
				cancelledtaxableav 		: 0.0,
				cancelledexemptcount 	: 0.0,
				cancelledexemptav 		: 0.0,
				
				endingtaxablecount 		: 0.0,
				endingtaxableav 		: 0.0,
				endingexemptcount 		: 0.0,
				endingexemptav 			: 0.0,
			]
		}
		lguinfos.each { lgu ->
			updateBrgyAccomplishment( lgu, preceedingassessments )
			updateBrgyAccomplishment( lgu, currentassessments )
			updateBrgyAccomplishment( lgu, cancelledassessments )
			updateBrgyAccomplishment( lgu, endingassessments )
		}
		
		lguinfos.add([
			barangay	: 'TOTAL',
			preceedingtaxablecount	: util.sum(lguinfos, 'preceedingtaxablecount'),
			preceedingtaxableav		: util.sum(lguinfos, 'preceedingtaxableav'),
			preceedingexemptcount	: util.sum(lguinfos, 'preceedingexemptcount'),
			preceedingexemptav		: util.sum(lguinfos, 'preceedingexemptav'),
			currenttaxablecount		: util.sum(lguinfos, 'currenttaxablecount'),
			currenttaxableav		: util.sum(lguinfos, 'currenttaxableav'),
			currentexemptcount		: util.sum(lguinfos, 'currentexemptcount'),
			currentexemptav			: util.sum(lguinfos, 'currentexemptav'),
			cancelledtaxablecount	: util.sum(lguinfos, 'cancelledtaxablecount'),
			cancelledtaxableav		: util.sum(lguinfos, 'cancelledtaxableav'),
			cancelledexemptcount	: util.sum(lguinfos, 'cancelledexemptcount'),
			cancelledexemptav		: util.sum(lguinfos, 'cancelledexemptav'),
			endingtaxablecount		: util.sum(lguinfos, 'endingtaxablecount'),
			endingtaxableav			: util.sum(lguinfos, 'endingtaxableav'),
			endingexemptcount		: util.sum(lguinfos, 'endingexemptcount'),
			endingexemptav			: util.sum(lguinfos, 'endingexemptav'),
		])
		
		return [
			period 		: period,
			periodtype 	: periodtype,
			title 		: title,
			reportdata  : lguinfos,
		]
	}



	@ProxyMethod
	public Map generateComparativeAV(params) {
		def title 		= 'QUARTERLY COMPARATIVE DATA ON ASSESSED VALUE OF REAL PROPERTY'
		def period 		= 'FOR THE ' + util.getQuarterName( params.qtr ) + ' OF ' + params.year 
		def periodtype 	= 'QUARTER'
		if( params.month  && params.month.index > 0 ) {
			title = 'MONTHLY COMPARATIVE DATA ON ASSESSED VALUE OF REAL PROPERTY'
			period = 'FOR THE MONTH OF ' + util.getMonthName( params.month.index ) + ', ' + params.year 
			periodtype = 'MONTH' 
		}
		
		params.lguid = var.lgu_objid
		params.currenttimestamp		= util.calculateCurrentTimeStamp( params.year, params.qtr, params.month?.month )
		params.endingtimestamp 		= util.calculateEndingTimeStamp( params.year, params.qtr, params.month?.month )
		
		def taxablepreceedings 	= em.getPreceedingComparativeAV(params)
		def taxablecurrents 	= em.getCurrentComparativeAV(params)
		def taxablecancelleds 	= em.getCancelledComparativeAV(params)
		def taxableendings 		= em.getEndingComparativeAV(params)
		
		def exemptpreceedings 	= em.getPreceedingComparativeAVExempt(params)
		def exemptcurrents 		= em.getCurrentComparativeAVExempt(params)
		def exemptcancelleds 	= em.getCancelledComparativeAVExempt(params)
		def exemptendings 		= em.getEndingComparativeAVExempt(params)
		
		def loadSumaryInfo = { data, list ->
			def info = list.find{ it.classid == data.classid }
			if( info ) data.putAll( info )
		}
	
		int lineno = 1
		int charindex = 'a' 
		def classifications = getClassifications()
		def firstspecial = classifications.find{ it.special == 1 }
		classifications.add( classifications.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		def taxables = classifications.collect{ buildComparativeInfo(it, 'TAXABLE') }
		taxables.each { data ->
			loadSumaryInfo( data, taxablepreceedings )
			loadSumaryInfo( data, taxablecurrents )
			loadSumaryInfo( data, taxablecancelleds )
			loadSumaryInfo( data, taxableendings )
			if( data.special == 0 ) {
				data.classname = lineno + '. ' + data.classname 
				lineno += 1
			}
			else {
				data.classname = '   ' + ((char)charindex) + '. ' + data.classname 
				charindex += 1
			}
		}
		
		lineno = 1 
		def exempts  = getExemptionTypes().collect{ buildComparativeInfo(it, 'EXEMPT') }
		exempts.each { data -> 
			loadSumaryInfo( data, exemptpreceedings )
			loadSumaryInfo( data, exemptcurrents )
			loadSumaryInfo( data, exemptcancelleds )
			loadSumaryInfo( data, exemptendings )
			data.classname = lineno + '. ' + data.classname 
			lineno += 1
		}
		
		return [
			period 		: period,
			periodtype 	: periodtype,
			title 		: title,
			reportdata  : taxables + exempts ,
		]
	}


	def buildComparativeInfo( info, taxability ) {
		return [ classid	: info.objid, 
				classname	: info.name, 
				special		: info.special ,
				taxability	: taxability,
				preceedinglandav 	: 0.0,
				preceedingimpav 	: 0.0,
				preceedingtotal 	: 0.0,
				currentlandav 	: 0.0,
				currentimpav 	: 0.0,
				currenttotal 	: 0.0,
				cancelledlandav : 0.0,
				cancelledimpav 	: 0.0,
				cancelledtotal 	: 0.0,
				endinglandav 	: 0.0,
				endingimpav 	: 0.0,
				endingtotal 	: 0.0,
			]
	}


	@ProxyMethod
	public Map generateComparativeRpuCount(params) {
		def title 		= 'QUARTERLY COMPARATIVE DATA ON NUMBER OF RPUs'
		def period 		= 'FOR THE ' + util.getQuarterName( params.qtr ) + ' OF ' + params.year 
		def periodtype 	= 'QUARTER'
		if( params.month && params.month.index > 0 ) {
			title = 'MONTHLY COMPARATIVE DATA ON NUMBER OF RPUs'
			period = 'FOR THE MONTH OF ' + util.getMonthName( params.month.index ) + ', ' + params.year 
			periodtype = 'MONTH' 
		}
		
		params.lguid = var.lgu_objid
		params.currenttimestamp		= util.calculateCurrentTimeStamp( params.year, params.qtr, params.month?.month )
		params.endingtimestamp 		= util.calculateEndingTimeStamp( params.year, params.qtr, params.month?.month )
		
		def taxablepreceedings 	= em.getPreceedingComparativeRpuCount(params)
		def taxablecurrents 	= em.getNewDiscoveryComparativeRpuCount(params)
		def taxablecancelleds 	= em.getCancelledComparativeRpuCount(params)
		def taxableendings 		= em.getEndingComparativeRpuCount(params)
		def exemptpreceedings 	= em.getPreceedingComparativeRpuCountExempt(params)
		def exemptcurrents 	= em.getNewDiscoveryComparativeRpuCountExempt(params)
		def exemptcancelleds 	= em.getCancelledComparativeRpuCountExempt(params)
		def exemptendings 		= em.getEndingComparativeRpuCountExempt(params)
		
		def loadSumaryInfo = { data, list ->
			def info = list.find{ it.classid == data.classid }
			if( info ) data.putAll( info )
		}
	
		int lineno = 1
		int charindex = 'a' 
		def classifications = getClassifications()
		def firstspecial = classifications.find{ it.special == 1 }
		classifications.add( classifications.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		def taxables = classifications.collect{ buildComparativeRpuCountInfo(it, 'TAXABLE') }
		taxables.each { data ->
			loadSumaryInfo( data, taxablepreceedings )
			loadSumaryInfo( data, taxablecurrents )
			loadSumaryInfo( data, taxablecancelleds )
			loadSumaryInfo( data, taxableendings )
			if( data.special == 0 ) {
				data.classname = lineno + '. ' + data.classname 
				lineno += 1
			}
			else {
				data.classname = '   ' + ((char)charindex) + '. ' + data.classname 
				charindex += 1
			}
		}
		
		lineno = 1 
		def exempts  = getExemptionTypes().collect{ buildComparativeRpuCountInfo(it, 'EXEMPT') }
		exempts.each { data -> 
			loadSumaryInfo( data, exemptpreceedings )
			loadSumaryInfo( data, exemptcurrents )
			loadSumaryInfo( data, exemptcancelleds )
			loadSumaryInfo( data, exemptendings )
			data.classname = lineno + '. ' + data.classname 
			lineno += 1
		}
		
		return [
			period 		: period,
			periodtype 	: periodtype,
			title 		: title,
			reportdata  : taxables + exempts ,
		]
	}


	def buildComparativeRpuCountInfo( info, taxability ) {
		return [ classid	: info.objid, 
			classname	: info.name, 
			special		: info.special ,
			taxability	: taxability,
			preceedinglandcount 	: 0.0,
			preceedingimpcount 		: 0.0,
			preceedingtotal 		: 0.0,
			newdiscoverylandcount 	: 0.0,
			newdiscoveryimpcount 	: 0.0,
			newdiscoverytotal 		: 0.0,
			cancelledlandcount 		: 0.0,
			cancelledimpcount 		: 0.0,
			cancelledtotal 			: 0.0,
			endinglandcount 		: 0.0,
			endingimpcount 			: 0.0,
			endingtotal 			: 0.0,
		]
	}	


	@ProxyMethod
	public Map generateComparativeMV(params) {
		def title 		= 'QUARTERLY COMPARATIVE DATA ON MARKET VALUE OF REAL PROPERTY ASSESSMENT'
		def period 		= 'FOR THE ' + util.getQuarterName( params.qtr ) + ' OF ' + params.year 
		def periodtype 	= 'QUARTER'
		if( params.month && params.month.index > 0 ) {
			title = 'MONTHLY COMPARATIVE DATA ON MARKET VALUE OF REAL PROPERTY ASSESSMENT'
			period = 'FOR THE MONTH OF ' + util.getMonthName( params.month.index ) + ', ' + params.year 
			periodtype = 'MONTH' 
		}
		
		params.lguid = var.lgu_objid
		params.currenttimestamp		= util.calculateCurrentTimeStamp( params.year, params.qtr, params.month?.month )
		params.endingtimestamp 		= util.calculateEndingTimeStamp( params.year, params.qtr, params.month?.month )
		
		def starttaxables 	= em.getStartComparativeMV(params)
		def endtaxables		= em.getEndComparativeMV(params)
		def startexempts 	= em.getStartComparativeMVExempt(params)
		def endexempts		= em.getEndComparativeMVExempt(params)
		
		def loadMVSumaryInfo = { data, list ->
			def info = list.find{ it.classid == data.classid }
			if( info ) data.putAll( info )
		}
	
		int lineno = 1
		int charindex = 'a' 
		def classifications = getClassifications()
		def firstspecial = classifications.find{ it.special == 1 }
		classifications.add( classifications.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		def taxables = classifications.collect{ buildComparativeMVInfo(it, 'TAXABLE') }
		taxables.each { data ->
			loadMVSumaryInfo( data, starttaxables )
			loadMVSumaryInfo( data, endtaxables )
			if( data.special == 0 ) {
				data.classname = lineno + '. ' + data.classname 
				lineno += 1
			}
			else {
				data.classname = '   ' + ((char)charindex) + '. ' + data.classname 
				charindex += 1
			}
		}
		
		lineno = 1 
		def exempts  = getExemptionTypes().collect{ buildComparativeMVInfo(it, 'EXEMPT') }
		exempts.each { data -> 
			loadMVSumaryInfo( data, startexempts )
			loadMVSumaryInfo( data, endexempts )
			data.classname = lineno + '. ' + data.classname 
			lineno += 1
		}
		
		return [
			period 		: period,
			periodtype 	: periodtype,
			title 		: title,
			reportdata  : taxables + exempts ,
		]
	} 
	
	def buildComparativeMVInfo( info, taxability ) {
		return [ classid	: info.objid, 
				classname	: info.name, 
				special		: info.special ,
				taxability	: taxability,
				startlandmv : 0.0,
				startimpmv 	: 0.0,
				starttotal	: 0.0,
				endlandmv 	: 0.0,
				endimpmv 	: 0.0,
				endtotal	: 0.0,
			]
	}	



	@ProxyMethod
	public Map generateReportOnRPA( params ) {
		def title 		= 'QUARTERLY REPORT ON REAL PROPERTY ASSESSMENTS'
		def period 		= util.buildQuarterlyPeriod( params.year, params.qtr )
		def periodtype 	= 'QUARTER'
		if( params.month && params.month.index > 0 ) {
			title = 'MONTHLY REPORT ON REAL PROPERTY ASSESSMENTS'
			period = util.getMonthName( params.month.index ) + ', ' + params.year 
			periodtype = 'MONTH' 
		}
		
		params.lguid = var.lgu_objid
		params.txntimestamp	= util.calculateCurrentTimeStamp( params.year, params.qtr, params.month?.month ).replace('%','Z') 

		def taxables = em.getReportOnRPATaxable(params)
							.each{ it.rpucount = util.toInteger2( it.rpucount, 0)}
		
		int lineno = 1
		int charindex = 'a' 
		def taxableclasses = getClassifications()
		def firstspecial = taxableclasses.find{ it.special == 1 }
		taxableclasses.add( taxableclasses.indexOf( firstspecial), [objid:'SPECIAL', name:'SPECIAL', special:0] )
		
		taxableclasses.each{ item ->
			def taxable = taxables.find{ it.classid == item.objid }
			if( taxable ) {
				item.putAll( taxable )
			}
			item.taxability = 'TAXABLE' 
			if( item.special == 0 ) {
				item.classname = lineno + '. ' + item.name 
				lineno += 1
			}
			else {
				item.classname = '   ' + ((char)charindex) + '. ' + item.name 
				charindex += 1;
			}
		}
		
		def exempts  = em.getReportOnRPAExempt(params)
							.each{ it.rpucount = util.toInteger2( it.rpucount, 0)}
		
		lineno = 1 
		def exemptclasses  = getExemptionTypes();
		exemptclasses.each { item -> 
			def exempt = exempts.find{ it.classid == item.objid }
			if( exempt ) {
				item.putAll( exempt )
			}
			item.classname = lineno + '. ' + item.name 
			item.taxability = 'EXEMPT'
			lineno += 1
		}
		
		
		return [
			period 		: period,
			periodtype 	: periodtype,
			title 		: title,
			lguname     : var.lgu_name,
			lgutype     : var.lgu_type?.toUpperCase(), 
			brgycount   : getBarangays([:]).size(),
			reportdata  : taxableclasses + exemptclasses,
		]
	}



	@ProxyMethod
	public def generateTopNDelinquentProperty(entity){
		def cy = dtSvc.serverYear 
		def list = em.sqlContext.createNamedQuery('rptreport:generateTopNDelinquentProperty')
				.setParameter('topn', entity.topn * 2)
				.setParameter('cy', cy)
				.resultList 

		int rank = 0
		def prevamt = 0.0
		for(int i = 0; i < list.size(); i++){
			def item = list[i]
			if (prevamt != item.amount){
				rank++;
				prevamt = item.amount 
			}
			
			if ( rank > entity.topn)
				break;

			item.rank = rank;
			item.yrsdelinquent = cy - item.minyear + 1
		}
		return list;
	}


	@ProxyMethod
	public def generateTopNDelinquentTaxpayer(entity){
		def cy = dtSvc.serverYear 
		def list = em.sqlContext.createNamedQuery('rptreport:generateTopNDelinquentTaxpayer')
				.setParameter('topn', entity.topn * 2)
				.setParameter('cy', cy)
				.resultList 

		int rank = 0
		def prevamt = 0.0
		for(int i = 0; i < list.size(); i++){
			def item = list[i]
			if (prevamt != item.amount){
				rank++;
				prevamt = item.amount 
			}
			
			if ( rank > entity.topn)
				break;

			item.rank = rank;
			item.rpucount = util.toInteger(item.rpucount)
		}
		return list;
	}


    /*--------------------------------------------------------------------
    *
    * HELPER METHODS
    *
    *--------------------------------------------------------------------*/

    @ProxyMethod
    public def buildPeriod( params ) {
    	return util.buildPeriod(params)
    }
    @ProxyMethod
    public def getClassifications(){
    	return pcSvc.getClassifications([:])
    }

    
    @ProxyMethod
    public def getExemptionTypes(  ) {
    	return 	etSvc.getExemptionTypes([:])
    }


    @ProxyMethod
    public def getBarangays(params){
    	return lguSvc.lookupBarangays(params)	
    }


	@ProxyMethod
	public List getMonths( qtr ) {
		return util.getMonths(qtr)
	}


	void resolveSection( params ) {
		if( params.section == null || params.section == 0 ) {
			params.section = '%' 
		}
		else {
			int sectionlen =  util.toInteger2(var.pin_section_length, 3)
			params.section = (params.section+'').padLeft( sectionlen, '0' )
		}
	}
	

}

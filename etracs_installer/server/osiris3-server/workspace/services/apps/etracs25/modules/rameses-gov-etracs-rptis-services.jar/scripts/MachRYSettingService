import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*

public class MachRYSettingService
{
    @PersistenceContext('main')
    def em
     
    @Service('PropertyClassificationService')
    def pcSvc

    @Service('MachRYSettingListService')
    def listSvc 
    
    @Service('RYSettingService')
    def rysettingSvc
    
    @Service('Var')
    def var 

    @Service('RPTUtil')
    def util 
    
    def SCHEMA_RYSETTING        = 'machrysetting' 
    def SCHEMA_ASSESSLEVEL      = 'machrysetting:assesslevel' 
    def SCHEMA_ASSESSLEVELRANGE = 'machrysetting:assesslevelrange' 
    def SCHEMA_FOREX            = 'machrysetting:forex'
    
    def STATE_DRAFT     = 'DRAFT'
    def STATE_APPROVED  = 'APPROVED'

    def SETTING_TYPE    = 'mach' 
    def RESIDUAL_RATE   = 20.0
    
    
    @ProxyMethod
    public boolean settingExists() {
        def settings = listSvc.getList( null )
        return settings.size() > 0
    }
    
    @ProxyMethod
    public def create( entity ) {
        entity.state = STATE_DRAFT
        entity.residualrate = RESIDUAL_RATE
        buildAppliedToInfo(entity)
        validate( entity )
        em.create( SCHEMA_RYSETTING, entity )
        loadInitialAssessesLevels(entity)
        rysettingSvc.createLgus( SETTING_TYPE, entity )
        return entity 
    }
    

    @ProxyMethod 
    public Map open( entity ) {
        entity = em.read(SCHEMA_RYSETTING, entity)
        entity.lgus = rysettingSvc.loadLgus(SETTING_TYPE, entity.objid)
        return entity
    }

	
    @ProxyMethod
    public def update( entity ) {
        if (!entity.lgus) throw new Exception('Applied to is required.')
        buildAppliedToInfo(entity)
        validate( entity )
        em.update( SCHEMA_RYSETTING, entity)
        rysettingSvc.createLgus(SETTING_TYPE, entity )
        return entity 
    }
    
    
    @ProxyMethod
    public void delete( entity ) {
        em.sqlContext.createNamedExecutor('machrysetting:deleteRanges').setParameters(entity).execute()
        em.sqlContext.createNamedExecutor('machrysetting:deleteAssessLevels').setParameters(entity).execute()
        em.sqlContext.createNamedExecutor('machrysetting:deleteForexes').setParameters(entity).execute()
        em.sqlContext.createNamedExecutor('machrysetting:deleteRySettingLgus').setParameters(entity).execute()
		em.delete(SCHEMA_RYSETTING, entity)
    }
    

    @ProxyMethod
    public Map copy( objid, ry ) {
        def oldsettingid = objid
        def setting = em.read( SCHEMA_RYSETTING, [objid:objid] )
        if (!setting) throw new Exception('Setting does not exists or has already been deleted.')

        setting.previd = null
        setting.objid = util.generateId('MS')
        setting.ry = ry  
        setting.appliedto = null
        em.create( SCHEMA_RYSETTING, setting )

        copyAssessLevels( setting.objid, oldsettingid )
        copyMachForexes(setting.objid, oldsettingid)
        return open( setting )
    }
    

    @ProxyMethod
    public Map reviseSetting( newry, copyYear ) {
        required('Copy Year', copyYear )
        if( newry <= copyYear ) throw new Exception('New Revision Year must be greater than copy year.')
        def setting = em.sqlContext.createNamedQuery('machrysetting:getIdByRy').setParameter('ry', copyYear).singleResult
        if( !setting ) throw new Exception('Revision Year ' + copyYear  + ' setting is not defined.')
        
        //create setting 
        def oldsettingid = setting.objid 
        setting          = em.read( SCHEMA_RYSETTING, [objid:oldsettingid] )
        setting.previd   = setting.objid 
        setting.objid    = util.generateId('MS')
        setting.ry       = newry  
        checkDuplicateSetting( setting )
        em.create( SCHEMA_RYSETTING, setting )

        copyAssessLevels( setting.objid, oldsettingid )
        copyMachForexes(setting.objid, oldsettingid)
        rysettingSvc.copyLgus( SETTING_TYPE, setting.objid, oldsettingid)
        return open( setting )
    }
    

    void copyAssessLevels(newsettingid, oldsettingid){
        getAssessLevels( oldsettingid ).each{ al ->
            al.previd           = al.objid 
            al.objid            = util.generateId('AL')
            al.machrysettingid  = newsettingid
            saveAssessLevel( al )

            getRanges(al.previd).each{ range ->
                range.previd = range.objid 
                range.objid = util.generateId('RA')
                range.machassesslevelid = al.objid 
                range.machrysettingid = newsettingid
                saveRange( range )
            }
        }
    }

    void copyMachForexes(newsettingid, oldsettingid){
        getForexes( oldsettingid ).each{
            it.previd           = it.objid;
            it.objid            = util.generateId('MF')
            it.machrysettingid  = newsettingid
            saveForex( it );
        }
    }

    /*----------------------------------------------------------
    * AssessLevel Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveAssessLevel( assesslevel ) {
        assesslevel = EntityUtil.mapToField(assesslevel)
        em.validate(SCHEMA_ASSESSLEVEL, assesslevel)
        em.save(SCHEMA_ASSESSLEVEL, assesslevel)
        if (util.isTrue(assesslevel.fixrate)) {
            deleteRangeByAssessLevelId(assesslevel.objid)
        }
    }
    

    @ProxyMethod
    public void deleteAssessLevel( assesslevel ) {
        deleteRangeByAssessLevelId(assesslevel.objid)
        em.delete(SCHEMA_ASSESSLEVEL, assesslevel )
    }
    

    @ProxyMethod
    public List getAssessLevels( machrysettingid )  {
        return em.sqlContext.createNamedQuery('machrysetting:getAssessLevels')
                    .setParameter('machrysettingid', machrysettingid)
                    .resultList.each{
                        it.fixrate = util.toBoolean(it.fixrate, true)
                    }
    }
    

    @ProxyMethod
    public void deleteRangeByAssessLevelId(machassesslevelid){
        em.sqlContext.createNamedExecutor('machrysetting:deleteRangeByAssessLevelId').setParameter('machassesslevelid', machassesslevelid).execute()
    }


    /*----------------------------------------------------------
    * AssessLevelRange Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveRange( range ) {
        em.validate(SCHEMA_ASSESSLEVELRANGE, range)
        em.save(SCHEMA_ASSESSLEVELRANGE, range)
    }
    

    @ProxyMethod
    public void deleteRange( range ) {
        em.delete(SCHEMA_ASSESSLEVELRANGE, range )
    }

    @ProxyMethod
    public def getRanges( machassesslevelid  ) { 
        return em.sqlContext.createNamedQuery('machrysetting:getAssessLevelRanges')
                .setParameter('machassesslevelid', machassesslevelid)
                .resultList
    }



    /*----------------------------------------------------------
    * Forex Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveForex( forex ) {
        em.validate(SCHEMA_FOREX, forex )
        em.save(SCHEMA_FOREX, forex )
    }
    

    @ProxyMethod
    public void deleteForex( forex ) {
        em.delete(SCHEMA_FOREX, forex )
    }
    
    @ProxyMethod
    public List getForexes( machrysettingid )  {
        return  em.sqlContext.createNamedQuery('machrysetting:getForexes').setParameter('machrysettingid', machrysettingid).resultList
    }
    


    
    /*----------------------------------------------------------
    * Support Methods
    ----------------------------------------------------------*/
    
    void checkDuplicateSetting( entity ) {
        def data = em.sqlContext.createNamedQuery('machrysetting:checkDuplicateSetting').setParameters( entity ).singleResult
        if( data ) throw new Exception('Setting for year ' + entity.ry + ' already exists.')
    }

    
	void required( caption, value ) {
		def msg = caption + ' is required.' 
		if( ! value ) 
			throw new Exception( msg )
		if( value instanceof String && value.trim().length() == 0 ) 
			throw new Exception( msg )
	}


    void validate( entity ) {
        if( entity.ry <= 0 ) throw new Exception('Revision Year must be greater than zero.')
        em.validate(SCHEMA_RYSETTING, entity )
    }


    void buildAppliedToInfo(entity){
        if (! entity.lgus) {
            entity.lgus = [[rysettingid:entity.objid,lguid:var.lgu_objid, lguname:var.lgu_name, settingtype:SETTING_TYPE]]
        }
        entity.appliedto = entity.lgus.lguname.join(', ')
    }


    void loadInitialAssessesLevels(entity){
        pcSvc.getList([:]).each{
            saveAssessLevel([
                objid               : it.objid,
                machrysettingid     : entity.objid,
                classification_objid : it.objid,
                classification       : it,
                code                : it.code,
                name                : it.name, 
                fixrate             : true,
                rate                : 0.0
            ])
        }
    }
    	
}

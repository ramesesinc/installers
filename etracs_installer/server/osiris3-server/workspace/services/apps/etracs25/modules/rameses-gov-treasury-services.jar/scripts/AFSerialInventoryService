import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

class AFSerialInventoryService {

	@ActiveDB("afserial_inventory")
	def afcontrol;

	@Service("DateService")
	def dateSvc;
 
	@ActiveDB("afserial_control")
	def afserial;

	@Env
	def env;

	private def initDetail(def o) {
		def m = [:];
		m.objid = "AFDETAIL"+ new UID();
		m.refid = o.refid;
		m.refno = o.refno;
		m.reftype = o.reftype;
		m.refdate = o.refdate;
		m.txndate = dateSvc.serverDate;
		m.qtyreceived = 0;
		m.qtybegin = 0;
		m.qtyissued= 0;
		m.qtycancelled = 0;
		m.qtyending = 0;
		return m;
	}


	@ProxyMethod
	public def postReceipt(def o)	{
		def m = [:];
		m.objid = "AFCTRL"+new UID();
		m.txntype = o.txntype;
		m.afid = o.afid;
		m.startseries = o.startseries;
		m.endseries = o.endseries;
		m.startstub = o.startstub;
		m.endstub = o.endstub;
		m.unit = o.unit;
		m.prefix = o.prefix;
		m.suffix = o.suffix;
		m.currentseries = o.startseries;
		m.currentstub = o.startstub;
		m.qtyin = o.qty;
		m.qtyout = 0;
		m.qtycancelled = 0;
		m.qtybalance = o.qty;
		m.currentlineno = 1;
		m.respcenter = o.respcenter;
		m.cost  = o.cost 
		afcontrol.create( m );
		
		def detail = initDetail(o);
		detail.controlid = m.objid;
		detail.lineno = m.currentlineno;
		detail.txntype = o.txntype;
		detail.receivedstartseries= o.startseries;
		detail.receivedendseries = o.endseries;
		detail.endingstartseries = o.startseries;
		detail.endingendseries = o.endseries;
		detail.qtyreceived = o.qty;
		detail.qtyending = o.qty;
		detail.remarks = o.remarks;
		detail.cost = 0.0 
		afcontrol.create( detail, "detail" );
		return m;
	}


	@ProxyMethod
	public def postIssue(def o)	{ 
		def head = afcontrol.read( [objid: o.controlid]);
		if(head.currentseries!= o.startseries)
			throw new Exception("Data may have changed. Please run process again");

		def cqty = 0;
		if( o.cqty ) cqty = o.cqty 

		head.qtyout = (o.qty + cqty);
		head.qtybalance -= (o.qty + cqty);
		head.currentseries = o.endseries + 1;
		if(head.startstub != head.endstub ) {
			head.currentstub = o.endstub + 1;
		}
		head.currentlineno+=1;
		afcontrol.update( head );

		def detail = initDetail(o);
		detail.controlid = head.objid;
		detail.lineno = head.currentlineno;
		detail.txntype = o.txntype;
		detail.issuedstartseries = o.startseries;
		detail.issuedendseries = o.endseries;
		detail.endingstartseries = (o.endseries==head.endseries)? null : o.endseries+1; 
		detail.endingendseries = (o.endseries==head.endseries)? null : head.endseries; 
		detail.qtyissued = o.qty;
		detail.qtyending = head.qtybalance;
		detail.qtycancelled = cqty;
		detail.remarks = o.remarks;
		detail.cost =  o.cost 
		afcontrol.create( detail, "detail" );

		if( o.cancelSeriesList) {
			def cs = [
				objid: detail.objid, 
				controlid: detail.controlid 
			]
			o.cancelSeriesList.each {
				cs.series = it.series 
				afcontrol.create( cs, "detail_cancelseries" );
			}

		}

		
	}

	@ProxyMethod
	public def postSale(def o)	{
		def m = [:];
		m.objid = "AFCTRL"+new UID();
		m.txntype = o.txntype;
		m.afid = o.afid;
		m.startseries = o.startseries;
		m.endseries = o.endseries;
		m.startstub = o.startstub;
		m.endstub = o.endstub;
		m.unit = o.unit;
		m.prefix = o.prefix;
		m.suffix = o.suffix;
		m.currentseries = o.endseries + 1;
		m.currentstub = o.startstub;
		m.qtyin = 0;
		m.qtyout = o.qty;
		m.qtycancelled = 0;
		m.qtybalance = 0;
		m.currentlineno = 1; 
		m.respcenter = o.respcenter;
		m.cost  = o.cost 
		afcontrol.create( m );
		
		def detail = initDetail(o);
		detail.controlid = m.objid;
		detail.lineno = m.currentlineno;
		detail.txntype = o.txntype;
		detail.receivedstartseries= o.startseries;
		detail.receivedendseries = o.endseries;
		detail.issuedstartseries = o.startseries;
		detail.issuedendseries = o.endseries;
		detail.qtyreceived = o.qty;
		m.qtyissued= o.qty;
		detail.remarks = o.remarks; 
		detail.cost  = o.cost 
		afcontrol.create( detail, "detail" );
		return m;
	}

	@ProxyMethod
	public def postBegin(def o)	{
		def head = afcontrol.read( [objid: o.controlid]);
		head.currentlineno+=1;
		afcontrol.update( head );
		def detail = initDetail(o);
		detail.controlid = head.objid;
		detail.lineno = head.currentlineno;
		detail.txntype = o.txntype;
		detail.beginstartseries = o.startseries;
		detail.beginendseries = o.endseries;
		detail.endingstartseries = o.startseries 
		detail.endingendseries = o.endseries; 
		detail.qtybegin = o.qty;
		detail.qtyending = head.qtybalance;
		detail.remarks = o.remarks;
		afcontrol.create( detail, "detail" );
	}


	@ProxyMethod 
	public def transferAF( def o) {
		def control = afcontrol.read( o )
		def head = [
			controlid: o.objid, 
			txnmode: "TRANSFER",
			active: 0, 
			objid: o.objid, 
			currentseries:control.endseries + 1, 
			currentlineno: control.currentlineno + 1 
		]

		control.respcenter.objid = o.collector.objid
		control.respcenter.name = o.collector.name 
		control.respcenter.type = "COLLECTOR"
		control.startseries = o.currentseries 
		control.qty = control.qtybalance 
		control.remarks = "TRANSFERED FROM " + o.respcentername 
		control.refid = "TRANSFER";
		control.refno = "TRANSFER";
		control.reftype = "TRANSFER";
		control.txntype = "TRANFER";
		control.refdate = dateSvc.serverDate;
		control = postReceipt(control) 
		afserial.createControl( control )

		
		afcontrol.update( head );
		afserial.closeAFControl( head )

		def m = [:];
		m.objid = "AFDETAIL"+ new UID();
		m.refid = "TRANSFER";
		m.refno = "TRANSFER";
		m.reftype = "TRANSFER";
		m.refdate = dateSvc.serverDate;
		m.txndate = dateSvc.serverDate;
		m.qtyreceived = 0;
		m.qtybegin = 0;
		m.qtyissued=  (o.endseries - o.currentseries) + 1;
		m.qtycancelled = 0;
		m.qtyending = 0;
		m.controlid = head.objid;
		m.lineno = control.currentlineno + 1;
		m.txntype = "TRANFER";
		m.issuedstartseries = o.currentseries;
		m.issuedendseries = o.endseries;
		m.remarks = "TRANSFERRED TO " + control.respcenter.name;
		afcontrol.create( m, "detail" );
	}

}


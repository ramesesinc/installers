import com.rameses.annotations.*;
import com.rameses.common.*;
import groovy.lang.GroovyShell;
import groovy.lang.Binding;
import java.math.BigDecimal;

class RPTUtil
{
    @PersistenceContext('rpt')
    def em

    @Service('DateService')
    def dtSvc 

    @Service('NumberService')
    def numSvc

    @ProxyMethod
    public def sum( list, field  ) {
        def total = list."$field".sum()
        if (total == null) total = 0.0
        return total
    }

    @ProxyMethod
    public def generateId( prefix ){
        return prefix + (new java.rmi.server.UID())
    }

	@ProxyMethod
    public void required( caption, value ) {
        def msg = caption + ' is required.'
        if ( value == null ) throw new Exception(msg)
        if (value.toString().trim().length() == 0 ) throw new Exception(msg )
        if ( !(value instanceof Number)  && !value) throw new Exception( msg )
    }

    @ProxyMethod
    public def isEmpty( value ) {
        if (value == null ) 
            return true;
        if (value.toString().trim().length() == 0)
            return true;
        return false;
    }


    @ProxyMethod
    public boolean isTrue(value) {
    	return toBoolean(value, false) == true 
    }

    @ProxyMethod
    public boolean isFalse(value) {
        return toBoolean(value, true) == false
    }


    @ProxyMethod
    public boolean toBoolean(value, defvalue){
        if (value == null) 
            return defvalue;

        if (value instanceof Boolean) 
            return value;

        if ('1/y/yes/t/true'.indexOf(value.toString().trim()) >= 0 ) 
            return true;
        
        return false;
    }


    @ProxyMethod
    public def getListFromQuery( namedQuery , filters, params, pagingKeys ) {
        def result = []
        if (!params) params = [:]
        
        def qry = em.sqlContext.createNamedQuery( namedQuery )
        
        for (int i = 0; i< filters.size(); i++) {
            qry.setVars([filters:filters[i]])
            
            if (pagingKeys) qry.setPagingKeys(pagingKeys)
            
            if (params._start != null) qry.setFirstResult( params._start )
            if (params._limit != null) qry.setMaxResults( params._limit)
            
            result = qry.setParameters( params ).resultList

            if (result) break
        }
        return result 
    }


    @ProxyMethod
    public def buildSystemFieldBindings( info ) {
        return [
            SYS_BASE_MARKET_VALUE       : info.basemarketvalue,
            SYS_MARKET_VALUE            : info.marketvalue,
            SYS_BASE_VALUE              : (info.basevalue != null ? info.basevalue : 0.0),
            SYS_UNIT_VALUE              : (info.unitvalue != null ? info.unitvalue : 0.0),
            SYS_AREA                    : (info.area != null ? info.area : 0.0) ,
            SYS_ASSESSED_VALUE          : info.assessedvalue,
        ]
    }


    @ProxyMethod
    public def buildParamBindings( info ) {
        def binding = [:]
        info.params.each {
            def value = (it.intvalue != null ? it.intvalue : it.decimalvalue)
            binding[it.param.name] = value
        }
        return binding 
    }


    @ProxyMethod
    public def evaluateExpr( expr, bindings ) {
        return (new GroovyShell( new Binding( bindings) )).evaluate( expr )
	}


    @ProxyMethod
    public def toDecimal(value){
        if (value instanceof BigDecimal ) 
            return;
        return new BigDecimal(value.toString())
    }

    @ProxyMethod
    public def toDecimal2(value, defvalue){
        if (value == null)
            value = defvalue 
        if (value instanceof BigDecimal ) 
            return;
        return new BigDecimal(value.toString())
    }
    

    @ProxyMethod
    public def toInteger(value){
        if (value instanceof Integer)
            return value;
        def bd = new BigDecimal(value.toString())
        return bd.intValue();
    }

    @ProxyMethod
    public def toInteger2(value, defvalue){
        if (value == null)
            value = defvalue
        if (value instanceof Integer)
            return value;
        def bd = new BigDecimal(value.toString())
        return bd.intValue();
    }


    /*-------------------------------------------
    *
    * TIMESTAMP SUPPORT 
    *
    ------------------------------------------*/
    @ProxyMethod
    public List getMonths( qtr ) {
        def months = [
            [name:'JANUARY',    month:1, qtr:1 ],
            [name:'FEBRUARY',   month:2, qtr:1 ],
            [name:'MARCH',      month:3, qtr:1 ],
            
            [name:'APRIL',  month:4, qtr:2 ],
            [name:'MAY',    month:5, qtr:2 ],
            [name:'JUNE',   month:6, qtr:2 ],
            
            [name:'JULY',       month:7, qtr:3 ],
            [name:'AUGUST',     month:8, qtr:3 ],
            [name:'SEPTEMBER',  month:9, qtr:3 ],
            
            [name:'OCTOBER',    month:10, qtr:4 ],
            [name:'NOVEMBER',   month:11, qtr:4 ],
            [name:'DECEMBER',   month:12, qtr:4 ],
        ]
        
        if( ! qtr ) return months 
        return months.findAll{ it.qtr == qtr }
    }


    @ProxyMethod
    public def getMonthName( month ) {
        def months = getMonths( null )
        def mon = months.find{ it.month == month }
        if( mon ) return mon.name 
        throw new Exception("Month $month is not defined." )
    }
    

    @ProxyMethod
    public def getQuarterName( qtr ) {
        if( qtr == 1 ) return '1ST QUARTER'
        else if( qtr == 2 ) return '2ND QUARTER'
        else if( qtr == 3 ) return '3RD QUARTER'
        return '4TH QUARTER'
    }


    @ProxyMethod
    public def buildPeriod( def params ) { 
        def monthno = (params.month?.month ? params.month.month : params.month?.index)
        if( params.month && params.day ) return 'For the day of ' + getMonthName( monthno ) + ' ' + params.day + ', ' + params.year 
        if( params.month ) return 'For the Month of ' + getMonthName( monthno ) + ', ' + params.year 
        if( params.qtr ) return 'For the ' + getQuarterName( params.qtr ) + ' of ' + params.year 
        return 'For the Year ' + params.year 
    }   

    @ProxyMethod
    public def buildQuarterlyPeriod( year, qtr ) {
        def period = 'JAN - MAR, ' + year 
        if( qtr == 2 ) period = 'APR - JUN, ' + year 
        else if( qtr == 3 ) period = 'JUL - SEP, ' + year 
        else if( qtr == 4 ) period = 'OCT - DEC, ' + year 
        return period 
    }


    @ProxyMethod
    public def calculateCurrentTimeStamp(year, qtr, month ) {
        if( month && month > 0 ) {
            return resolveTimeStamp( year, qtr, month, null )
        }
        return resolveTimeStamp( year, qtr, null, null )
    }

    @ProxyMethod
    public def calculateEndingTimeStamp(year, qtr, month ) {
        if( month && month > 0 ) {
            return calculateEndingMonthTimeStamp(year, qtr, month )
        }
        else {
            return calculateEndingQtrTimeStamp( year, qtr)
        }
    }


    @ProxyMethod
    public def calculateEndingMonthTimeStamp( year, qtr, month ) {
        def imonth  = ( month + 1 > 12 ? 1 : month + 1 )
        def iqtr    = dtSvc.getQtrByMonth( imonth )
        def iyear   = (month + 1 > 12 ? year + 1 : year )
        
        return resolveTimeStamp( iyear, iqtr, imonth, 1)
    }
    

    @ProxyMethod
    public def calculateEndingQtrTimeStamp( year, qtr  ) {
        def iqtr    = ( qtr + 1 > 4 ? 1 : qtr + 1 )
        def iyear   = ( qtr + 1 > 4 ? year + 1 : year )
        
        return resolveTimeStamp( iyear, iqtr, null, null)
    }


    @ProxyMethod
    public def resolveTimeStamp( year, qtr, month, day ) {
        //build timestamp progressively based on the passed values, e.g.,
        //if month is null then timestamp is resolve upto the qtr info, such as "20111%" for 1st qtr
        //if month is notnull thne it is resolve upto the month, such as "2011102%" for 2nd qtr 
        def timestamp = year + '' + qtr 
        if( month != null ) timestamp += padLeft( month, 2 )
        if( day != null ) timestamp += padLeft( day, 2 )
        if( month == null  || day == null ) timestamp += '%'
        return timestamp
    }


    String padLeft( val, len ) {
        return "$val".padLeft( len, '0' )
    }

    @ProxyMethod
    public def formalizeNumber( num ) {
        def snum = numSvc.format('#0', num )
        if( snum == '11' ) return snum + 'TH'
        else if( snum == '12' ) return snum + 'TH'
        else if( snum.endsWith('1') ) return snum + 'ST'
        else if( snum.endsWith('2') ) return snum + 'ND'
        else if( snum.endsWith('3') ) return snum + 'RD'
        else return snum + 'TH' 
    }

    @ProxyMethod
    public def formalizeDate( date,  format ){
        def dt = new java.text.SimpleDateFormat( format ).format(dtSvc.parse('yyyy-MM-dd', date)).toString();
        
        if( 'd'.equals(format) || 'dd'.equals(format)){
            if( dt.matches('01|1|21|31') )
                return dt + 'st';
            else if( dt.matches('02|2|22') )
                return dt + 'nd';
            else if(dt.matches('03|3|23')) 
                return dt + 'rd';
            else return dt + 'th';
        }
        return dt;
    } 


}

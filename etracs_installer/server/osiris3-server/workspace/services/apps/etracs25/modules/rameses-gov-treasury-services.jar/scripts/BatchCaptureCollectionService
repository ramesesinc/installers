import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

public class BatchCaptureCollectionService  {
	
	@ActiveDB("batchcapture_collection")
	def em

	@PersistenceContext('main')
	def pem 

	@Service("DateService")
	def dtSvc

	@Service("CashReceiptService")
	def crSvc;

	@Service("CashReceiptVoidService")
	def voidSvc;

	@Env
	def env

	
	@ProxyMethod
	public def initBatchCapture(def entity){
		if( em.findBatchControlByState(entity) ) 	
			throw new Exception("There are still unposted collection for this series. ");

		entity.objid = "BCC"+new java.rmi.server.UID();
		entity.state = 'DRAFT'
		entity.org =  [objid:env.ORGID, name:env.ORGNAME]
		entity.txndate = dtSvc.serverDate
		entity.paymenttype='CASH'
		entity.totalcash = 0.0
		entity.totalnoncash = 0.0
		entity.amount = 0.0
		entity.totalamount = 0.0
		em.create(entity, "batchcapture_collection" )

		entity.batchitems = []
		return entity;
	}

	@ProxyMethod 
	public def addUpdateItem( entity, item ){
		em.deleteBatchEntryItem( item );

		if(  em.findBatchEntry( item ) ) {
			em.update(item, "entry")
		} else {
			em.create(item, "entry")
		}

		item.items.each { 
			it.objid ="BCCEI"+new java.rmi.server.UID();
			it.parentid = item.objid
			it.item.fund = it.fund;
			it.amount = it.amount ? it.amount : item.amount ;
			em.create(it, "entry_item")
		}
		
		em.update(entity, "batchcapture_collection" )
	} 

	@ProxyMethod 
	public def removeItem( item, entity ){
		em.deleteBatchEntryItem( item );
		em.delete(item, "entry"); 

		em.update(entity, "batchcapture_collection" )
	}


	@ProxyMethod
	public def submitForPosting(entity) {
		def item = entity.batchitems.find{it.amount == 0.0 && (it.voided == 0 || it.voided == false)}
		validateAmount(item)
		entity.state = 'FORPOSTING'
		em.update(entity, "batchcapture_collection" )
		return entity; 
	} 

	@ProxyMethod
	public void removeBatchCapture(def entity) {
		em.deleteBatchEntryItemByRootid(entity);
		em.deleteBatchEntry(entity);
		em.delete(entity, "batchcapture_collection"); 
	}

	@ProxyMethod
	public def disapproved(entity) {
		entity.state = 'DRAFT'
		em.updateBatchCaptureState( entity );
		return entity; 
	} 

	@ProxyMethod
	public def post(entity){
		entity.batchitems.each {bi->
			validateAmount(bi)
			bi.batchcapture = true
			bi.collector = entity.collector;
			bi.formtype = entity.formtype;
			bi.formno = entity.formno;
			bi.stub = entity.stub
			bi.controlid = entity.controlid;
			bi.txnmode = entity.txnmode;
			bi.org = entity.org;
			bi.cashchange = 0
			bi.totalcredit = 0
			bi.user = entity.capturedby
			bi.items.each { 
				it.amount = it.amount ? it.amount : bi.amount ;
				it.remarks = bi.remarks; 
			}
			crSvc.post(bi);
		}
		entity.batchitems.findAll{ it.voided == 1 }.each{
			it.collector = entity.collector;
			def info = [ receipt: it, reason: "CANCELLED" ]
			voidSvc.post( info )
		}

		entity.state = 'POSTED'
		entity.postedby_objid = env.USERID;
		entity.postedby_name = env.USER;
		entity.postedby_date = dtSvc.serverDate;
		em.post( entity )
		return entity 
	}

	@ProxyMethod
	public void submitForOnlineRemittance(entity) { 	
		entity.batchitems.each {bi->
			em.updateCashReceiptState(bi);
		}
		entity.state = 'CLOSED'
		em.updateBatchCaptureState(entity)
	}

	@ProxyMethod
	public def getColumns(def p) {
		return [
			[name:'state', caption:'State'],
            [name:'formno', caption:'AF No.'],
            [name:'collectorname', caption:'Collector'],
            [name:'startseries', caption:'Start Series'],
            [name:'endseries', caption:'endseries'],
            [name:'totalamount', caption:'Amount', type:'decimal', format:'#,##0.00' ],
            [name:'capturedbyname', caption:'Encoded By']
		];
	}

	@ProxyMethod
	public def getList(def params ) {
		params.searchtext = params.searchtext ? params.searchtext + "%" : "%"
		return em.getList(params);
	}

	@ProxyMethod 
	public def open(def params) {
		def entity = em.read(params, "batchcapture_collection" )
		if(! entity ) throw new Exception("Could not open selected item.  ")

		entity.batchitems = em.getBatchEntry(entity);
		entity.currentseries =  entity.batchitems ? entity.batchitems[-1].series+1 : entity.startseries
		entity.batchitems.each {
			it._filetype = "batchcapture:misc"
			it.items = em.getBatchEntryItems(it)
			it.items.each {
				it.item.fund = it.fund;
			}
			it.acctinfo = (it.items.size() > 1) ? '( Multiple Accounts )' : it.items[0].item.title 
			it.remarks = it.items[0].remarks;
			it.paymentitems = (it.paymentitems ? pem.serializer.read(it.paymentitems)  : [])

			it.collector = entity.collector
		}

		return entity
	}

	void validateAmount(item){
		if (item && item.amount <= 0.0 && item.voided == 0){
			throw new Exception('Amount for Receipt No. ' + item.receiptno + ' must be greater than zero.')
		}
	}

}
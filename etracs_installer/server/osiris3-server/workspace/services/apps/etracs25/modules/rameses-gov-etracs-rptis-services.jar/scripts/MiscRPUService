import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class MiscRPUService
{
    @ActiveDB('miscrpu')
    def em

    @Env
    def env
    
    @Service('RPTUtil')
    def util

    @Service('DateService')
    def dateSvc

    @Service('NumberService')
    def numberSvc
    
    @Service('LandRPUService')
    def rpuSvc

    @Service('MiscRYSettingLookupService')
    def miscSettingSvc 


    @Service('Var')
    def var

    
    def SCHEMA_ITEM    = 'item'
    def SCHEMA_PARAM   = 'param'
    

    @ProxyMethod
    public def initMiscRpu(rpu) {
        def landrpu = rpuSvc.getLandRpuByRealPropertyId(rpu.realpropertyid)
        if (!landrpu) throw new Exception('Land RPU Reference does not exists.')

        rpu.landrpuid   = landrpu.objid 
        rpu.items       = []
        return rpu 
    }

    @ProxyMethod
    public def createMiscRpu( rpu ) {
        em.create(rpu)
        saveItems(rpu.items)
        return rpu
    }


    @ProxyMethod
    public def updateMiscRpu(rpu) { 
        em.updateImmediate(rpu)
        saveItems(rpu.items)
        removeDeletedItems(rpu)
        return rpu
    }


    @ProxyMethod
    public def openMiscRpu( objid ) {
        def rpu = em.read([objid:objid])
        if (!rpu) {
            throw new Exception('Miscellaneous RPU does not exists or has been deleted.')
        }
        rpu.actualuse = miscSettingSvc.lookupAssessLevelById(rpu.actualuse.objid)
        rpu.items  = getMiscRpuItems(rpu)
        return rpu 
    }


    @ProxyMethod
    public def deleteMiscRpu(rpu){
        removeDeletedItems(rpu)
        em.deleteAllParams(rpu)
        em.deleteAllMiscRpuItems(rpu)
        em.delete(rpu)
    }

    @ProxyMethod
    public void generateNewIds( rpu ) {
        rpu.items.each{ item ->
            item.objid     = util.generateId('MI')
            item.miscrpuid = rpu.objid 
            
            item.params.each{ p ->
                p.objid = util.generateId('P')
                p.miscrpuitemid = item.objid 
                p.miscrpuid = rpu.objid 
            }
        }
    }


    @ProxyMethod
    public def getClassifications(  ) {
        return rpuSvc.getClassifications()
    }


    @ProxyMethod
    public def getExemptionTypes(){
        return rpuSvc.getExemptionTypes()
    }


    @ProxyMethod
    public def getMiscRySetting(objid){
        return miscSettingSvc.getMiscRySettingById(objid)
    }


    @ProxyMethod
    public def getMiscAssessLevels(params) {
        return miscSettingSvc.lookupAssessLevels(params)
    }




    /*-------------------------------------------------------------------
    *
    * COMPUTATION METHODS
    *
    -------------------------------------------------------------------*/
    @ProxyMethod
    public def calculateAssessment( rpu ) {
        def setting = getRPTSetting()
        rpu.items.each{item->
            calculateMiscItemAssessment(item, rpu, setting)
        }
        rpu.totalbmv    = util.sum(rpu.items, 'basemarketvalue')
        rpu.totalmv     = util.sum(rpu.items, 'marketvalue')
        rpu.totalav     = util.sum(rpu.items, 'assessedvalue')
        return rpu
    }

    @ProxyMethod
    public def calculateExpression( miscitem ) {
        def binding     = util.buildSystemFieldBindings( miscitem );
        binding        += util.buildParamBindings( miscitem );
        return numberSvc.round( util.evaluateExpr( miscitem.expr, binding ) );
    }



    void calculateMiscItemAssessment( miscitem, rpu, rysetting ) {
        validateMiscItemInfo(miscitem)
        
        miscitem.depereciatedvalue  = 0.0;
        miscitem.marketvalue        = 0.0;
        miscitem.assesslevel        = 0.0;
        miscitem.assessedvalue      = 0.0;

        miscitem.depreciatedvalue   = numberSvc.round( miscitem.basemarketvalue * miscitem.depreciation / 100.0 );
        miscitem.marketvalue        = numberSvc.round( miscitem.basemarketvalue - miscitem.depreciatedvalue );
        
        if( util.isTrue(rysetting.roundadjmarketvalue) ) {
            miscitem.marketvalue = numberSvc.roundToTen( miscitem.marketvalue )
        }
        
        miscitem.assesslevel    = calculateAssessLevel(miscitem, rpu);
        miscitem.assessedvalue  = numberSvc.roundToTen( miscitem.marketvalue * miscitem.assesslevel / 100.0 );
        zeroOutAVWhenExempt(miscitem, rpu)
    }


    def calculateAssessLevel( miscitem, rpu ) {
        if(util.isTrue(rpu.actualuse.fixrate)) {
            return rpu.actualuse.rate
        }

        def range = miscSettingSvc.lookupAssessLevelRange([miscassesslevelid:rpu.actualuse.objid, mv:miscitem.marketvalue])
        if( ! range ) throw new Exception('Market Value of P' + numberSvc.format('#,##0.00', miscitem.marketvalue) + ' has no assess level range definition.' )
        return range.rate 
    }

    void validateMiscItemInfo(miscitem) {
        util.required('Depreciation Rate', miscitem.depreciation)
        if (miscitem.depreciation < 0.0) 
            throw new Exception('Depreciation Rate must be greater than or equal to zero.')
    }


    void zeroOutAVWhenExempt(miscitem, rpu){
        if( util.toBoolean(rpu.taxable, true) == false && util.isTrue(var.rpt_zero_av_for_exempt_property) ){
            miscitem.assesslevel = 0.0
            miscitem.assessedvalue = 0.0 
        }
    }


    /*-------------------------------------------------------------------
    *
    * HELPER METHODS
    *
    -------------------------------------------------------------------*/
    
    void saveItems(items){
        items.each{ item -> 
            em.save(item, SCHEMA_ITEM)

            item.params.each{param ->
                try{
                    em.create(param, SCHEMA_PARAM)
                }
                catch(e){
                    em.updateImmediate(param, SCHEMA_PARAM)
                }
            }
        }
    }


    def getMiscRpuItems(rpu){
        def items = em.getMiscRpuItems(rpu)

        items.each{ item ->
            item.params = em.getMiscRpuItemParams([miscrpuitemid:item.objid])
        }

        return items 
    }


    void removeDeletedItems(rpu){
        rpu._params?.each{ 
            em.delete(it, SCHEMA_PARAM)
        }

        rpu._items?.each{ item -> 
            item.params.each{ param ->
                em.delete(param, SCHEMA_PARAM)
            }
            em.delete(item)
        }
    }



    //TODO:
    def getRPTSetting(){
        return [roundadjmarketvalue:0]
    }

    
}
 
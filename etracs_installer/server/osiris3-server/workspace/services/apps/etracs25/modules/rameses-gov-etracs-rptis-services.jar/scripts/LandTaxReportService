import com.rameses.annotations.*
import com.rameses.common.*;

class LandTaxReportService
{
    @PersistenceContext('rpt')
    def em
     
	@Service('DateService')
    def dateSvc
	
	@Service('NumberService')
    def numSvc

    @Service('BarangayLookupService')
    def brgySvc 
	
	@Service('Var')
	def var 

	@Service('RPTUtil')
	def util

	
	@Env
	def env
	

	@ProxyMethod
	public def generateDelinquencyReport(params){
		util.required('Barangay', params.barangay)
		return em.sqlContext.createNamedQuery('landtaxreport:generateDelinquencyReport')
				.setParameter('barangayid', params.barangay.objid)
				.setParameter('currentyear', dateSvc.serverYear)
				.resultList
	}

	@ProxyMethod
	public def generateDelinquencyReportOldFormat(params){
		util.required('Barangay', params.barangay)
		def list = em.sqlContext.createNamedQuery('landtaxreport:generateDelinquencyReportOldFormat')
				.setParameter('barangayid', params.barangay.objid)
				.setParameter('currentyear', dateSvc.serverYear)
				.resultList.each{
					it.yearsdelinquent = util.toInteger(it.yearsdelinquent)
				}
		println list
		return list 
	} 


	@ProxyMethod
	public def generateAbstractOfCollection( params ) {
		def parsedate = dateSvc.parseCurrentDate()		
		if(params.year > parsedate.year ) throw new Exception('Year must not exceed current year.')

		def reportparams = buildReportParams(params)
		
		def whereclause = ''
		whereclause += 'WHERE rr.year = $P{year}'
		whereclause += '  AND rr.qtr = $P{qtr}'
		if (reportparams.month != null)
			whereclause += '  AND rr.month = $P{month}'
		if (reportparams.day != null)
			whereclause += '  AND rr.day = $P{day}'
		if (reportparams.collectorid)
			whereclause += '  AND xr.collectorid LIKE $P{collectorid}'

		def items = []
		def advitems = []
		
		//type -> BASIC, SEF 
		if( params.accttype == null || params.accttype == 'BASIC'  ) {
			reportparams.whereclause = whereclause + ' AND ri.year <= $P{currentyr}'
			items +=  em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionBASIC')
							.setVars(reportparams)
							.setParameters( reportparams ).resultList 

			reportparams.whereclause = whereclause + ' AND ri.year > $P{currentyr}'
			advitems +=  em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionBASIC')
							.setVars(reportparams)
							.setParameters( reportparams ).resultList 
		}
		if( params.accttype == null || params.accttype == 'SEF'  ) {
			reportparams.whereclause = whereclause + ' AND ri.year <= $P{currentyr}'
			items +=  em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionSEF')
							.setVars(reportparams)
							.setParameters( reportparams ).resultList 

			reportparams.whereclause = whereclause + ' AND ri.year > $P{currentyr}'
			advitems +=  em.sqlContext.createNamedQuery('landtaxreport:getAbstractCollectionSEF')
							.setVars(reportparams)
							.setParameters( reportparams ).resultList 
		}


		if( ! items ) throw new Exception('No records found.')
		
		return [
			title 	: buildTitle( params.year, params.qtr, params.month, params.day, params.accttype, params.collector  ),
			period 	: util.buildPeriod(params),
			items  	: items.sort{a,b -> a.type + '-' + a.orno <=> b.type + '-' + b.orno }, 
			advitems : advitems.sort{a,b -> a.type + '-' + a.orno <=> b.type + '-' + b.orno }, 
		]
	}


	@ProxyMethod 
	public def generateRPTCollectionReport( params ) {
		def parsedate = dateSvc.parseCurrentDate()		
		if(params.year > parsedate.year ) throw new Exception('Year must not exceed current year.')


		if("YEARLY".equals(params.period)) {
			params.fromdate = params.year + "-01-01 00:00:00"
			params.todate   = params.year + "-12-31 23:59:59"
		} else if("QUARTERLY".equals(params.period)) {
			def fromdate = dateSvc.getBeginningQtrDate( params.qtr, params.year, 1 )
			def todate = ""
			if ( params.month != null) {
				def dt = params.year + '-' + params.month.index + '-01'
				todate   = dateSvc.getMonthEndDate(dateSvc.parse('yyyy-MM-dd', dt)) 
			} else { 
				todate  =  dateSvc.getQtrEndDate( params.qtr, params.year )
			}
			params.fromdate = dateSvc.format('yyyy-MM-dd', fromdate )  + " 00:00:00"
			params.todate =  dateSvc.format('yyyy-MM-dd', todate )  + " 23:59:59"
		} else {
			params.fromdate = params.year + '-' + params.month.index + '-01 00:00:00'
			params.todate = dateSvc.format( 'yyyy-MM-dd', dateSvc.getMonthEndDate( dateSvc.parse('yyyy-MM-dd', params.fromdate)) )  + " 23:59:59"
		}	
		
		def data = [:]
		data.items  =  em.sqlContext.createNamedQuery('landtaxreport:generateRPTCollectionReport')
				.setParameters( params )
				.resultList

		if(! data.items) throw new Exception("No record(s) found.      ")		

		data.provcitybasicshare = 0.0
		data.munibasicshare = 0.0
		data.brgybasicshare = 0.0

		data.provcitysefshare = 0.0
		data.munisefshare = 0.0
		data.brgysefshare = 0.0

		data.provcityshare = 0.0
		data.munishare = 0.0
		data.brgyshare = 0.0

		data.items.each {
			if( "city".equals( var.lgu_type.toLowerCase() ) ) {
				data.provcitybasicshare += it.lgushare
				data.brgybasicshare += it.brgyshare

				data.provcitysefshare += it.sefnet

				data.provcityshare += ( it.lgushare  + it.sefnet)
				data.brgyshare += it.brgyshare
			} else {
				data.provcitybasicshare += it.provshare
				data.munibasicshare += it.lgushare
				data.brgybasicshare += it.brgyshare 

				data.munisefshare += it.sefnet

				data.provcityshare += it.provshare
				data.munishare += (it.lgushare + it.sefnet)
				data.brgyshare += it.brgyshare 
			}

		}

		data.title = params.period + " REPORT ON REAL PROPERTY TAX COLLECTIONS"
		data.period = util.buildPeriod(params )		

		return data;


	} 


	@ProxyMethod
	public def getBarangays( params ) {
		return brgySvc.lookupBarangays(params) 
	}


	@ProxyMethod
	public List getNumDays( year, month ) {
		if ( !month && month < 0 ) return []
		
		Calendar cal = Calendar.getInstance()
        cal.set( year, month, 1)
        int maxday = cal.getActualMaximum(cal.DAY_OF_MONTH)
		def numdays = []
		1.upto( maxday ) { numdays.add( it ) }
		return numdays 
	}


	def buildReportParams(params){
		def reportparams = [
			accttype : params.accttype, 
			year : params.year,
			qtr  : params.qtr, 
			currentyr : dateSvc.serverYear,
		]

		if (params.month)
			reportparams.month = params.month.index 
		if (params.collector)
			reportparams.collectorid = params.collector.objid 
		return reportparams
	}


	def buildTitle( year, qtr, month, day, type, collector  ) {
		def stype = ( type ? type + ' ' : '' )
		def collectorname = ( collector ? ' of ' + collector.name : '' )
		if( day ) return 'Daily ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
		if( month ) return 'Monthly ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
		if( qtr ) return 'Quarterly ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
		return 'Annual ' + stype + 'Abstract of Realty Tax Collection ' + collectorname
	}

}	
import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;


class SubdivisionInterceptor
{
	@ActiveDB('subdivision')
	def em;

	@Service('RPTLedgerService')
	def ledgerSvc 

	@Service('Var')
	def var

	@Service('RPTUtil')
	def util

	@Service('RPTRequirementService')
	def reqSvc

	@Service('ExaminationService')
	def examinationSvc 



	@Before(pattern="SubdivisionService.createSubdivision") 
	public void interceptCreateSubdivision( evt ) {
		def info = evt.args[0]
		if (util.toBoolean(var.allow_subdivision_with_balance, false) == false){
			ledgerSvc.checkLedgerBalance(info.motherfaas.objid)
		}
	}


	@Before(pattern="SubdivisionService.validateSubmit", eval="#{args[0].taskaction?.equalsIgnoreCase('receive')}", index=10) 
	public void validateReceiveInfo( evt ) {
		def subdivision = evt.args[0]
		reqSvc.checkCompliance(subdivision.objid)
	}

	@Before(pattern="SubdivisionService.validateSubmit", eval="#{args[0].taskaction?.equalsIgnoreCase('forexamination')}", index=10) 
	public void validateExaminationInfo( evt ) {
		def subdivision = evt.args[0]
		def finding = examinationSvc.findFindingById(subdivision.objid)
		if (!finding)
			throw new Exception('Examination Finding is required.')
	}


	@Before(pattern="SubdivisionService.validateSubmit", eval="#{args[0].taskaction?.equalsIgnoreCase('fortaxmapping')}", index=10) 
	public void validateTaxmappingInfo( evt ) {
		def subdivision = evt.args[0]

		//check landpin count, at least 2
		def lands = em.getSubdividedLands([subdivisionid:subdivision.objid])
		if (lands.size() <= 1)
			throw new Exception('Subdivision requires at least two (2) Subdivided Lands.')


		//check all affected rpus are assigned with new PIN
		def nopinRpus = em.getAffectedRpuWithNoPin(subdivision)
		if (nopinRpus)
			throw new Exception('Affected RPU with TD No. ' + nopinRpus[0].tdno + ' is not assigned with a new PIN.');

	}


	@Before(pattern="SubdivisionService.validateSubmit", eval="#{args[0].taskaction?.equalsIgnoreCase('forappraisal')}", index=15) 
	public void validateAppraisalInfo( evt ) {
		def subdivision = evt.args[0]


		def lands = em.getSubdividedLands([subdivisionid:subdivision.objid])
		lands.each{
			if (! it.newrpuid )
				throw new Exception('Subdivided Land with New PIN ' + it.newpin + ' is not yet appraised.')
			if (it.areasqm <= 0.0)
				throw new Exception('Area for Subdivided Land with New PIN ' + it.newpin + ' must be greater than zero.')
			if (! it.memoranda)
				throw new Exception('Memoranda is required for Subdivided Land with New PIN ' + it.newpin + '.')
		}

		def rpus  = em.getAffectedRpuWithNoPin(subdivision)
		rpus.each{
			if (! it.memoranda)
				throw new Exception('Memoranda is required for Affected RPU with New PIN ' + it.newpin + '.')
		}
	}

}


import com.rameses.annotations.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import java.rmi.server.UID;


class EntityReconcileService 
{
	@PersistenceContext("main")
	def em;

	@ActiveDB('entityreconcile')
	def db;
	
	@Service('LogService')
	def logService
	
	@ProxyMethod
	public def getListForReconcile( search, entityid ){
		return db.getListForReconcile([entityname:search+'%', entityid:entityid])
	}
	
	@ProxyMethod
	public def reconcile( args ) {
		def retval = [status:'ok']
		try {
			def entity = args.entity 
			def reconciledList = args.reconciledList 
			if( ! entity ) throw new Exception('Entity is required ')
			if( ! reconciledList ) throw new Exception('At least one reconciled entity is required.')
			
			def params = [
				taxpayerid 		: entity.objid,
				taxpayername 	: entity.name,
				taxpayeraddress	: entity.address
			]
			
			reconciledList.each {
				params.reconciledid = it.objid
				db.reconcileTaxpayerId(params)
			}

			deleteReconciledEntities( entity, reconciledList )
		}
		catch( e ) {
			retval.status = 'error'
			retval.msg = e.message 
		}
		return retval
	}

	@ProxyMethod 
	public def getAffectedFaasByTaxpayerId( taxpayerid){
		return db.getFaasListByTaxpayer([taxpayerid:taxpayerid])
	}
	
	void deleteReconciledEntities( entity, reconciledList ){
		reconciledList.each{
			db.deleteEntityContact(it)
			db.deleteEntityIDCard(it)
			db.deleteEntityMember(it)
			db.deleteMultiple(it)
			db.deleteJuridical(it)
			db.deleteIndividual(it)
			db.deleteEntity(it)
		}
	}
	
}

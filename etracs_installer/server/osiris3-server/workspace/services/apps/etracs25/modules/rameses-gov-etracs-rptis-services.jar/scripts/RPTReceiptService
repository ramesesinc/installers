import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*

class RPTReceiptService
{
	@Env 
	def env 

	@ActiveDB('cashreceiptrpt')
	def em
    
    @Service('DateService')
	def dtSvc

	@Service('NumberService')
	def numSvc

	@Service('RPTUtil')
	def util
	
	@Service('Var')
	def var 

	@Service('RPTBillingService')
	def billingSvc

	def SCHEMA_RECEIPT 		= 'cashreceiptrpt'
	def SCHEMA_ITEM 		= 'cashreceiptrptitem'

	def RECEIPT_TYPE_ONLINE = 'online'
	def RECEIPT_TYPE_MANUAL = 'manual'


	@ProxyMethod
	public def open( receipt ) {
		def rct = em.read(receipt)	
		if (rct){
			receipt.putAll(rct)
		}

		def checks = []
		receipt.paymentitems.each{
		  checks << it.bank + ' - ' + it.checkno + ' / ' + dtSvc.format('MM-dd-yyyy', dtSvc.parse('yyyy-MM-dd', it.checkdate))
		}
		receipt.checkno = null
		if (checks){
			receipt.checkno = checks.join('\n')
		}
	}


	@ProxyMethod
	public def getItemsForPayment( bill ) {
		def params = billingSvc.buildParams(bill)
		def items =  em.getItemsForPayment(params).each{ it.pay = true }	
		items.removeAll(items.findAll{it.amount == 0.0})
		if (!items) throw new Exception('There are no more unpaid ledgers for this taxpayer.')
		return items 
	}

	@ProxyMethod
	public def getItemsForPaymentByBill(bill){
		def items =  em.getItemsForPaymentByBill(bill).each{ it.pay = true }	
		items.removeAll(items.findAll{it.amount == 0.0})
		if (!items) throw new Exception('There are no more unpaid ledgers for this taxpayer.')
		return items 
	}


	@ProxyMethod
	public def createReceipt( receipt ) {
		def pdate = dtSvc.parseDate(receipt.txndate, null)
		receipt.year = pdate.year
		receipt.qtr = pdate.qtr
		receipt.month = pdate.month
		receipt.day = pdate.day
		
		em.create(receipt)
		
		receipt.rptitems.each{
			def params = [
				objid			: util.generateId('RI'), 
				rptreceiptid    : receipt.objid,
				rptledgerid		: it.rptledgerid,
				fromyear		: it.fromyear,
				fromqtr 		: it.fromqtr,
				toyear			: it.toyear,
				toqtr 			: it.toqtr,
				billid 			: it.billid,
				lastbilledyear  : it.toyear,
				lastbilledqtr   : it.toqtr,
			]

			em.insertPaidOnlineItems(params)
			em.insertPaidOnlineAccounts(params)

			em.deletePaidOnlineItems(params)
			em.deletePaidOnlineAccounts(params)
			em.deleteRptBillLedgers(params)
			em.deleteRptBill(params)

			params.putAll( getPartialInfo(params) )
			em.updateLedgerYearQtrPaid(params)
			
		}
	}

	def getPartialInfo(params){
		def pitem = em.findReceiptPartialInfo(params)
		def p = [
			partialbasic : 0.0,
			partialbasicint : 0.0,
			partialbasicdisc : 0.0,
			partialsef : 0.0,
			partialsefint : 0.0,
			partialsefdisc : 0.0,
			partialledyear : null,
			partailledqtr : null,
		]
		if (pitem) {
			p.putAll(pitem)
		}
		return p
	}

	@ProxyMethod
	public def getSummarizedCashReceiptItems( receipt ) {
		def ledgerids = receipt.rptitems.collect{ "'" + it.rptledgerid + "'"}.join(',')
		def filter = "rl.objid  IN (${ledgerids})"
		def items = []
		em.getSummarizedCashReceiptItems([filter:filter]).each{
			it.objid = 'CI' + new java.rmi.server.UID()
			it.receiptid = receipt.objid
			items += it
		}
		return items.findAll{it.amount > 0.0} 
	}



	@ProxyMethod
	public void voidReceipt( receipt ) {
		def params = [
			rptreceiptid : receipt.objid,
			txndate 	 : receipt.txndate,
		]
		
		println 'txndate -> ' + receipt.txndate 

		em.getLedgersMinPaidYearAndQtr(params).each{
			def partialinfo = [
				partialbasic : 0.0,
				partialbasicint : 0.0,
				partialbasicdisc : 0.0,
				partialsef : 0.0,
				partialsefint : 0.0,
				partialsefdisc : 0.0,
			]

			def prevrct = em.findPreviousReceipt(it)
			if (prevrct ){
				def pp = em.findReceiptPartialInfo(prevrct)
				if (pp) partialinfo.putAll( pp)
			}

			it.putAll(partialinfo)
			if ( hasPartialPayment(it) ){
				it.toyear = it.minyear 
				it.toqtr = (it.qtr == 0 ? 4 : it.minqtr) 				
			}
			else { 
				it.toyear = (it.qtr <= 1 ? it.minyear - 1 : it.minyear) 
				it.toqtr = (it.qtr <= 1 ? 4 : it.minqtr - 1) 
			}
			em.resetVoidedLedgerInfo(it)
		}
	}

	def hasPartialPayment(item){
		def ledger = em.findLedgerPartialInfo(item)
		def total = item.partialbasic
		total += item.partialbasicdisc
		total += item.partialbasicint
		total += item.partialsef
		total += item.partialsefdisc
		total += item.partialsefint

		if (total == 0.0)
			return false
		return true 
	}


	@ProxyMethod
	public def getItemsForPrinting(receipt) {
		def items = em.getItemsForPrinting([rptreceiptid:receipt.objid])
		items.each{
			if (it.owner.name == receipt.paidby) {
				it.owner.name = ''
			}
		}
		return items 
	}


	@ProxyMethod
	public def getCollectionsByCount(receiptcount){
		def params = [userid:env.USERID, _limit:receiptcount, _pagingKeys:'cr.objid']
		return em.getCollectionsByCount(params)
	}


}

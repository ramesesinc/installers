import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*
import bpls.facts.*;

import org.apache.commons.beanutils.BeanUtils;


/*****************************************************************
* This is a service to build facts from the application source
******************************************************************/
public class BPApplicationFactBuilder  {

	@Resource("RuleService")	
	def ruleSvc;

	@ActiveDB("rule")
	def ruleDB;

	@ActiveDB("lob")
	def lobEm;

	@Service("NumberService")
	def numberSvc;

	/**
	* this builds the application and collects to to the facts list
	**/
	@ProxyMethod
	public def buildApplication( def app, def facts ) {
		def lobMap = [:];

		def fapp = new BPApplication();
		BeanUtils.copyProperties( fapp, app );
		facts << fapp;

		if( app.address ) {
			facts << new BusinessLocation( app.address );
		}
		app.lobs?.each {
			//we need to retrieve lob to be absolutely sure.
			def lobInfo = lobEm.findInfo( [objid: it.lobid ]);

			def LOB = new LOB();
			LOB.objid = it.lobid;
			LOB.lobid = it.lobid;
			LOB.assessmenttype = it.assessmenttype;
			LOB.name = lobInfo.name;
			LOB.classification = lobInfo.classification?.objid;
			LOB.attributes = "-" + lobEm.getAttributes( [lobid: it.lobid ] )*.name.join("-") + "-";
			facts << LOB;
			lobMap.put( it.lobid, LOB );
		}
		app.infos?.each {
			def dtype = it.attribute.datatype;
			def f = new BusinessInfo(dtype, it.value);
			f.objid = it.objid;
			f.name = it.attribute.name;
			if(it.lob) f.lob = lobMap[ it.lob.objid ];
			facts << f;
		}
		return facts;
	}






}

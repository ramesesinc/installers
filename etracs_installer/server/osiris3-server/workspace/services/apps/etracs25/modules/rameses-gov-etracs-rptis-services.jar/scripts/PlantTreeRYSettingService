import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*;

public class PlantTreeRYSettingService
{
    @PersistenceContext('main')
    def em
     
    @Service('PropertyClassificationService')
    def pcSvc

    @Service('PlantTreeRYSettingListService')
    def listSvc 

    @Service('PlantTreeService')
    def ptSvc
    
    @Service('RYSettingService')
    def rysettingSvc
    
    @Service('Var')
    def var 

    @Service('RPTUtil')
    def util 
    
    def SCHEMA_RYSETTING    = 'planttreerysetting' 
    def SCHEMA_ASSESSLEVEL  = 'planttreerysetting:assesslevel' 
    def SCHEMA_UNITVALUE    = 'planttreerysetting:planttreeunitvalue' 
    
    def STATE_DRAFT     = 'DRAFT'
    def STATE_APPROVED  = 'APPROVED'

    def SETTING_TYPE    = 'planttree' 
    
    
    @ProxyMethod
    public boolean settingExists() {
        def settings = listSvc.getList( null )
        return settings.size() > 0
    }
    

    @ProxyMethod
    public def create( entity ) {
        entity.state = STATE_DRAFT
        buildAppliedToInfo(entity)
        validate( entity )
        em.create( SCHEMA_RYSETTING, entity )
        rysettingSvc.createLgus( SETTING_TYPE, entity )
        return entity 
    }
    

    @ProxyMethod 
    public Map open( entity ) {
        entity = em.read(SCHEMA_RYSETTING, entity)
        entity.lgus = rysettingSvc.loadLgus(SETTING_TYPE, entity.objid)
        return entity
    }

    
    @ProxyMethod
    public def update( entity ) {
        if (!entity.lgus) throw new Exception('Applied to is required.')
        buildAppliedToInfo(entity)
        validate( entity )
        em.update( SCHEMA_RYSETTING, entity)
        rysettingSvc.createLgus(SETTING_TYPE, entity )
        return entity 
    }
    
    
    @ProxyMethod
    public void delete( entity ) {
        em.sqlContext.createNamedExecutor('planttreerysetting:deleteAssessLevels').setParameters(entity).execute()
        em.sqlContext.createNamedExecutor('planttreerysetting:deleteUnitValues').setParameters(entity).execute()
        em.sqlContext.createNamedExecutor('planttreerysetting:deleteRySettingLgus').setParameters(entity).execute()
        em.delete(SCHEMA_RYSETTING, entity)
    }


    @ProxyMethod
    public def approve( entity ) {
        checkApproved( entity )
        entity.state = STATE_APPROVED
        em.update(SCHEMA_LANDRYSETTING, entity)    
        return entity
    }
    

    @ProxyMethod
    public Map copy( objid, ry ) {
        //create setting 
        def oldsettingid = objid
        def setting = em.read( SCHEMA_RYSETTING, [objid:objid] )
        if (!setting) throw new Exception('Setting does not exists or has already been deleted.')

        setting.previd = oldsettingid
        setting.objid = util.generateId('PTS')
        setting.ry = ry  
        setting.appliedto = null
        em.create( SCHEMA_RYSETTING, setting )
        
        copyAssessLevels(setting.objid, oldsettingid)
        copyUnitValues(setting.objid, oldsettingid)
        return open( setting )
    }
    

    @ProxyMethod
    public Map reviseSetting( newry, copyYear ) {
        required('Copy Year', copyYear )
        if( newry <= copyYear ) throw new Exception('New Revision Year must be greater than copy year.')
        def setting = em.sqlContext.createNamedQuery('planttreerysetting:getIdByRy').setParameter('ry', copyYear).singleResult
        if( !setting ) throw new Exception('Revision Year ' + copyYear  + ' setting is not defined.')
        
        //create setting 
        def oldsettingid = setting.objid 
        setting          = em.read( SCHEMA_RYSETTING, [objid:oldsettingid] )
        setting.previd   = setting.objid 
        setting.objid    = util.generateId('PTS')
        setting.ry       = newry  
        checkDuplicateSetting( setting )
        em.create( SCHEMA_RYSETTING, setting )
        
        copyAssessLevels(setting.objid, oldsettingid)
        copyUnitValues(setting.objid, oldsettingid)
        rysettingSvc.copyLgus( SETTING_TYPE, setting.objid, oldsettingid)
        return open( setting )
    }

    
    @ProxyMethod
    public def getPlantTrees() {
        return ptSvc.getList([:])
    }
    

    /*----------------------------------------------------------
    * AssessLevel Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveAssessLevel( assesslevel ) {
        assesslevel = EntityUtil.mapToField(assesslevel)
        em.validate(SCHEMA_ASSESSLEVEL, assesslevel)
        em.save(SCHEMA_ASSESSLEVEL, assesslevel)
    }
    

    @ProxyMethod
    public void deleteAssessLevel( assesslevel ) {
        em.delete(SCHEMA_ASSESSLEVEL, assesslevel )
    }
    

    @ProxyMethod
    public List getAssessLevels( planttreerysettingid )  {
        return em.sqlContext.createNamedQuery('planttreerysetting:getAssessLevels')
                    .setParameter('planttreerysettingid', planttreerysettingid)
                    .resultList.each{
                        it.fixrate = util.toBoolean(it.fixrate, true)
                    }
    }
    


    /*----------------------------------------------------------
    * UnitValue Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveUnitValue( unitvalue ) {
        unitvalue = EntityUtil.mapToField(unitvalue)
        em.validate(SCHEMA_UNITVALUE, unitvalue )
        em.save(SCHEMA_UNITVALUE, unitvalue )
    }
    

    @ProxyMethod
    public void deleteUnitValue( unitvalue ) {
        em.delete(SCHEMA_UNITVALUE, unitvalue )
    }
    

    @ProxyMethod
    public List getUnitValues( planttreerysettingid, planttreeid )  {
        return  em.sqlContext.createNamedQuery('planttreerysetting:getUnitValues')
                            .setParameter('planttreerysettingid', planttreerysettingid)
                            .setParameter('planttree_objid', planttreeid)
                            .resultList
    }
    


    
    /*----------------------------------------------------------
    * Support Methods
    ----------------------------------------------------------*/
    
    void checkDuplicateSetting( entity ) {
        def data = em.sqlContext.createNamedQuery('planttreerysetting:checkDuplicate').setParameters( entity ).singleResult
        if( data ) throw new Exception('Setting for year ' + entity.ry + ' already exists.')
    }

    
    void required( caption, value ) {
        def msg = caption + ' is required.' 
        if( ! value ) 
            throw new Exception( msg )
        if( value instanceof String && value.trim().length() == 0 ) 
            throw new Exception( msg )
    }


    void validate( entity ) {
        if( entity.ry <= 0 ) throw new Exception('Revision Year must be greater than zero.')
        em.validate(SCHEMA_RYSETTING, entity )
    }


    void buildAppliedToInfo(entity){
        if (! entity.lgus) {
            entity.lgus = [[rysettingid:entity.objid,lguid:var.lgu_objid, lguname:var.lgu_name, settingtype:SETTING_TYPE]]
        }
        entity.appliedto = entity.lgus.lguname.join(', ')
    }      

      
    void checkApproved( entity ){
        def old = open(entity)
        if (old.state == STATE_APPROVED)
        throw new Exception('Setting has already been approved.')
    }


    void copyAssessLevels(newsettingid, oldsettingid){
        getAssessLevels( oldsettingid ).each{
            it.previd  = it.objid 
            it.objid   = util.generateId('AL')
            it.planttreerysettingid  = newsettingid
            saveAssessLevel( it )
        }
    }

    void copyUnitValues(newsettingid, oldsettingid){
        getPlantTrees().each{pt ->
            getUnitValues( oldsettingid, pt.objid ).each{ uv ->
                uv.previd   = uv.objid;
                uv.objid    = util.generateId('UV')
                uv.planttreerysettingid  = newsettingid
                saveUnitValue( uv );
            }
        }
    }
}

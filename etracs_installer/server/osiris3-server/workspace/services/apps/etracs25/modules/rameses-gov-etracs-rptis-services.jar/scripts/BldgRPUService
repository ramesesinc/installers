import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class BldgRPUService
{
	@ActiveDB('bldgrpu')
	def em
    
    @Service('NumberService')
	def numberSvc
    
    @Service('LandRPUService')
	def rpuSvc

	@Service('BldgRYSettingLookupService')
	def bldgSettingSvc 

	@Service('StructureService')
	def structSvc
	
	@Service('Var')
	def var 

	@Service('RPTUtil')
	def util

	@Service('DateService')
	def dateSvc
	
	
	@Env
	def env
    
	def SCHEMA_STRUCTURE	= 'structure'
	def SCHEMA_BLDGUSE		= 'bldguse'
	def SCHEMA_FLOOR		= 'floor'
	def SCHEMA_ADDITIONAL	= 'additional'
	def SCHEMA_PARAM		= 'param'


	@ProxyMethod
	public def initBldgRpu(rpu) {
		def landrpu = rpuSvc.getLandRpuByRealPropertyId(rpu.realpropertyid)
		if (!landrpu) throw new Exception('Land RPU Reference does not exists.')

		rpu.landrpuid 			= landrpu.objid 
		rpu.totalarea 			= 0.0
		rpu.floorcount 			= 1
		rpu.basevalue 			= 0.0
		rpu.depreciation 		= 0.0
		rpu.depreciationvalue	= 0.0
		rpu.totaladjustment 	= 0.0
		rpu.firstfloorbasevalue = 0.0
		rpu.bldgage 			= 0
		rpu.swornstatement 		= false
		rpu.swornamount 		= 0.0
		rpu.useswornamount 		= false
		rpu.percentcompleted 	= 100
		rpu.assesslevel 		= 0.0
		rpu.condominium 		= false 
		rpu.structures 			= loadStructures(rpu)
		rpu.bldguses  			= []
	}

	@ProxyMethod
	public def createBldgRpu( rpu ) {
		validateInfo(rpu)
		em.create(rpu)
		saveStructures(rpu.structures)
		saveBldgUses(rpu.bldguses)
		return rpu
	}


	@ProxyMethod
	public def updateBldgRpu(rpu) { 
		validateInfo(rpu)
		em.updateImmediate(rpu)
		saveStructures(rpu.structures)
		saveBldgUses(rpu.bldguses)
		removeDeletedItems(rpu)
		return rpu
	}


	@ProxyMethod
	public def openBldgRpu( objid ) {
		def rpu = em.read([objid:objid])
		if (!rpu) {
			throw new Exception('Building RPU does not exists or has been deleted.')
		}
		rpu.bldgtype 		= bldgSettingSvc.lookupBldgTypeById(rpu.bldgtype.objid)
		rpu.bldgkindbucc	= bldgSettingSvc.lookupBldgKindBuccById(rpu.bldgkindbucc.objid)
		rpu.bldgassesslevel = bldgSettingSvc.lookupBldgAssessLevelById(rpu.bldgassesslevel?.objid)
		rpu.condominium		= util.toBoolean(rpu.condominium, false)
		rpu.structures 		= getStructures(rpu)
		rpu.bldguses 		= getBldgUses(rpu)
		return rpu 
	}


	@ProxyMethod
	public def deleteBldgRpu(rpu){
		em.deleteAllParams(rpu)
		em.deleteAllFloorAdditionals(rpu)
		em.deleteAllFloors(rpu)
		em.deleteAllUses(rpu)
		em.deleteAllStructures(rpu)
		em.delete(rpu)
	}


	@ProxyMethod
	public void generateNewIds( rpu ) {
		rpu.structures.each{bs -> 
			bs.objid = util.generateId('BS') 
			bs.bldgrpuid = rpu.objid 
		}
		
		rpu.bldguses.each{ bu ->
			bu.objid     = util.generateId('BU')
			bu.bldgrpuid = rpu.objid 
			
			bu.floors.each{f ->
				f.objid     = util.generateId('FL')
				f.bldguseid = bu.objid 
				f.bldgrpuid = rpu.objid 

				f.additionals.each{a ->
					a.objid = util.generateId('AI')
					a.bldgfloorid = f.objid
					a.bldgrpuid = rpu.objid 

					f.params.each{ p ->
						p.objid = util.generateId('P')
						p.bldgflooradditionalid = a.objid 
						p.bldgrpuid = rpu.objid 
					}
				}
			}
		}
	}

    @ProxyMethod
    public def getClassifications(  ) {
    	return rpuSvc.getClassifications()
    }


    @ProxyMethod
    public def getExemptionTypes(){
        return rpuSvc.getExemptionTypes()
    }


    @ProxyMethod
	public def getBldgRySetting(objid){
		return bldgSettingSvc.lookupBldgRySettingById(objid)
	}


	void validateInfo(rpu){
		if (rpu.floorcount == null || rpu.floorcount == 0)
			throw new Exception('Please enter floor count information.')
	}

	
	/*-------------------------------------------------------------------
	*
	* COMPUTATION METHODS
	*
	-------------------------------------------------------------------*/

	@ProxyMethod
	public def calculateAssessment( rpu ) {
		util.required('Building Type', rpu.bldgtype)
		util.required('Kind of Building', rpu.bldgkindbucc)

		rpu._setting = getBldgRySetting(rpu.bldgtype.bldgrysettingid)

		rpu.bldgage = calculateBldgAge(rpu)

		rpu.bldguses.each{ bu ->
			calculateBldgUseAssessment(bu, rpu)
		}

		if (util.toBoolean(rpu.hasswornamount, false) == false ) {
			rpu.useswornamount = false 
			rpu.swornamount = 0.0
		}

		if (util.isTrue(rpu.useswornamount)) {
			rpu.totalbmv = rpu.swornamount
			rpu.depreciationvalue = numberSvc.round( rpu.totalbmv * rpu.depreciation / 100.0 )
			rpu.totalmv = rpu.totalbmv - rpu.depreciationvalue
			calculatePredominantAssessment( rpu )
		}
		else {
			rpu.totalareasqm 	= util.sum(rpu.bldguses, 'area')
			rpu.totalareaha 	= util.sum(rpu.bldguses, 'area') / 10000.0
			rpu.totalbmv 		= util.sum(rpu.bldguses, 'basemarketvalue')
			rpu.depreciationvalue = util.sum(rpu.bldguses, 'depreciationvalue')
			rpu.totalmv 		= util.sum(rpu.bldguses, 'marketvalue')

			if( util.isTrue(rpu._setting.predominant) ) {
				calculatePredominantAssessment( rpu )
			}
			else {
				calculateSplitAssessment( rpu )
			}
		}

		zeroOutAVWhenExempt(rpu)

		return rpu
	}

	@ProxyMethod
	public def calculateAdditionalItemAmount(selectedItem){
		def binding     = util.buildSystemFieldBindings( selectedItem );
        binding        += util.buildParamBindings( selectedItem );
        return numberSvc.round( util.evaluateExpr( selectedItem.expr, binding ) );
	}

	void zeroOutAVWhenExempt(rpu){
		if( util.toBoolean(rpu.taxable, true) == false && util.isTrue(var.rpt_zero_av_for_exempt_property) ){
			rpu.assesslevel = 0.0
			rpu.bldguses.each { bu ->
	            bu.assesslevel      = 0.0
	            bu.assessedvalue    = 0.0
	        }
			rpu.totalav = 0.0
		}
	}

	void calculateSplitAssessment( rpu ) {
        util.required('Classification', rpu.classification)
        rpu.bldguses.each { bu ->
        	def al = bldgSettingSvc.lookupBldgAssessLevelById(bu.actualuse.objid)
            bu.assesslevel      = calculateAssessLevel(bu.marketvalue, al)
            
            if (util.toBoolean(var.rpt_round_to_ten_item_assessed_value, true) == true)
				bu.assessedvalue = numberSvc.roundToTen( bu.marketvalue * bu.assesslevel / 100 )
			else 
				bu.assessedvalue = numberSvc.round( bu.marketvalue * bu.assesslevel / 100 )
				

        }

        rpu.totalav = rpu.bldguses.assessedvalue.sum()
        if (util.toBoolean(var.rpt_round_to_ten_item_assessed_value, true) == false){
        	rpu.totalav = numberSvc.roundToTen( rpu.totalav )
        }
        
    }

	void calculatePredominantAssessment( rpu ) {
        util.required('Classification', rpu.classification)
        rpu.bldgassesslevel = bldgSettingSvc.lookupBldgAssessLevel([bldgrysettingid:rpu.bldgtype.bldgrysettingid, classificationid:rpu.classification.objid])
		if (!rpu.bldgassesslevel) throw new Exception('Assessment Level for ' + rpu.classification.code + ' is not defined in Building Assessment Level Revision Setting.')

        rpu.assesslevel	= calculateAssessLevel(rpu.totalmv, rpu.bldgassesslevel)
        rpu.totalav     = numberSvc.roundToTen( rpu.totalmv * rpu.assesslevel / 100 )
    }

    def calculateAssessLevel( mv, assesslevel ) {
        if( assesslevel.fixrate ) {
            return assesslevel.rate 
        }
        def range = bldgSettingSvc.lookupAssessLevelFromRange(assesslevel.objid, mv)
        if( range ) {
            return  range.rate 
        }
        return 0.0
    }




	void calculateBldgUseAssessment(bu, rpu){
		bu.basevalue 			= rpu.basevalue
		bu.area 				= 0.0
		bu.basemarketvalue 		= 0.0
		bu.depreciationvalue 	= 0.0
		bu.adjustment 			= 0.0
		bu.marketvalue 			= 0.0
		bu.assesslevel 			= 0.0
		bu.assessedvalue 		= 0.0

		bu.floors.each{ floor ->
			calculateFloorAssessment(bu, rpu, floor)
		}

		bu.area 			= util.sum(bu.floors, 'area')
		bu.basemarketvalue 	= util.sum(bu.floors, 'basemarketvalue')
		bu.adjustment 		= util.sum(bu.floors, 'adjustment')
		bu.marketvalue 		= util.sum(bu.floors, 'marketvalue')
		calculateDepreciation(rpu, bu)
		bu.marketvalue 		-= bu.depreciationvalue
	}

	void calculateDepreciation(rpu, bu){
		if( util.isTrue( rpu._setting.computedepreciationbasedonschedule ))  {
            rpu.depreciation = calculateBldgDepreciationFromSked( rpu, bu )
        }

        if( util.isTrue(rpu._setting.straightdepreciation )) {
			calculateStraightDepreciation( rpu, bu)
		}
		else {
			calculateStaggeredDepreciation( rpu, bu)
		}
	}

	void calculateFloorAssessment(bu, rpu, floor){
		floor.basevalue 		= rpu.basevalue 
		floor.unitvalue 		= floor.basevalue 	
		floor.basemarketvalue 	= numberSvc.round(floor.area * floor.unitvalue)
		floor.marketvalue 		= floor.basemarketvalue + floor.adjustment
	}

	void calculateStraightDepreciation( rpu, bu) {
		def valuefordepreciation 	= bu.basemarketvalue
		if( util.toBoolean(rpu._setting.depreciatecoreanditemseparately, false) == false  ) {
			valuefordepreciation = bu.basemarketvalue + bu.adjustment
		}
		bu.depreciationvalue = numberSvc.round( valuefordepreciation * rpu.depreciation / 100.0  )
	}

	void calculateStaggeredDepreciation( rpu, bu ) {
		def valuefordepreciation = bu.basemarketvalue
		if( util.toBoolean(rpu._setting.depreciatecoreanditemseparately, false) == false ) {
			valuefordepreciation = bu.basemarketvalue + bu.adjustment
		}
		
		util.required('Appraisal Date', rpu.dtappraised)
		util.required('Date Completed', rpu.dtcompleted)
		util.required('Date Occupied', rpu.dtoccupied)
		
		def dtappraised = dateSvc.parse( 'yyyy-MM-dd', rpu.dtappraised )
        def dtcompleted = dateSvc.parse( 'yyyy-MM-dd', rpu.dtcompleted)
        def dtoccupied = dateSvc.parse( 'yyyy-MM-dd', rpu.dtoccupied)
		
		def depreciations = getDepreciations(rpu.bldgtype.objid)
        if( ! depreciations ) throw new Exception('Depreciation schedule for Type ' + rpu.bldgtype.code + ' is not defined.')
		def depreciationrate = 0
        
		def totaldepreciationrate 	= 0.0
		bu.depreciationvalue 		= 0.0 
		def depreciationvalue 		= 0.0 
		int bldgage 				= rpu.bldgage 
		def maxdepreciation			= 100 - rpu.bldgtype.residualrate 
		
        if( bldgage > 0 )  {
            for ( sked in depreciations ) {
                if( sked.ageto != 0 && sked.ageto <= bldgage ) {
					depreciationrate  		 = (sked.ageto - sked.agefrom + 1) * sked.rate
					
					//adjust for residual rate
					if( totaldepreciationrate + depreciationrate > maxdepreciation ) {
						depreciationrate = maxdepreciation - totaldepreciationrate 
					}
					
					totaldepreciationrate 	+= depreciationrate 
					depreciationvalue 		 = numberSvc.round( valuefordepreciation * depreciationrate / 100  )
					bu.depreciationvalue += depreciationvalue 
					valuefordepreciation 	-= depreciationvalue 
				}
				else {
					depreciationrate = (bldgage - sked.agefrom + 1) * sked.rate
					
					//adjust for residual rate
					if( totaldepreciationrate + depreciationrate > maxdepreciation ) {
						depreciationrate = maxdepreciation - totaldepreciationrate 
					}
					depreciationvalue 		 = numberSvc.round( valuefordepreciation * depreciationrate / 100  )
					bu.depreciationvalue += depreciationvalue 
					break
				}
			}
			bu.depreciation = totaldepreciationrate
		}
		
	}
	

	def calculateBldgDepreciationFromSked( rpu, bu) {
		if( ! rpu.bldgtype ) return 0.0 
        if( ! rpu.dtappraised) return 0.0 
        if( ! rpu.dtcompleted ) return 0.0 
        if( ! rpu.dtoccupied ) return 0.0 
        
        def dtappraised = dateSvc.parse( 'yyyy-MM-dd', rpu.dtappraised )
        def dtcompleted = dateSvc.parse( 'yyyy-MM-dd', rpu.dtcompleted)
        def dtoccupied = dateSvc.parse( 'yyyy-MM-dd', rpu.dtoccupied)
		
		def depreciations = getDepreciations(rpu.bldgtype.objid)
        if( ! depreciations ) throw new Exception('Depreciation schedule for Type ' + rpu.bldgtype.code + ' is not defined.')
		def depreciationrate = 0.0
        
		int bldgage = rpu.bldgage 
        if( bldgage > 0 )  {
            for ( sked in depreciations ) {
                if( sked.ageto != 0 && sked.ageto <= bldgage ) {
					depreciationrate += (sked.ageto - sked.agefrom + 1) * sked.rate
				}
				else {
					depreciationrate += (bldgage - sked.agefrom + 1) * sked.rate
					break
				}
			}
		}
		
		def maxdepreciation = 100.0 - rpu.bldgtype.residualrate 
		if( maxdepreciation < depreciationrate) 
			return maxdepreciation
		return depreciationrate
	}

	def calculateBldgAge( rpu  ) {
		if( ! (rpu.dtappraised && rpu.dtcompleted && rpu.dtoccupied ) ) {
            return 0
        } 
		
        def dtappraised = dateSvc.parse( 'yyyy-MM-dd', rpu.dtappraised )
        def dtcompleted = dateSvc.parse( 'yyyy-MM-dd', rpu.dtcompleted)
        def dtoccupied = dateSvc.parse( 'yyyy-MM-dd', rpu.dtoccupied)
        
		def refdate = dtcompleted
		
		//check calcbldgagebasedondtoccupied option
		if( util.toBoolean(rpu._setting.calcbldgagebasedondtoccupied, false) == true ){
			refdate = dtoccupied 
		}
		else if( dtoccupied < dtcompleted) {
			refdate = dtoccupied
		}
		int refyear = dateSvc.getYear( refdate )
		int curryear = dateSvc.getYear( dtappraised )
		def age = curryear - refyear 
        return ( age < 0 ? 0 : age )
	}


	/*-------------------------------------------------------------------
	*
	* SUPPORT METHODS
	*
	-------------------------------------------------------------------*/
	void saveStructures(structures){
		structures.each{ st ->
			em.save(st, SCHEMA_STRUCTURE)
		}
	}

	void saveBldgUses(bldguses){
		bldguses.each{bu ->
			em.save(bu, SCHEMA_BLDGUSE)
			saveFloors(bu.floors)
		}
	}

	void removeDeletedItems(rpu){
		rpu._params.each{ em.delete(it, SCHEMA_PARAM)}
		
		rpu._additionals.each{ addl ->
			addl.params.each{param-> 
				em.delete(param, SCHEMA_PARAM)
			}
			em.delete(addl, SCHEMA_ADDITIONAL)
		}

		rpu._floors.each{floor ->
			floor.additionals.each{ addl ->
				addl.params.each{param-> 
					em.delete(param, SCHEMA_PARAM)
				}
				em.delete(addl, SCHEMA_ADDITIONAL)
			}
			em.delete(floor, SCHEMA_FLOOR)
		}

		rpu._bldguses.each{bu ->
			bu.floors.each{floor ->
				floor.additionals.each{ addl ->
					addl.params.each{param-> 
						em.delete(param, SCHEMA_PARAM)
					}
					em.delete(addl, SCHEMA_ADDITIONAL)
				}
				em.delete(floor, SCHEMA_FLOOR)
			}
			em.delete(bu, SCHEMA_BLDGUSE)
		}
	}

	void saveFloors(floors){
		floors.each{
			em.save(it,SCHEMA_FLOOR)
			saveFloorAdditionals(it.additionals)
		}
	}

	void saveFloorAdditionals(additionals){
		additionals.each{
			em.save(it, SCHEMA_ADDITIONAL)
			saveParams(it.params)
		}
	}

	void saveParams(params){
		params.each{ param ->
			em.save(param, SCHEMA_PARAM)
		}
	}



	List getStructures(rpu){
		return em.getStructures(rpu)
	}

	List getBldgUses(rpu){
		def bldguses = em.getBldgUses([bldgrpuid:rpu.objid])
		bldguses.each{ bu ->
			bu.floors = em.getFloors([bldguseid:bu.objid])
			bu.floors.each{ floor ->
				floor.additionals = em.getAdditionalItems([bldgfloorid:floor.objid])
				floor.additionals.each{ addl -> 
					addl.params = em.getAdditionalItemParams([bldgflooradditionalid:addl.objid])
				}
			}
		}
		return bldguses
	}

	List loadStructures(rpu){

		return structSvc.getList([:]).collect{
			[objid:util.generateId('ST'), bldgrpuid:rpu.objid, structure:it]
		}
	}


	def getDepreciations(bldgtypeid) {
		return bldgSettingSvc.getDepreciations(bldgtypeid)
	}
	
}
 
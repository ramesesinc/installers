import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceCaptureInterceptor {
	
	@Service("AFSerialInventoryService")
	def afSerialSvc;

	@Service("CashTicketInventoryService")
	def cashTicketSvc;

	@ActiveDB("cashticket")
	def cashticket;

	@ActiveDB("remittance_af")
	def remittanceAf;

	@ActiveDB("remittance_capture")
	def remittance_capture;

	@ActiveDB("batchcapture_collection")
	def batchcapture

	
	@After(pattern="RemittanceCaptureService.post")
	public void postCaptureAFControl( def evt ) { 
		def o = evt.result;
		o.items.each {
			def m = [:];		
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.formno;
			m.txntype = "REMITTANCE";
			m.remarks = "REMITTANCE"; 
			if( it.startseries ) {
				m.startseries = it.startseries;
				m.endseries = it.endseries;
				m.qty= (it.endseries - it.startseries) + 1;
				m.startstub = 0;
				m.endstub = 0;
				afSerialSvc.postIssue(m);
				remittance_capture.updateRemittanceAF( [controlid:it.controlid, remittanceid: o.objid] );
				batchcapture.updateBatchCaptureState([objid:it.objid, state:"CLOSED"])
			}
			else {
				//determine the qty. we can do this by getting the formno
				def g = cashticket.read( [objid: m.afid ]);
				m.qty = (int) (it.amount / g.denomination);
				cashTicketSvc.postIssue( m );
				remittance_capture.updateRemittanceCashTicket([controlid:it.controlid, remittanceid: o.objid] );
			}
			
		}

		
		def list = remittanceAf.getRemittanceForBalanceForward([remittanceid: o.objid]);
		list.each {
			def m = [:];
			m.startseries = it.startseries;
			m.endseries = it.endseries;
			m.txntype = "FORWARD";
			m.remarks = "FORWARD BALANCE FROM REMITTANCE";
			m.qty= (it.endseries - it.startseries) + 1;
			m.endstub = 0; 
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.formno;
			afSerialSvc.postBegin(m);
		}

		//process the cash ticket
		list = remittanceAf.getCashTicketRemittanceForBalanceForward([remittanceid: o.objid]);
		list.each {
			def m = [:];
			m.txntype = "FORWARD";
			m.remarks = "FORWARD BALANCE FROM REMITTANCE";
			m.qty= it.qtybalance;
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.afid;
			cashTicketSvc.postBegin(m);
		}

	}

}
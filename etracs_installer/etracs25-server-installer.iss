; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]  
AppName=ETRACS - Server
AppVersion=2.5.207.14
AppPublisher=Rameses Systems, Inc.
DefaultDirName=C:\ETRACS-server
Compression=lzma2
SolidCompression=yes
OutputDir=userdocs:Inno Setup Examples Output
LicenseFile=license.txt
                                                            
[Files]                   
Source: "jre-6u45-windows-i586.exe"; Flags: dontcopy
Source: "jre-6u45-windows-x64.exe"; Flags: dontcopy
Source: "server\splash_setup.bmp"; Flags: dontcopy    
Source: "server\*"; DestDir: "{tmp}"; Flags: recursesubdirs  
Source: "server\osiris3-server\*"; DestDir: "{app}\osiris3-server"; Flags: recursesubdirs 
Source: "server\osiris3-server-notification\*"; DestDir: "{app}\osiris3-server-notification"; Flags: recursesubdirs 
     
[Icons]
Name: "{commondesktop}\Osiris3 Server"; Filename: "{app}\osiris3-server\bin\run.bat"; IconFilename: "{tmp}\shortcut.ico";
Name: "{commondesktop}\Osiris3 Server Notification"; Filename: "{app}\osiris3-server-notification\bin\run.bat"; IconFilename: "{tmp}\shortcut.ico";
                                                                                                                              
[Code]     
#define MinJRE "1.6.0_45"

var
  {LguName, LguType, LguPin, LguIdxNo: String;
  LguProvIdxNo, LguProvPin: String;
  MarketName, MarketCode: String;
  DBConnection, DBName, HostAddress, Username, Password: String;
  propertiesPath: String;

  LguNameLabel, LguTypeLabel, LguPinLabel, LguIdxNoLabel: TLabel;
  ConnectionLabel, HostAddressLabel, UserNameLabel, PasswordLabel, DBNameLabel: TLabel;
  LguTypeComboBox: TNewComboBox;     
  ConnectionComboBox: TNewComboBox;   }
  
  AppHostPage: TWizardPage;   
  AppHost: String;
  AppHostEdit: TNewEdit;   

  {Lgu Type Var}
  LguTypePage: TWizardPage;
  LguType: String;
  LguTypeComboBox: TNewComboBox;

  {City Var}
  CityPage: TWizardPage;
  LguCityNameEdit, LguCityIdxNoEdit, LguCityPinEdit: TNewEdit;
  LguCityName, LguCityIdxNo, LguCityPin: String;

  {Province Var}
  ProvincePage: TWizardPage;
  LguProvNameEdit, LguProvIdxNoEdit, LguProvPinEdit: TNewEdit;
  LguProvName, LguProvIdxNo, LguProvPin: String;

  {Municipality Var}     
  MunicipalityProvincePage, MunicipalityPage: TWizardPage;
  LguMunProvNameEdit, LguMunProvIdxNoEdit, LguMunProvPinEdit, LguMunNameEdit, LguMunIdxNoEdit, LguMunPinEdit: TNewEdit;
  LguMunProvName, LguMunProvIdxNo, LguMunProvPin, LguMunName, LguMunIdxNo, LguMunPin: String;

  {Market Var}   
  MarketPage: TWizardPage;
  MarketCodeEdit, MarketNameEdit: TNewEdit;
  MarketCode, MarketName: String;

  {Database Var}                 
  DatabasePage: TWizardPage;     
  ConnectionComboBox: TNewComboBox;
  Connection, Host, Username, Password, Database: String;
  HostEdit, UsernameEdit, DatabaseEdit: TNewEdit;
  PasswordEdit: TPasswordEdit;
                          
  {LguNameEdit, LguPinEdit, LguIdxNoEdit: TNewEdit;
  LguProvIdxNoEdit, LguProvPinEdit: TNewEdit;
  MarketNameEdit, MarketCodeEdit: TNewEdit;
  HostAddressEdit, UserNameEdit, DBNameEdit: TNewEdit;
  PasswordEdit: TPasswordEdit;       }

procedure LguTypeComboBoxChange(Sender: TObject);
begin
  case LguTypeComboBox.ItemIndex of
      0:
        LguType := 'city';
      1:
        LguType := 'municipality';
      2:
        LguType := 'province';
      3:
        LguType := 'market';
  end;
end;                          

procedure ConnectionComboBoxChange(Sender: TObject);
begin
  case ConnectionComboBox.ItemIndex of
    0:
      Connection := 'mysql';
    1:
      Connection := 'mssql';
    2:
      Connection := 'postgre';
  end;
end;                               

function IsJREInstalled: Boolean;
var
  JREVersion: string;
begin
  // read JRE version
  Result := RegQueryStringValue(HKLM32, 'Software\JavaSoft\Java Runtime Environment', 'Java6FamilyVersion', JREVersion);
  // if the previous reading failed and we're on 64-bit Windows, try to read 
  // the JRE version from WOW node
  if not Result and IsWin64 then
    Result := RegQueryStringValue(HKLM64, 'Software\JavaSoft\Java Runtime Environment', 'Java6FamilyVersion', JREVersion);
  // if the JRE version was read, check if it's at least the minimum one 
  if Result then
    Result := CompareStr(JREVersion, '{#MinJRE}') = 0;
end;      
      {
procedure InheritBoundsRect(ASource, ATarget: TControl);
begin
  ATarget.Left := ASource.Left;
  ATarget.Top := ASource.Top;
  ATarget.Width := ASource.Width;
  ATarget.Height := ASource.Height;
end;  }

procedure InitializeWizard;
var
  BitmapFileName: String;    
  TopWelcomeLabel: TLabel;
  BottomWelcomeLabel: TLabel;
  LguTypeLabel, ConnectionLabel, UsernameLabel: TLabel;
  HostLabel, PasswordLabel, DatabaseLabel: TLabel;
  AppHostLabel: TLabel;
begin   
  BitmapFileName := ExpandConstant('{tmp}\splash_setup.bmp'); 
  ExtractTemporaryFile(ExtractFileName(BitmapFileName));
  //WizardForm.WizardBitmapImage.Bitmap.LoadFromFile(BitmapFileName);  }
  //WizardForm.WizardBitmapImage.Align := alClient;
  WizardForm.WizardBitmapImage.Bitmap.LoadFromFile(BitmapFileName); 
  WizardForm.WizardBitmapImage2.Bitmap.LoadFromFile(BitmapFileName);
   
  {TopWelcomeLabel := TLabel.Create(WizardForm);
  TopWelcomeLabel.Parent := WizardForm.WelcomeLabel1.Parent;
  TopWelcomeLabel.Font := WizardForm.WelcomeLabel1.Font;
  TopWelcomeLabel.Caption := WizardForm.WelcomeLabel1.Caption;
  TopWelcomeLabel.WordWrap := WizardForm.WelcomeLabel1.WordWrap; 
  TopWelcomeLabel.Transparent := True;
  InheritBoundsRect(WizardForm.WelcomeLabel1, TopWelcomeLabel);
  WizardForm.WelcomeLabel1.Visible := False;

  BottomWelcomeLabel := TLabel.Create(WizardForm);
  BottomWelcomeLabel.Parent := WizardForm.WelcomeLabel2.Parent;
  BottomWelcomeLabel.Font := WizardForm.WelcomeLabel2.Font;
  BottomWelcomeLabel.Caption := WizardForm.WelcomeLabel2.Caption;              
  BottomWelcomeLabel.WordWrap := WizardForm.WelcomeLabel2.WordWrap;
  BottomWelcomeLabel.Transparent := True;
  InheritBoundsRect(WizardForm.WelcomeLabel2, BottomWelcomeLabel);
  WizardForm.WelcomeLabel2.Visible := False;     }


  LguTypePage := CreateCustomPage(wpLicense, 'Select LGU Type', '');  
           
  LguTypeLabel := TLabel.Create(WizardForm);
  with LguTypeLabel do begin  
  Parent := LguTypePage.Surface; 
  Left := 0;  
  Top := 0;
  Caption := 'LGU Type:';
  end;


  LguType := 'city';
  LguTypeComboBox := TNewComboBox.Create(WizardForm);
  with LguTypeComboBox do begin 
  Parent := LguTypePage.Surface;
  Left := ScaleX(70);
  Top := LguTypeLabel.Top;
  Width := ScaleY(150);
  Style := csDropDownList;
  Items.Add('CITY');
  Items.Add('MUNICIPALITY');
  Items.Add('PROVINCE');
  Items.Add('MARKET');
  ItemIndex := 0;
  OnChange := @LguTypeComboBoxChange;
  end;

  
  DatabasePage := CreateCustomPage(LguTypePage.ID, 
                                  'Database Information', 
                                  'Please specify database information.');
      
  ConnectionLabel := TLabel.Create(WizardForm); 
  with ConnectionLabel do begin    
  Parent := DatabasePage.Surface;
  Top := 0;
  Left := 0;
  Caption := 'Connection:';
  end;

  Connection := 'mysql';   
  ConnectionComboBox := TNewComboBox.Create(WizardForm);
  with ConnectionComboBox do begin 
  Parent := DatabasePage.Surface;
  Top := ConnectionLabel.Top;  
  Left := 70;
  Width := ScaleY(150);
  Style := csDropDownList;  
  Items.Add('MySql');
  Items.Add('MsSql');
  //ConnectionComboBox.Items.Add('PostgreSql')
  ItemIndex := 0;
  OnChange := @ConnectionComboBoxChange;
  end;
       
  HostLabel := TLabel.Create(WizardForm);
  with HostLabel do begin     
  Parent := DatabasePage.Surface;
  Top := ScaleX(30);
  Left := 0;
  Caption := 'Host:'
  end;
        
  HostEdit := TNewEdit.Create(WizardForm);      
  with HostEdit do begin 
  Parent := DatabasePage.Surface;
  Top := HostLabel.Top;
  Left := 70;
  Width := ScaleY(320);
  Text := 'localhost';
  end;
 
  UsernameLabel := TLabel.Create(WizardForm);
  with UsernameLabel do begin    
  Parent := DatabasePage.Surface;
  Top := ScaleX(60);
  Left := 0;
  Caption := 'Username:';
  end;

  UsernameEdit := TNewEdit.Create(WizardForm); 
  with UsernameEdit do begin  
  Parent := DatabasePage.Surface;
  Top := UsernameLabel.Top;
  Left := 70;
  Width := ScaleY(320);
  end;

  PasswordLabel := TLabel.Create(WizardForm); 
  with PasswordLabel do begin  
  Parent := DatabasePage.Surface;
  Top := ScaleX(90);
  Left := 0;
  Caption := 'Password:';
  end;

  PasswordEdit := TPasswordEdit.Create(WizardForm);  
  with PasswordEdit do begin
  Parent := DatabasePage.Surface;
  Top := PasswordLabel.Top;
  Left := 70;
  Width := ScaleY(320);
  end;

  DatabaseLabel := TLabel.Create(WizardForm);
  with DatabaseLabel do begin   
  Parent := DatabasePage.Surface;
  Top := ScaleX(120);
  Left := 0;
  Caption := 'Name:';
  end;

  DatabaseEdit := TNewEdit.Create(WizardForm); 
  with DatabaseEdit do begin 
  Parent := DatabasePage.Surface;
  Top := DatabaseLabel.Top;
  Left := 70;
  Width := ScaleY(320);
  end;
  
  
  AppHostPage := CreateCustomPage(DatabasePage.ID, 
                              'App Host Information', 
                              'Please specify app host information.');
      
  AppHostLabel := TLabel.Create(WizardForm); 
  with AppHostLabel do begin  
  Parent := AppHostPage.Surface;
  Top := 0;
  Left := 0;
  Caption := 'Host:'
  end;
        
  AppHostEdit := TNewEdit.Create(WizardForm);    
  with AppHostEdit do begin     
  Parent := AppHostPage.Surface;
  Top := AppHostEdit.Top;
  Left := 70;
  Width := ScaleY(320);
  end;
  //LguPage := CreateCustomPage(LguTypePage.ID, 
              //'Local Government Unit Information', 
              //'Please specify the local government unit information.');
  {InputDirPage := CreateInputDirPage(DatabasePage.ID,
    'Select Osiris2 Data Location', '',
    'Osiris2 files will be stored in the following folder.' + #10 +
    'To continue, click Next. If you would like to select a different folder, click Browse.',
    False, 'New Folder');

  // Add item (with an empty caption)
  InputDirPage.Add('');

  // Set initial value (optional)
  InputDirPage.Values[0] := ExpandConstant('C:\osiris3-server-etracs');   }           
end;     

procedure CurStepChanged(CurStep: TSetupStep);
var
  Text, Path, JavaHome: String;
  ResultCode: Integer;
  ResultBool: Boolean;                  
begin
  case CurStep of                          
    ssPostInstall:              
      begin
        Text := '';

        if (Host <> nil) then begin
          Text := Text + 'db.host=' + Host + #10
        end;

        if (Database <> nil) then begin
          Text := Text + 'db.name=' + Database + #10
        end;

        if (Username <> nil) then begin
          Text := Text + 'db.user=' + Username + #10
        end;

        if (Password <> nil) then begin
          Text := Text + 'db.pwd=' + Password + #10
        end;

        if (Connection <> nil) then begin
          Text := Text + 'db.connection=' + Connection + #10
        end;

        case LguType of
          'city':
            begin
              Text := Text + 'lgu.type=' + LguType + #10;
              Text := Text + 'lgu.pin=' + LguCityPin + #10;
              Text := Text + 'lgu.indexno=' + LguCityIdxNo + #10;
              Text := Text + 'lgu.name=' + LguCityName + #10;
            end;
          'province':
            begin
              Text := Text + 'lgu.type=' + LguType + #10;
              Text := Text + 'lgu.pin=' + LguProvPin + #10;
              Text := Text + 'lgu.indexno=' + LguProvIdxNo + #10;
              Text := Text + 'lgu.name=' + LguProvName + #10;
            end;
          'market':
            begin
              Text := Text + 'org.class=' + LguType + #10;
              Text := Text + 'org.name=' + MarketName + #10;
              Text := Text + 'org.code=' + MarketCode + #10;
            end;
          'municipality':
            begin
              Text := Text + 'lgu.type=' + LguType + #10;
              Text := Text + 'lgu.pin=' + LguMunPin + #10;
              Text := Text + 'lgu.indexno=' + LguMunIdxNo + #10;
              Text := Text + 'lgu.name=' + LguMunName + #10;
              Text := Text + 'province.pin=' + LguMunProvPin + #10;
              Text := Text + 'province.indexno=' + LguMunProvIdxNo + #10;
              Text := Text + 'province.name=' + LguMunProvName + #10;
            end;
        end;
        Text := Text + 'app.host=' + AppHost + #10;                     
                                                                      
        Path := ExpandConstant('{tmp}');                          
        StringChangeEx(Path, '\', '/', True)                
        Text := Text + 'temp.dir=' + Path + #10;

        Path := ExpandConstant('{app}');  
        StringChangeEx(Path, '\', '/', True);
        Text := Text + 'target.dir=' + Path + #10;
        Text := Text + 'version.no=2.5.207.14' + #10;
                                                     
        ResultBool := RegQueryStringValue(HKLM32, 'Software\JavaSoft\Java Runtime Environment\{#MinJRE}', 'JavaHome', JavaHome);
                                                  
        if not ResultBool and IsWin64 then
          ResultBool := RegQueryStringValue(HKLM64, 'Software\JavaSoft\Java Runtime Environment\{#MinJRE}', 'JavaHome', JavaHome);
                                              
        StringChangeEx(JavaHome, '\', '/', True);
        Text := Text + 'java.home.dir=' + JavaHome + #10;

        Path := ExpandConstant('{tmp}\etracs25.properties');
        DeleteFile(Path);
        SaveStringToFile(Path, Text, True);
                                           
        //Path := ExpandConstant('{app}\etracs25.properties');
        {DeleteFile(Path);
        SaveStringToFile(Path, Text, True); }
                                               
        Path := ExpandConstant('{tmp}\ant\bin\ant.bat');   
        ExtractTemporaryFile(ExtractFileName(Path));
        Exec(ExpandConstant(Path), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode); 
      end;
  end;
end;

procedure CurPageChanged(CurPageID: Integer);
var
  Path, Text: String;         
  ResultCode: Integer;
begin
  case CurPageID of               
    AppHostPage.ID:
      AppHostEdit.Text := 'localhost';
  end;
end;                                 

{procedure IdxNoChange(Sender: TObject);
var Text: String;
begin
  Text := Trim(LguIdxNoEdit.Text);
  LguPinEdit.Text := Text;
end;

procedure MuniIdxNoChange(Sender: TObject);
var Text: String;
begin
  Text := Trim(LguIdxNoEdit.Text);
  LguPinEdit.Text := LguProvPin + '-' + Text;
end;  }

    
procedure CityIdxNoChange(Sender: TObject);
var Text: String;
begin
  Text := Trim(LguCityIdxNoEdit.Text);
  LguCityPinEdit.Text := Text;
end;

procedure ProvIdxNoChange(Sender: TObject);
var Text: String;
begin
  Text := Trim(LguProvIdxNoEdit.Text);
  LguProvPinEdit.Text := Text;
end;

procedure MunProvIdxNoChange(Sender: TObject);
var Text: String;
begin
  Text := Trim(LguMunProvIdxNoEdit.Text);
  LguMunProvPinEdit.Text := Text;
end;

procedure MunIdxNoChange(Sender: TObject);
var Text: String;
begin
  Text := Trim(LguMunIdxNoEdit.Text);
  LguMunPinEdit.Text := LguMunProvIdxNo + '-' + Text;
end;

procedure ClearDbPage();
begin
    Connection := 'mysql';
    if (ConnectionComboBox <> nil) then begin
      ConnectionComboBox.ItemIndex := 0;
    end;

    if (HostEdit <> nil) then begin
      HostEdit.Text := 'localhost';
    end;

    if (UsernameEdit <> nil) then begin
      UsernameEdit.Text := '';
    end;

    if (PasswordEdit <> nil) then begin
      PasswordEdit.Text := '';
    end;

    if (DatabaseEdit <> nil) then begin
      DatabaseEdit.Text := 'etracs25';
    end;
end;

procedure CreateCityPage(PageID: Integer);
Var
  Surface: TWinControl;
  LguNameLabel, LguIdxNoLabel, LguPinLabel: TLabel;
  FixWidth, EditWidth: Integer;
begin
  FixWidth := 70;
  EditWidth := 320;

  if (CityPage = nil) then begin       
    CityPage := CreateCustomPage(LguTypePage.ID, 
                                  'City Information', 
                                  'Please specify city information.');
  end;
  Surface := CityPage.Surface; 
  
  if (LguNameLabel = nil) then begin 
    LguNameLabel := TLabel.Create(WizardForm);
  end;
  with LguNameLabel do begin
  Parent := Surface;
  Top := 0;
  Left := 0;
  Caption := 'Name:';
  end;

  if (LguCityNameEdit = nil) then begin 
    LguCityNameEdit := TNewEdit.Create(WizardForm);     
    with LguCityNameEdit do begin
    Parent := Surface;
    Top := LguNameLabel.Top;
    Left := FixWidth;
    Width := 320;
    CharCase := ecUpperCase;
    end;
  end; 
  LguCityNameEdit.Text := '';

  if (LguIdxNoLabel = nil) then begin     
    LguIdxNoLabel := TLabel.Create(WizardForm);    
  end;
  with LguIdxNoLabel do begin
  Parent := Surface;
  Top := ScaleY(30);      
  Left := 0;
  Caption := 'Index No.:';
  end;

  if (LguCityIdxNoEdit = nil) then begin   
    LguCityIdxNoEdit := TNewEdit.Create(WizardForm);
    with LguCityIdxNoEdit do begin
    Parent := Surface;
    Top := LguIdxNoLabel.Top;
    Left := FixWidth;
    MaxLength := 3;
    Width := 70;
    OnChange := @CityIdxNoChange; 
    end;    
  end;
  LguCityIdxNoEdit.Text := '';

  if (LguPinLabel = nil) then begin        
    LguPinLabel := TLabel.Create(WizardForm);
  end;
  with LguPinLabel do begin 
  Parent := Surface;
  Top := ScaleY(60);
  Left := 0;
  Caption := 'PIN:';
  end;

  if (LguCityPinEdit = nil) then begin  
    LguCityPinEdit := TNewEdit.Create(WizardForm);
    with LguCityPinEdit do begin  
    Parent := Surface;
    Top := LguPinLabel.Top;
    Left := FixWidth;
    Width := 70;
    ReadOnly := True;
    end;
  end;
  LguCityPinEdit.Text := '';
end;

procedure CreateProvincePage(PageID: Integer);
var
  Surface: TWinControl;
  LguNameLabel, LguIdxNoLabel, LguPinLabel: TLabel;
  FixWidth, EditWidth: Integer;
begin
  FixWidth := 70;
  EditWidth := 320;
  if (ProvincePage = nil) then begin  
    ProvincePage := CreateCustomPage(LguTypePage.ID, 
                      'Province Information', 
                      'Please specify province information.');
  end;
  Surface := ProvincePage.Surface; 

  LguNameLabel := TLabel.Create(WizardForm);
  with LguNameLabel do begin
  Parent := Surface;
  Top := 0;
  Left := 0;
  Caption := 'Name:';
  end;

  if (LguProvNameEdit = nil) then begin  
    LguProvNameEdit := TNewEdit.Create(WizardForm);
    with LguProvNameEdit do begin   
    Parent := Surface;
    Top := LguNameLabel.Top;
    Left := FixWidth;
    Width := 320;
    CharCase := ecUpperCase
    end;
  end;
  LguProvNameEdit.Text := '';
  
  LguIdxNoLabel := TLabel.Create(WizardForm);
  with LguIdxNoLabel do begin
  Parent := Surface;
  Top := ScaleY(30);      
  Left := 0;
  Caption := 'Index No.:';
  end;

  if (LguProvIdxNoEdit = nil) then begin 
    LguProvIdxNoEdit := TNewEdit.Create(WizardForm);
    with LguProvIdxNoEdit do begin
    Parent := Surface;
    Top := LguIdxNoLabel.Top;
    Left := FixWidth;
    MaxLength := 3;
    Width := 70;
    OnChange := @ProvIdxNoChange;
    end;
  end;
  LguProvIdxNoEdit.Text := '';

  LguPinLabel := TLabel.Create(WizardForm);       
  with LguPinLabel do begin
  Parent := Surface;
  Top := ScaleY(60);
  Left := 0;
  Caption := 'PIN:';
  end;

  if (LguProvPinEdit = nil) then begin   
    LguProvPinEdit := TNewEdit.Create(WizardForm);
    with LguProvPinEdit do begin
    Parent := Surface;
    Top := LguPinLabel.Top;
    Left := FixWidth;
    Width := 70;
    ReadOnly := True;
    end;
  end;
  LguProvPinEdit.Text := '';
end;

procedure CreateMunicipalityProvincePage(PageID: Integer);
var
  Surface: TWinControl;
  LguNameLabel, LguIdxNoLabel, LguPinLabel: TLabel;
  FixWidth, EditWidth: Integer;
begin
  FixWidth := 70;
  EditWidth := 320;
  if (MunicipalityProvincePage = nil) then begin     
    MunicipalityProvincePage := CreateCustomPage(LguTypePage.ID, 
                                                'Province Information', 
                                                'Please specify province information.');
  end;
  Surface := MunicipalityProvincePage.Surface; 

  LguNameLabel := TLabel.Create(WizardForm);     
  with LguNameLabel do begin
  Parent := Surface;
  Top := 0;
  Left := 0;
  Caption := 'Name:';
  end;

  if (LguMunProvNameEdit = nil) then begin  
    LguMunProvNameEdit := TNewEdit.Create(WizardForm);
    with LguMunProvNameEdit do begin
    Parent := Surface;
    Top := LguNameLabel.Top;
    Left := FixWidth;
    Width := 320;
    CharCase := ecUpperCase
    end;
  end;  
  LguMunProvNameEdit.Text := ''; 

  LguIdxNoLabel := TLabel.Create(WizardForm);          
  with LguIdxNoLabel do begin
  Parent := Surface;
  Top := ScaleY(30);      
  Left := 0;
  Caption := 'Index No.:';
  end;

  if (LguMunProvIdxNoEdit = nil) then begin 
    LguMunProvIdxNoEdit := TNewEdit.Create(WizardForm);
    with LguMunProvIdxNoEdit do begin   
    Parent := Surface;
    Top := LguIdxNoLabel.Top;
    Left := FixWidth;
    MaxLength := 3;
    Width := 70;
    OnChange := @MunProvIdxNoChange;
    end;
  end;
  LguMunProvIdxNoEdit.Text := '';

  LguPinLabel := TLabel.Create(WizardForm);
  with LguPinLabel do begin
  Parent := Surface;
  Top := ScaleY(60);
  Left := 0;
  Caption := 'PIN:';
  end;

  if (LguMunProvPinEdit = nil) then begin 
    LguMunProvPinEdit := TNewEdit.Create(WizardForm);
    with LguMunProvPinEdit do begin
    Parent := Surface;
    Top := LguPinLabel.Top;
    Left := FixWidth;
    Width := 70;
    ReadOnly := True;
    end;
  end;
  LguMunProvPinEdit.Text := '';
end;

procedure CreateMarketPage(PageID: Integer);
var
  Surface: TWinControl;
  MarketNameLabel, MarketCodeLabel: TLabel;
begin
  if (MarketPage = nil) then begin         
    MarketPage := CreateCustomPage(LguTypePage.ID,
                                    'Market Information',
                                    'Please specify market information.');
  end;
  Surface := MarketPage.Surface;   

  MarketNameLabel := TLabel.Create(WizardForm);
  with MarketNameLabel do begin
  Parent := Surface;
  Top := 0;
  Left := 0;
  Caption := 'Name:';
  end;

  if (MarketNameEdit = nil) then begin   
    MarketNameEdit := TNewEdit.Create(WizardForm);
    with MarketNameEdit do begin
    Parent := Surface;
    Top := MarketNameLabel.Top;
    Left := 50;
    CharCase := ecUpperCase;
    Width := 320;
    end;
  end;
  MarketNameEdit.Text := '';
     
  MarketCodeLabel := TLabel.Create(WizardForm);
  with MarketCodeLabel do begin
  Parent := Surface;
  Top := ScaleY(30);
  Left := 0;
  Caption := 'Code:';
  end;

  if (MarketCodeEdit = nil) then begin 
    MarketCodeEdit := TNewEdit.Create(WizardForm);
    with MarketCodeEdit do begin
    Parent := Surface;
    Top := MarketCodeLabel.Top;
    Left := 50;
    Width := 320;
    end;
  end; 
  MarketCodeEdit.Text := '';
end;

procedure CreateMunicipalityPage(PageID: Integer);
var
  Surface: TWinControl;
  LguNameLabel, LguIdxNoLabel, LguPinLabel: TLabel;
  ProvLabel, ProvIdxNoLabel, ProvPinLabel: TLabel;   
  ProvIdxNoEdit, ProvPinEdit: TNewEdit;
begin
  if (MunicipalityPage = nil) then begin               
    MunicipalityPage := CreateCustomPage(MunicipalityProvincePage.ID,
                                          'Municipality Information',
                                          'Please specify municipality information');
  end;
  Surface := MunicipalityPage.Surface;

  LguNameLabel := TLabel.Create(WizardForm);
  with LguNameLabel do begin
  Parent := Surface;
  Top := 0;
  Left := 0;
  Caption := 'Name:';
  end;

  if (LguMunNameEdit = nil) then begin 
    LguMunNameEdit := TNewEdit.Create(WizardForm);
    with LguMunNameEdit do begin
    Parent := Surface;
    Top := LguNameLabel.Top;
    Left := 70;
    Width := 320;
    CharCase := ecUpperCase;
    end;
  end;
  LguMunNameEdit.Text := '';

  LguIdxNoLabel := TLabel.Create(WizardForm);
  with LguIdxNoLabel do begin 
  Parent := Surface;
  Top := ScaleY(30);
  Left := 0;
  Caption := 'Index No.:';
  end;

  if (LguMunIdxNoEdit = nil) then begin  
    LguMunIdxNoEdit := TNewEdit.Create(WizardForm);  
    with LguMunIdxNoEdit do begin
    Parent := Surface;
    Top := LguIdxNoLabel.Top;
    Left := 70;
    Width := 70;
    MaxLength := 2;
    OnChange := @MunIdxNoChange;
    end;
  end;
  LguMunIdxNoEdit.Text := '';

  LguPinLabel := TLabel.Create(WizardForm);
  with LguPinLabel do begin  
  Parent := Surface;
  Top := ScaleY(60);
  Left := 0;
  Caption := 'PIN:';
  end;

  if (LguMunPinEdit = nil) then begin 
    LguMunPinEdit := TNewEdit.Create(WizardForm);
    with LguMunPinEdit do begin 
    Parent := Surface;
    Top := LguPinLabel.Top;
    Left := 70;
    Width := 70
    ReadOnly := True;
    end;
  end;   
  LguMunPinEdit.Text := LguMunProvPin + '-';

  ProvLabel := TLabel.Create(WizardForm);
  with ProvLabel do begin 
  Parent := Surface;
  Top := ScaleY(120);
  Left := 0;
  //ProvLabel.Font := fsBold;
  Caption := 'Province Information:';
  end;

  ProvIdxNoLabel := TLabel.Create(WizardForm);
  with ProvIdxNoLabel do begin
  Parent := Surface;
  Top := ScaleY(150);
  Left := ScaleX(30);
  Caption := 'Index No.:';
  end;

  ProvIdxNoEdit := TNewEdit.Create(WizardForm);
  with ProvIdxNoEdit do begin
  Parent := Surface;
  Top := ProvIdxNoLabel.Top;
  Left := ScaleX(100);
  Width := 70;
  ReadOnly := True;
  Text := LguMunProvIdxNo;
  end;

  ProvPinLabel := TLabel.Create(WizardForm);
  with ProvPinLabel do begin
  Parent := Surface;
  Top := ScaleY(180);
  Left := ProvIdxNoLabel.Left;
  Caption := 'PIN:';
  end;

  ProvPinEdit := TNewEdit.Create(WizardForm);
  with ProvPinEdit do begin
  Parent := Surface;
  Top := ProvPinLabel.Top;
  Left := ProvIdxNoEdit.Left;
  Width := ProvIdxNoEdit.Width;
  ReadOnly := True;
  Text := LguMunProvPin;
  end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  Result := False;
  if (LguType = 'city') then begin
    if ((ProvincePage <> nil) and (PageID = ProvincePage.ID)) then begin
      Result := True
    end else if ((MarketPage <> nil) and (PageID = MarketPage.ID)) then begin
      Result := True
    end else if ((MunicipalityProvincePage <> nil) and (PageID = MunicipalityProvincePage.ID)) then begin
      Result := True
    end else if ((MunicipalityPage <> nil) and (PageID = MunicipalityPage.ID)) then begin
      Result := True
    end;

  end else if (LguType = 'province') then begin 
    if ((CityPage <> nil) and (PageID = CityPage.ID)) then begin
      Result := True
    end else if ((MarketPage <> nil) and (PageID = MarketPage.ID)) then begin
      Result := True
    end else if ((MunicipalityProvincePage <> nil) and (PageID = MunicipalityProvincePage.ID)) then begin
      Result := True
    end else if ((MunicipalityPage <> nil) and (PageID = MunicipalityPage.ID)) then begin
      Result := True
    end;

  end else if (LguType = 'market') then begin 
    if ((CityPage <> nil) and (PageID = CityPage.ID)) then begin
      Result := True
    end else if ((ProvincePage <> nil) and (PageID = ProvincePage.ID)) then begin
      Result := True
    end else if ((MunicipalityProvincePage <> nil) and (PageID = MunicipalityProvincePage.ID)) then begin
      Result := True
    end else if ((MunicipalityPage <> nil) and (PageID = MunicipalityPage.ID)) then begin
      Result := True
    end;     

  end else if (LguType = 'municipality') then begin 
    if ((CityPage <> nil) and (PageID = CityPage.ID)) then begin
      Result := True
    end else if ((ProvincePage <> nil) and (PageID = ProvincePage.ID)) then begin
      Result := True
    end;

  end;
end;
  
function NextButtonClick(CurPageID: Integer): Boolean;
var 
  Msg, JreFileName, Text: String;
  ResultCode: Integer;

begin
  Result := True
     
  if (CurPageID = wpLicense) then begin
    if not IsJREInstalled then begin
      if IsWin64 then begin
        Log('win64');
        JreFileName := ExpandConstant('{tmp}\jre-6u45-windows-x64.exe');
      end else if not IsWin64 then begin
        Log('not win64')
        JreFileName := ExpandConstant('{tmp}\jre-6u45-windows-i586.exe');
      end;
      
      ExtractTemporaryFile(ExtractFileName(JreFileName));
      Exec(ExpandConstant(JreFileName), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);           
    end

  end else if ((LguTypePage <> nil) and (CurPageID = LguTypePage.ID)) then begin
    if (LguType = 'city') then begin  
      CreateCityPage(CurPageID); 

    end else if (LguType = 'province') then begin 
      CreateProvincePage(CurPageID);

    end else if (LguType = 'municipality') then begin 
      CreateMuniciPalityProvincePage(CurPageID);

    end else if (LguType = 'market') then begin  
      CreateMarketPage(CurPageID);
      
    end;
  end else if ((LguType <> nil)) then begin
    if ((LguType = 'city') and (CityPage <> nil) and (CurPageID = CityPage.ID)) then begin
      Msg := '';

      LguCityName := Trim(LguCityNameEdit.Text);
      LguCityIdxNo := Trim(LguCityIdxNoEdit.Text);
      LguCityPin := Trim(LguCityPinEdit.Text);

      if (Length(LguCityName) = 0) then begin
        Msg := Msg + 'Name is required.' + #10
      end;
      if (Length(LguCityIdxNo) = 0) then begin
        Msg := Msg + 'Index No. is required.' + #10
      end else if (Length(LguCityIdxNo) < 3) then begin
        Msg := Msg + 'Index No. must be 3 characters long.' + #10
      end;

      ClearDbPage();

    end else if ((LguType = 'province') and (ProvincePage <> nil) and (CurPageID = ProvincePage.ID)) then begin
      Msg := '';

      LguProvName := Trim(LguProvNameEdit.Text);
      LguProvIdxNo := Trim(LguProvIdxNoEdit.Text);
      LguProvPin := Trim(LguProvPinEdit.Text);

      if (Length(LguProvName) = 0) then begin
        Msg := Msg + 'Name is required.' + #10
      end;
      if (Length(LguProvIdxNo) = 0) then begin
        Msg := Msg + 'Index No. is required.' + #10
      end else if (Length(LguProvIdxNo) < 3) then begin
        Msg := Msg + 'Index No. must be 3 characters long.' + #10
      end;        

      ClearDbPage();

    end else if ((LguType = 'municipality') and (MunicipalityProvincePage <> nil) and (CurPageID = MunicipalityProvincePage.ID)) then begin
      Msg := '';

      LguMunProvName := Trim(LguMunProvNameEdit.Text);
      LguMunProvIdxNo := Trim(LguMunProvIdxNoEdit.Text);
      LguMunProvPin := Trim(LguMunProvPinEdit.Text);

      if (Length(LguMunProvName) = 0) then begin
        Msg := Msg + 'Name is required.' + #10
      end;  
      if (Length(LguMunProvIdxNo) = 0) then begin
        Msg := Msg + 'Index No. is required.' + #10
      end else if (Length(LguMunProvIdxNo) < 3) then begin
        Msg := Msg + 'Index No. must be 3 characters long.' + #10
      end;

      CreateMunicipalityPage(CurPageID);

    end else if ((LguType = 'market') and (MarketPage <> nil) and (CurPageID = MarketPage.ID)) then begin
      Msg := '';

      MarketName := Trim(MarketNameEdit.Text);
      MarketCode := Trim(MarketCodeEdit.Text);

      if (Length(MarketName) = 0) then begin
        Msg := Msg + 'Name is required.' + #10
      end;
      if (Length(MarketCode) = 0) then begin
        Msg := Msg + 'Code is require.' + #10
      end;
      
      ClearDbPage();

    end else if ((LguType = 'municipality') and (MunicipalityPage <> nil) and (CurPageID = MunicipalityPage.ID)) then begin
      Msg := '';

      LguMunName := Trim(LguMunNameEdit.Text);
      LguMunIdxNo := Trim(LguMunIdxNoEdit.Text);
      LguMunPin := Trim(LguMunPinEdit.Text);

      if (Length(LguMunName) = 0) then begin
        Msg := Msg + 'Name is required.' + #10
      end;
      if (Length(LguMunIdxNo) = 0) then begin
        Msg := Msg + 'Index No. is required.' + #10
      end else if (Length(LguMunIdxNo) < 2) then begin
        Msg := Msg + 'Index No. must be 2 characters long.' + #10
      end;
      
      ClearDbPage();  
    end else if ((DatabasePage <> nil) and (CurPageID = DatabasePage.ID)) then begin
      Msg := '';
      Host := Trim(HostEdit.Text);
      Username := Trim(UsernameEdit.Text);
      Password := Trim(PasswordEdit.Text);
      Database := Trim(DatabaseEdit.Text);

      if (Length(Connection) = 0) then begin
        Msg := Msg + 'Connection is required.' + #10
      end;
      if (Length(Host) = 0) then begin
        Msg := Msg + 'Host is required.' + #10
      end;
      if (Length(Username) = 0) then begin
        Msg := Msg + 'Username is required.' + #10
      end;
      if (Length(Password) = 0) then begin
        Msg := Msg + 'Password is required.' + #10
      end;
      if (Length(Database) = 0) then begin
        Msg := Msg + 'Name is required.' + #10
      end;

      AppHostEdit.Text := 'localhost';
    end else if ((AppHostPage <> nil) and (CurPageID = AppHostPage.ID)) then begin
      Msg := '';

      AppHost := Trim(AppHostEdit.Text);

      if (Length(AppHost) = 0) then begin
        Msg := 'Host is required.' + #10
      end;
    end;
  end;
                
  if (Length(Trim(Msg)) > 0) then begin
    MsgBox(Msg, mbError, MB_OK)
    Result := False
  end;
end;

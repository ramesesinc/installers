; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]  
AppName=ETRACS - Client
AppVersion=2.5
AppPublisher=Rameses Systems, Inc.
DefaultDirName=C:\ETRACS
Compression=lzma2
SolidCompression=yes
OutputDir=userdocs:Inno Setup Examples Output
LicenseFile=license.txt
                                                   
[Files]                   
Source: "jre-6u45-windows-i586.exe"; Flags: dontcopy
Source: "jre-6u45-windows-x64.exe"; Flags: dontcopy
Source: "client\splash_setup.bmp"; Flags: dontcopy        
Source: "client\*"; DestDir: "{tmp}"; Flags: recursesubdirs  
Source: "client\etracs25_platform\*"; DestDir: "{app}"; Flags: recursesubdirs
       
[Icons]
Name: "{commondesktop}\ETRACS 2.5"; Filename: "{app}\etracs25_platform.exe"; IconFilename: "{tmp}\shortcut.ico"; 
Name: "{commondesktop}\ETRACS 2.5 With Console"; Filename: "{app}\etracs25_platform.bat"; IconFilename: "{tmp}\shortcut.ico";
                                                                                      
[Run]                                                        
Filename: "{app}\etracs25_platform.bat"; Description: "Launch Application"; Flags: postinstall runhidden nowait skipifsilent;
                                                       
[Code]     
#define MinJRE "1.6.0_45"

var
  HostPage: TWizardPage;   
  Host: String;
  HostEdit: TNewEdit;
                                                       

function IsJREInstalled: Boolean;
var
  JREVersion: string;
begin
  // read JRE version
  Result := RegQueryStringValue(HKLM32, 'Software\JavaSoft\Java Runtime Environment', 'Java6FamilyVersion', JREVersion);
  // if the previous reading failed and we're on 64-bit Windows, try to read 
  // the JRE version from WOW node
  if not Result and IsWin64 then
    Result := RegQueryStringValue(HKLM64, 'Software\JavaSoft\Java Runtime Environment', 'Java6FamilyVersion', JREVersion);
  // if the JRE version was read, check if it's at least the minimum one 
  if Result then
    Result := CompareStr(JREVersion, '{#MinJRE}') = 0;
end;  
      {
procedure InheritBoundsRect(ASource, ATarget: TControl);
begin
  ATarget.Left := ASource.Left;
  ATarget.Top := ASource.Top;
  ATarget.Width := ASource.Width;
  ATarget.Height := ASource.Height;
end;  }

procedure InitializeWizard;
var                                          
  BitmapFileName: String;    
  TopWelcomeLabel: TLabel;                                                 
  BottomWelcomeLabel: TLabel;
  LguTypeLabel, ConnectionLabel, UsernameLabel: TLabel;
  HostLabel, PasswordLabel, DatabaseLabel: TLabel;
begin                                                                                            
  BitmapFileName := ExpandConstant('{tmp}\splash_setup.bmp'); 
  ExtractTemporaryFile(ExtractFileName(BitmapFileName));
  //WizardForm.WizardBitmapImage.Bitmap.LoadFromFile(BitmapFileName);  }
  //WizardForm.WizardBitmapImage.Align := alClient;
  WizardForm.WizardBitmapImage.Bitmap.LoadFromFile(BitmapFileName);   
  WizardForm.WizardBitmapImage2.Bitmap.LoadFromFile(BitmapFileName);
   
  {TopWelcomeLabel := TLabel.Create(WizardForm);
  TopWelcomeLabel.Parent := WizardForm.WelcomeLabel1.Parent;
  TopWelcomeLabel.Font := WizardForm.WelcomeLabel1.Font;
  TopWelcomeLabel.Caption := WizardForm.WelcomeLabel1.Caption;
  TopWelcomeLabel.WordWrap := WizardForm.WelcomeLabel1.WordWrap; 
  TopWelcomeLabel.Transparent := True;
  InheritBoundsRect(WizardForm.WelcomeLabel1, TopWelcomeLabel);
  WizardForm.WelcomeLabel1.Visible := False;

  BottomWelcomeLabel := TLabel.Create(WizardForm);
  BottomWelcomeLabel.Parent := WizardForm.WelcomeLabel2.Parent;
  BottomWelcomeLabel.Font := WizardForm.WelcomeLabel2.Font;
  BottomWelcomeLabel.Caption := WizardForm.WelcomeLabel2.Caption;              
  BottomWelcomeLabel.WordWrap := WizardForm.WelcomeLabel2.WordWrap;
  BottomWelcomeLabel.Transparent := True;
  InheritBoundsRect(WizardForm.WelcomeLabel2, BottomWelcomeLabel);
  WizardForm.WelcomeLabel2.Visible := False;     }

  
  HostPage := CreateCustomPage(wpLicense, 
                              'App. Information', 
                              'Please specify app. information.');
      
  HostLabel := TLabel.Create(WizardForm);  
  with HostLabel do begin   
  Parent := HostPage.Surface;
  Top := 0;
  Left := 0;
  Caption := 'Host:'
  end; 
        
  HostEdit := TNewEdit.Create(WizardForm);
  with HostEdit do begin       
  Parent := HostPage.Surface;
  Top := HostLabel.Top;
  Left := 70;
  Width := ScaleY(320);
  end;       
                
end;                                

procedure CurStepChanged(CurStep: TSetupStep); 
var
  Path, Text, JavaHome: String;         
  ResultCode: Integer;
  ResultBool: Boolean;
begin
  case CurStep of 
    ssPostInstall:
      begin
        Text := '';

        Text := Text + 'app.url=http://' + Host + '/downloads/modules/updates.xml' + #10;
        Text := Text + 'app.clientcode=' + #10;
     
        Path := ExpandConstant('{app}\client.conf');  
        DeleteFile(Path);   
        SaveStringToFile(Path, Text, True); 

        
        ResultBool := RegQueryStringValue(HKLM32, 'Software\JavaSoft\Java Runtime Environment\{#MinJRE}', 'JavaHome', JavaHome);
        
        if not ResultBool and IsWin64 then
          ResultBool := RegQueryStringValue(HKLM64, 'Software\JavaSoft\Java Runtime Environment\{#MinJRE}', 'JavaHome', JavaHome);

        Text := '';

        Path := ExpandConstant('{tmp}');
        StringChangeEx(Path, '\', '/', True);
        Text := Text + 'temp.dir=' + Path + #10;

        Path := ExpandConstant('{app}');   
        StringChangeEx(Path, '\', '/', True);
        Text := Text + 'app.dir=' + Path + #10;
                                                     
        StringChangeEx(JavaHome, '\', '/', True);
        Text := Text + 'java.home.dir=' + JavaHome + #10;
        Path := ExpandConstant('{tmp}\temp.properties');
        DeleteFile(Path);
        SaveStringToFile(Path, Text, True);

        Path := ExpandConstant('{tmp}\ant\bin\ant.bat');   
        ExtractTemporaryFile(ExtractFileName(Path));
        Exec(ExpandConstant(Path), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
                                 
      end;
  end;
end;                                

  
function NextButtonClick(CurPageID: Integer): Boolean;
var 
  Msg, JreFileName: String;
  ResultCode: Integer;

begin
  Result := True
   
  case CurPageID of 
    wpLicense:
      begin
        if not IsJREInstalled then begin 
          if IsWin64 then begin
            Log('win64');
            JreFileName := ExpandConstant('{tmp}\jre-6u45-windows-x64.exe');
          end else if not IsWin64 then begin
            Log('not win64')
            JreFileName := ExpandConstant('{tmp}\jre-6u45-windows-i586.exe');
          end;
          
          ExtractTemporaryFile(ExtractFileName(JreFileName));
          Exec(ExpandConstant(JreFileName), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode); 
          
        end;

        if (HostEdit <> nil) then begin
          HostEdit.Text := 'localhost';
        end;
      end;
    HostPage.ID:
      begin
        Msg := '';

        Host := Trim(HostEdit.Text);

        if (Length(Host) = 0) then begin
          Msg := Msg + 'Host is required.';
        end;
      end;
  end; 
                
  if (Length(Trim(Msg)) > 0) then begin
    MsgBox(Msg, mbError, MB_OK)
    Result := False
  end;
end;
